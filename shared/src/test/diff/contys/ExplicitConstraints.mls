:NewParser
:NoJS

// :ConstrainedTypes


fun f: int => int
//│ f: int -> int

:e
fun f: int => int where int : string
//│ ╔══[ERROR] Type mismatch in constraint specifiation:
//│ ║  l.11: 	fun f: int => int where int : string
//│ ║        	                        ^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.11: 	fun f: int => int where int : string
//│ ║        	                        ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.11: 	fun f: int => int where int : string
//│ ╙──      	                              ^^^^^^
//│ f: int -> int

:e
fun f: int => (int where int : string)
//│ ╔══[ERROR] Type mismatch in constraint specifiation:
//│ ║  l.24: 	fun f: int => (int where int : string)
//│ ║        	                         ^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.24: 	fun f: int => (int where int : string)
//│ ║        	                         ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.24: 	fun f: int => (int where int : string)
//│ ╙──      	                               ^^^^^^
//│ f: int -> (int,)

fun f: 'a => ('a where 'a : string)
//│ f: (string & 'a) -> ('a,)


:e
fun f: 'a => ('a where 'a : string) where int : 'a
//│ ╔══[ERROR] Type mismatch in constraint specifiation:
//│ ║  l.41: 	fun f: 'a => ('a where 'a : string) where int : 'a
//│ ║        	                                          ^^^^^^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.41: 	fun f: 'a => ('a where 'a : string) where int : 'a
//│ ║        	                                          ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.41: 	fun f: 'a => ('a where 'a : string) where int : 'a
//│ ║        	                            ^^^^^^
//│ ╟── from type variable:
//│ ║  l.41: 	fun f: 'a => ('a where 'a : string) where int : 'a
//│ ╙──      	                                                ^^
//│ f: (string & 'a) -> ('a | int,)


:e
fun f: 'a => 'a where
  'a : string
  int : 'a
//│ ╔══[ERROR] Type mismatch in constraint specifiation:
//│ ║  l.60: 	  int : 'a
//│ ║        	  ^^^^^^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.60: 	  int : 'a
//│ ║        	  ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.59: 	  'a : string
//│ ║        	       ^^^^^^
//│ ╟── from type variable:
//│ ║  l.60: 	  int : 'a
//│ ╙──      	        ^^
//│ f: (string & 'a) -> ('a | int)


:e
fun f: 'a => forall 'b; 'a where
  'a : 'b
  'b : string
  int : 'a
//│ ╔══[ERROR] Type mismatch in constraint specifiation:
//│ ║  l.80: 	  int : 'a
//│ ║        	  ^^^^^^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.80: 	  int : 'a
//│ ║        	  ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.79: 	  'b : string
//│ ║        	       ^^^^^^
//│ ╟── from type variable:
//│ ║  l.80: 	  int : 'a
//│ ╙──      	        ^^
//│ f: (string & 'a) -> ('a | int)


// * Constraint is stashed!
fun f: 'a => forall 'b; 'a where
  'a : 'b => 'b
  int : 'a
//│ f: 'a -> (forall 'a, 'b. ('a | int
//│   where
//│     'a | int <: 'b -> 'b))

:ns
f
//│ res: forall 'a. 'a -> (forall 'b. ('a
//│   where
//│     'a <: 'b -> 'b))
//│   where
//│     'a :> int

// * Note the first-class polymorphic type with impossible bound...
let r = f(1)
//│ r: int
//│   where
//│     int <: 'b -> 'b
:ns
r
//│ res: forall 'c, 'a. 'c
//│   where
//│     'c :> forall 'b. ('a
//│   where
//│     'a <: 'b -> 'b)
//│     'a :> 1 | int

:e
r(2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.127: 	r(2)
//│ ║         	^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.113: 	let r = f(1)
//│ ║         	          ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.98: 	  'a : 'b => 'b
//│ ╙──      	       ^^^^^^^^
//│ res: error

:e
r + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.140: 	r + 1
//│ ║         	^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.113: 	let r = f(1)
//│ ║         	          ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.98: 	  'a : 'b => 'b
//│ ╙──      	       ^^^^^^^^
//│ res: error


fun f: 'a => forall 'b; 'b where
  'a : 'b => 'b
  int : 'a
//│ f: 'a -> (forall 'a, 'b. ('b
//│   where
//│     'a | int <: 'b -> 'b))

:ns
f
//│ res: forall 'a. 'a -> (forall 'b. ('b
//│   where
//│     'a <: 'b -> 'b))
//│   where
//│     'a :> int

let r = f(1)
//│ r: 'b
//│   where
//│     int <: 'b -> 'b

:e
r(2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.174: 	r(2)
//│ ║         	^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.168: 	let r = f(1)
//│ ║         	          ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.154: 	  'a : 'b => 'b
//│ ╙──       	       ^^^^^^^^
//│ res: error

:e
r + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.187: 	r + 1
//│ ║         	^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.168: 	let r = f(1)
//│ ║         	          ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.154: 	  'a : 'b => 'b
//│ ╙──       	       ^^^^^^^^
//│ res: error

