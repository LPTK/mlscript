:NoRecursiveTypes
:GeneralizeCurriedFunctions


// * Perfect Trees (https://www.cis.upenn.edu/~plclub/blog/2020-12-04-nested-datatypes/)

// data NTree (a :: Type) =
//     NLeaf a
//   | NNode (NTree (Two a))


type Two[A] = (A, A)
//│ Defined type alias Two[+A]

def mapTwo f ((a, b)) = (f a, f b)
//│ mapTwo: 'a -> (forall 'b, 'c, 'a, 'd, 'e. (('d, 'b,) -> ('e, 'c,)
//│   where
//│     'a <: 'd -> 'e & 'b -> 'c))
//│       = [Function: mapTwo]

class Leaf[A]: { value: A }
//│ Defined class Leaf[+A]

:e
class Node[A]: { subTree: PerfectTree[Two[A]] }
type PerfectTree[A] = Leaf[A] | Node[A]
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as Node[Two['A]], but is defined as Node['A]
//│ ║  l.25: 	class Node[A]: { subTree: PerfectTree[Two[A]] }
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as PerfectTree[Two['A]], but is defined as PerfectTree['A]
//│ ║  l.26: 	type PerfectTree[A] = Leaf[A] | Node[A]
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:IrregularTypes

class Node[A]: { subTree: PerfectTree[Two[A]] }
type PerfectTree[A] = Leaf[A] | Node[A]
//│ Defined class Node[+A]
//│ Defined type alias PerfectTree[+A]


n1 = Leaf { value = 1 }
//│ n1: Leaf[1]
//│   = Leaf { value: 1 }
n1: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Leaf { value: 1 }

n2 = Node { subTree = Leaf { value = (1, 2) } }
//│ n2: Node[1 | 2] with {subTree: Leaf[(1, 2,)]}
//│   = Node1 { subTree: Leaf { value: [ 1, 2 ] } }
n2: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Node1 { subTree: Leaf { value: [ 1, 2 ] } }

n4 = Node { subTree = Node { subTree = Leaf { value = ((1, 2), (3, 4)) } } }
//│ n4: Node[1 | 2 | 3 | 4] with {subTree: Node[(1 | 3, 2 | 4,)] with {subTree: Leaf[((1, 2,), (3, 4,),)]}}
//│   = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }
n4: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }


:e
rec def map f tree = case tree of {
  | Leaf -> Leaf { value = f tree.value }
  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
  }
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.65: 	rec def map f tree = case tree of {
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  | Leaf -> Leaf { value = f tree.value }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.68: 	  }
//│ ║        	^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α25_132'  <:  ((α26_147',) -> α28_148')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α25_132'  <:  ((α26_133''',) -> α28_134''')
//│ map: (nothing -> anything & 'value -> 'value0) -> ((Leaf[?] with {value: 'value}) | Node[?]) -> (Leaf['value0] | Node[nothing] & {subTree: nothing})
//│    = [Function: map]

// :e // fails after new-refreshing-extrusion // Works since inconsistent constrained types...
map succ n4
//│ res: Leaf[int] | (Node['A] with {subTree: 'subTree}) | 'a | 'b
//│    = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }


def map: ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│ map: ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│    = <missing implementation>

def map f tree = case tree of {
  | Leaf -> Leaf { value = f tree.value }
  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
  }
//│ 'c -> (forall 'd, 'e, 'value, 'subTree, 'f, 'g, 'h, 'i, 'A, 'a, 'subTree0, 'value0, 'j, 'k, 'A0, 'c, 'l, 'm, 'b. (('j & ((Leaf['a] with {value: 'value}) & 'g | (Node['a] with {subTree: PerfectTree[('l, 'f,) & 'a] & 'subTree}) & 'i)) -> ((Leaf['A0] with {value: 'value0}) | (Node['A] with {subTree: 'subTree0 | PerfectTree['b | ('m, 'd,)]}) | 'k | 'e)
//│   where
//│     'c <: 'value -> ('h & 'value0 & 'A0) & 'l -> ('m & 'A) & 'f -> ('A & 'd)))
//│   <:  map:
//│ ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│    = <no result>
//│      map is not implemented

map succ n4
//│ res: PerfectTree[int]
//│    = <no result>
//│      map and map are not implemented




