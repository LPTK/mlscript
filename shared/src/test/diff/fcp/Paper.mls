:NoJS
:NoRecursiveTypes
:NoConstrainedTypes


I x = x
K x y = x
auto x = x x
monster = (fun y -> (let tmp = y I in y K)) auto
//│ I: 'a -> 'a
//│ K: 'a -> anything -> 'a
//│ auto: (nothing -> 'a) -> 'a
//│ monster: anything -> nothing

monster{}
//│ res: nothing

fun y -> (let tmp = y I in y K)
//│ res: ((forall 'a. 'a -> 'a) -> anything & (forall 'b. 'b -> anything -> 'b) -> 'c) -> 'c



def bar x = if true then x else id
//│ bar: 'a -> ('b -> 'b | 'a)

bar succ
//│ res: int -> int



def k: forall 'a. (forall 'b. 'b -> ('a, 'b)) -> 'a
//│ k: (forall 'b. 'b -> ('a, 'b,)) -> 'a

:e
k (fun x -> (x, x)) + 1
//│ ╔══[ERROR] Type error in operator application
//│ ║  l.35: 	k (fun x -> (x, x)) + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.31: 	def k: forall 'a. (forall 'b. 'b -> ('a, 'b)) -> 'a
//│ ║        	                              ^^
//│ ╟── into type `int`
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this tuple literal:
//│ ║  l.35: 	k (fun x -> (x, x)) + 1
//│ ║        	            ^^^^^^
//│ ╟── • this reference:
//│ ║  l.35: 	k (fun x -> (x, x)) + 1
//│ ╙──      	^
//│ res: error | int


def k: (forall 'a. 'a -> 'a) -> int
//│ k: (forall 'a. 'a -> 'a) -> int

:e
(fun f -> k (fun x -> f x)) id
//│ ╔══[ERROR] Type error in application
//│ ║  l.57: 	(fun f -> k (fun x -> f x)) id
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.53: 	def k: (forall 'a. 'a -> 'a) -> int
//│ ║        	                   ^^
//│ ╟── back into type variable `'a`
//│ ║  l.53: 	def k: (forall 'a. 'a -> 'a) -> int
//│ ║        	                         ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.57: 	(fun f -> k (fun x -> f x)) id
//│ ║        	                      ^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.57: 	(fun f -> k (fun x -> f x)) id
//│ ╙──      	                      ^^^
//│ res: error | int



// * Expected error
:e
auto auto
//│ res: nothing

// * Note: this creates a cyclic bound structure:
// *  (α32_94 -> α33_95) <: α32_94 <: ((α32_94,) -> α33_95)
// * so it is rejected by the occurs-check
:e // occurs-check
auto auto!
//│ res: nothing


:NoCycleCheck
:RecursiveTypes

:e
auto auto
//│ res: nothing

auto auto!
//│ res: nothing

auto! auto!
//│ res: nothing

:e
auto! auto
//│ res: nothing

(fun x -> x x) (fun x -> x x)!
//│ res: nothing

