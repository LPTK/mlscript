:NoRecursiveTypes
:NoConstrainedTypes
:DontDistributeForalls



type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt



// * === Explicitly Annotated ===


def zero: forall 'a. ('a -> 'a) -> ('a -> 'a)
def zero f x = x
//│ zero: ('a -> 'a) -> 'a -> 'a
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ('a -> 'a) -> 'a -> 'a
//│     = [Function: zero]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero1]


def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

// * When we don't infer constrained types and extrude eagerly instead,
// * this one requires distributing the RHS forall to rigidify it earlier:
:e
def succ n f x = f (n f x)
//│ ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.41: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── from quantified type variable:
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                  ^^
//│     = [Function: succ1]

// * This explicit annotation makes it type check; like in MLF:
def succ (n: (forall 'N. ('N -> 'N) -> ('N -> 'N))) = fun f -> fun x -> f (n f x)
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'N0 'N1 'a. ('N0 -> ('N0 & 'N1) & 'N1 -> 'a) -> ('N0 & 'N1) -> 'a)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ2]

def succ (n: ChurchInt) f x = f (n f x)
//│ ChurchInt -> (forall 'N 'N0 'a. ('N -> ('N & 'N0) & 'N0 -> 'a) -> ('N & 'N0) -> 'a)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ3]

// * Manually distributing the signature also fixes the type checking:
def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
def succD n f x = f (n f x)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>
//│ ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succD]

succD = succ
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succ3]

// * This does not hold without distrobutivity
:e
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.90: 	succ = succD
//│ ║        	^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── from quantified type variable:
//│ ║  l.73: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│     = [Function: succ3]



// * === Usages ===


n1 = succ zero
//│ n1: ('M -> 'M) -> 'M -> 'M
//│   = [Function (anonymous)]

n2 = succ (succ zero)
//│ n2: ('M -> 'M) -> 'M -> 'M
//│   = [Function (anonymous)]

n3 = succ (succ (succ zero))
//│ n3: ('M -> 'M) -> 'M -> 'M
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1w = n1 wrap
//│ n1w: 'M -> 'M
//│   where
//│     'M :> {x: 'M}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

n1 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.149: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.142: 	n1 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.149: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.149: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.126: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.149: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error | int
//│    = 1

n2 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: { x: 0 } }

:e
res.x.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.178: 	res.x.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.171: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.178: 	res.x.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.178: 	res.x.x + 1
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.171: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into field selection with expected type `{x: ?x}`
//│ ║  l.178: 	res.x.x + 1
//│ ╙──       	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.178: 	res.x.x + 1
//│ ║         	^^^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.126: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.178: 	res.x.x + 1
//│ ╙──       	^^^^^^^
//│ res: error | int
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap]

n1w = n1 wrap_ty
//│ n1w: 'M -> 'M
//│   where
//│     'M :> {x: 'M}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.233: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.226: 	n1w 0
//│ ║         	    ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.233: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.233: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── type `{x: 'a}` is not an instance of type `int`
//│ ║  l.210: 	def wrap_ty: 'a -> {x: 'a}
//│ ║         	                   ^^^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.233: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error | int
//│    = 1



// * === Unannotated (More Powerful) ===


def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s]

def s_A1 (n: ChurchInt) f x = f (n f x)
//│ s_A1: ChurchInt -> (forall 'N 'N0 'a. ('N -> ('N & 'N0) & 'N0 -> 'a) -> ('N & 'N0) -> 'a)
//│     = [Function: s_A1]

zero = z
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]

// * Similalry as before, unannotated succ impl requires constrained types
:e
succ = s
//│ ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.280: 	succ = s
//│ ║         	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── from quantified type variable:
//│ ║  l.34: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                  ^^
//│     = [Function: s]

succ = s_A1
//│ ChurchInt -> (forall 'N 'N0 'a. ('N -> ('N & 'N0) & 'N0 -> 'a) -> ('N & 'N0) -> 'a)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s_A1]

succD = s
//│ ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 14
//│ annoying  calls  : 0
//│ subtyping calls  : 26

:e
:stats
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.320: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 92
//│ annoying  calls  : 0
//│ subtyping calls  : 291



// * === Usages ===


// * Interestingly, even without constrained types,
// * we can still use these inferred types to check the following uses:


n1 = s z
//│ n1: ('a -> 'b) -> 'a -> 'b
//│   = [Function (anonymous)]

n2 = s (s z)
//│ n2: ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│   = [Function (anonymous)]

n3 = s (s (s z))
//│ n3: ('a -> 'b & 'b -> 'c & 'c -> 'd) -> 'a -> 'd
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap1]

n1w = n1 wrap
//│ n1w: 'a -> {x: 'a}
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap1]

n1w = n1 wrap_ty
//│ n1w: 'a -> {x: 'a}
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap_ty 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap_ty 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1



// * === Conversions (Using Annotated Defs) ===


rec def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ to_church: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M | ChurchInt)
//│          = [Function: to_church]

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

to_church_ty = to_church
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church]

// * Non-recursive def emulates annotated recursive def
def to_church_ty n =
  if n == 0 then zero
  else succ (to_church_ty (n - 1))
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty1]



// * === Other Usages ===


sz = s zero
//│ sz: ('N -> ('N & 'a)) -> 'N -> 'a
//│   = [Function (anonymous)]

:ns
sz
//│ res: forall 'a 'b 'c 'N 'd. 'a
//│   where
//│     'a :> forall 'e 'f 'g. 'e -> (forall 'h 'i. 'h -> 'i)
//│     'i :> 'g
//│     'h <: 'c
//│     'c <: 'N
//│     'e <: 'f -> 'g & 'b
//│     'b <: 'N -> 'N
//│     'N <: 'd
//│     'f :> 'd
//│    = [Function (anonymous)]

sz: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// * This one works with CT...
// * Apparently worked when generalizing the LHS of ascriptions
:e
s zero : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.493: 	s zero : ChurchInt
//│ ║         	^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt
//│    = [Function (anonymous)]

// * Unlike with CT, here the error is not delayed
:e
sz1 = sz 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.508: 	sz1 = sz 1
//│ ║         	      ^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.508: 	sz1 = sz 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ║         	              ^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ╙──       	              ^
//│ sz1: anything -> nothing | error
//│    = [Function (anonymous)]

:re
sz1 2
//│ res: error
//│ Runtime error:
//│   TypeError: f is not a function



// * === Conversions (Using Unannotated Defs) ===

rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ to_ch_s: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'c. ('b & 'c) -> ('c | 'a)))
//│        = [Function: to_ch_s]


// Q: what's the difference with to_ch_s?!
rec def to_ch n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'c. ('b & 'c) -> ('c | 'a)))
//│      = [Function: to_ch]

:e // * Needs distrib (see below)
to_church_ty = to_ch
//│ int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'c. ('b & 'c) -> ('c | 'a)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.549: 	to_church_ty = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from application:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│             = [Function: to_ch]

// * Works with version where `s` has annotated `n: ChurchInt` parameter
rec def to_ch_s_A1 n =
  if n == 0 then z
  else s_A1 (to_ch_s_A1 (n - 1))
//│ to_ch_s_A1: int -> (forall 'N 'N0 'a. ('N -> ('N & 'N0) & 'N0 -> 'a) -> (forall 'b. ('N & 'N0 & 'b) -> ('b | 'a)))
//│           = [Function: to_ch_s_A1]

to_church_ty = to_ch_s_A1
//│ int -> (forall 'N 'N0 'a. ('N -> ('N & 'N0) & 'N0 -> 'a) -> (forall 'b. ('N & 'N0 & 'b) -> ('b | 'a)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_s_A1]

// * Boil down the problem with `to_ch`
rec def to_ch_simplif n = s (to_ch_simplif n)
//│ to_ch_simplif: anything -> (forall 'a. ('b -> 'a & 'b -> 'b) -> anything -> 'a)
//│              = [Function: to_ch_simplif]

:e
to_church_ty = to_ch_simplif
//│ anything -> (forall 'a. ('b -> 'a & 'b -> 'b) -> anything -> 'a)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.586: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from application:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│             = [Function: to_ch_simplif]


// * This annotation here doesn't help
:e
rec def to_ch_A1 n =
  if n == 0 then z
  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.607: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.608: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.609: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.607: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.608: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.609: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.607: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.608: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.609: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from reference:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ╙──       	                     ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.607: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.608: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.609: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from reference:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ╙──       	                     ^
//│ to_ch_A1: int -> (anything -> nothing) -> nothing -> nothing
//│         = [Function: to_ch_A1]

// * nope
// to_church_ty = to_ch_A1

// * This annotation makes it work with Constrained Types, but not without them!!
:e
rec def to_ch_A2 n = (
    if n == 0 then z
    else s (to_ch_A2 (n - 1))
  ) : ChurchInt
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.676: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.677: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.678: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.679: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.676: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.677: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.678: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.679: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.676: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.677: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.678: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.679: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from application:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ╙──       	                 ^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.676: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.677: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.678: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.679: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from application:
//│ ║  l.264: 	def s n f x = f (n f x)
//│ ╙──       	                 ^^^^^
//│ to_ch_A2: int -> ChurchInt
//│         = [Function: to_ch_A2]

to_church_ty = to_ch_A2
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_A2]


// * Uses `to_church` as the rec call
def to_church_mix n =
  if n == 0 then z
  else s (to_church (n - 1))
//│ to_church_mix: int -> (forall 'a. ('M -> ('M & 'b) & 'N -> ('b & 'N) & 'b -> 'a) -> (forall 'c. ('M & 'b & 'N & 'c) -> ('c | 'a)))
//│              = [Function: to_church_mix]

// * Works with Constrained Types
:e
to_church_ty = to_church_mix
//│ int -> (forall 'a. ('M -> ('M & 'b) & 'N -> ('b & 'N) & 'b -> 'a) -> (forall 'c. ('M & 'b & 'N & 'c) -> ('c | 'a)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.765: 	to_church_ty = to_church_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│             = [Function: to_church_mix]


:e // * Needs to distribute back (in the other direction) here:
rec def to_chD n =
  succD (to_chD n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.782: 	rec def to_chD n =
//│ ║         	               ^^^
//│ ║  l.783: 	  succD (to_chD n)
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.73: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.782: 	rec def to_chD n =
//│ ║         	               ^^^
//│ ║  l.783: 	  succD (to_chD n)
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.73: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.782: 	rec def to_chD n =
//│ ║         	               ^^^
//│ ║  l.783: 	  succD (to_chD n)
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.782: 	rec def to_chD n =
//│ ║         	               ^^^
//│ ║  l.783: 	  succD (to_chD n)
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ to_chD: anything -> (anything -> nothing) -> nothing -> anything
//│       = [Function: to_chD]



// * === With Distributivity ===


:DistributeForalls


def zero f x = x
//│ anything -> 'a -> 'a
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero3]

// * Now it works!
def succ n f x = f (n f x)
//│ ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ7]

zero = z
//│ anything -> 'a -> 'a
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]

// * Now works
succ = s
//│ ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]

// * Still works
succD = s
//│ ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]

// * Now works
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]

// * Now works
rec def to_chD n =
  succD (to_chD n)
//│ to_chD: anything -> ('M -> 'M) -> 'M -> 'M
//│       = [Function: to_chD1]

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 14
//│ annoying  calls  : 0
//│ subtyping calls  : 26

:stats
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 78
//│ annoying  calls  : 0
//│ subtyping calls  : 251

// * Now works
to_church_ty = to_ch
//│ int -> ('a -> 'b & 'a -> 'a) -> ('a & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch]

// * Still works
to_church_ty = to_ch_s_A1
//│ int -> ('N -> ('N & 'N0) & 'N0 -> 'a) -> ('N & 'N0 & 'a) -> 'a
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_s_A1]

// * Now works
to_church_ty = to_ch_simplif
//│ anything -> ('a -> 'b & 'a -> 'a) -> anything -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_simplif]

// * Redefinition in the context of distrib, just for the record (still works)
rec def to_ch_simplif n = s (to_ch_simplif n)
to_church_ty = to_ch_simplif
//│ to_ch_simplif: anything -> ('a -> 'b & 'a -> 'a) -> anything -> 'b
//│              = [Function: to_ch_simplif1]
//│ anything -> ('a -> 'b & 'a -> 'a) -> anything -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_simplif1]

:e
to_church_ty = to_ch_A1
//│ int -> (anything -> nothing) -> nothing -> nothing
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.939: 	to_church_ty = to_ch_A1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `'N`
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.7: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│             = [Function: to_ch_A1]

// * Now works
to_church_ty = to_ch_A2
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_A2]

// * Now works
to_church_ty = to_church_mix
//│ int -> ('M -> ('M & 'a) & 'N -> ('a & 'N) & 'a -> 'b) -> ('M & 'a & 'N & 'b) -> 'b
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_mix]



// * === Usages ===


n3 = s (s (s z))
//│ n3: ('a -> 'b & 'b -> 'c & 'c -> 'd) -> 'a -> 'd
//│   = [Function (anonymous)]

n3 wrap_ty 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


