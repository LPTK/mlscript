:NoProvs
:NoRecursiveTypes
:NoConstrainedTypes
:NoCycleCheck


// * ========= Minimized: =========

const a b = a
// const x y = y
//│ const: 'a -> anything -> 'a
//│      = [Function: const1]

def id2: 'A -> 'A
id2 = id
//│ id2: 'A -> 'A
//│    = <missing implementation>
//│ 'a -> 'a
//│   <:  id2:
//│ 'A -> 'A
//│    = [Function: id]

def f y = (fun h -> h (h (h (const y)))) id2
//│ f: 'a -> (forall 'b. 'b -> 'a)
//│  = [Function: f]

// * This used to be accepted!
:e
f {} {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.29: 	f {} {} {}
//│ ║        	^^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.29: 	f {} {} {}
//│ ║        	  ^^
//│ ╟── but it flows into application with expected type `anything -> ?a`
//│ ║  l.29: 	f {} {} {}
//│ ╙──      	^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: f(...)(...) is not a function


// * ========= Original: =========

def f y = (fun h -> h (h (h (fun _ -> y)))) id {}
//│ f: 'a -> 'a
//│  = [Function: f1]

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.51: 	f {} {}
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.51: 	f {} {}
//│ ║        	  ^^
//│ ╟── but it flows into application with expected type `anything -> ?a`
//│ ║  l.51: 	f {} {}
//│ ╙──      	^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: f1(...) is not a function

