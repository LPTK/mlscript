:NoRecursiveTypes


class L
class A: { f: anything }
//│ Defined class L
//│ Defined class A



def eval eval x = case x of
  L -> 0,
  A -> eval eval x.f
//│ eval: (nothing -> 'f -> 'a) -> ((A with {f: 'f}) | L) -> (0 | 'a)
//│     = [Function: eval]


:e
e = eval eval
//│ e: (A & {f: A | L} | L) -> 0
//│  = [Function (anonymous)]

e (A{f = L{}})
//│ res: 0
//│    = 0


:e
e = eval eval!
//│ e: (A & {f: A | L} | L) -> 0
//│  = [Function (anonymous)]

:e
e (A{f = L{}})
//│ res: 0
//│    = 0

:e
// * Note: this computation will diverge
rec def v = A{f = v}
//│ ╔══[ERROR] Inferred recursive type: 'f
//│   where
//│     'f :> A with {f: 'f}
//│ ╙──
//│ v: 'f
//│   where
//│     'f :> A with {f: 'f}
//│  = [Function: v]

:e
e v
//│ ╔══[ERROR] Inferred recursive type: 'f
//│   where
//│     'f :> A with {f: 'f}
//│ ╙──
//│ res: 0
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:RecursiveTypes

// * Note: Expected divergence
:re
e v
//│ res: 0
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



def eval eval x = case x of
  L -> 0,
  A -> { x = eval eval x.f }
//│ eval: (nothing -> 'f -> 'a) -> ((A with {f: 'f}) | L) -> (0 | {x: 'a})
//│     = [Function: eval1]


:e
e = eval eval
//│ e: (A & {f: A | L} | L) -> (0 | {x: 0 | {x: nothing}})
//│  = [Function (anonymous)]

:re
e v
//│ res: 0 | {x: 0 | {x: nothing}}
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


e = eval eval!
//│ e: (A & {f: A | L} | L) -> (0 | {x: 0 | {x: nothing}})
//│  = [Function (anonymous)]

:re
e v
//│ res: 0 | {x: 0 | {x: nothing}}
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

