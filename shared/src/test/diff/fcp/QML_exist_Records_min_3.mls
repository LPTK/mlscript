:NoRecursiveTypes
:DontDistributeForalls
:NoJS


type ArraysImpl[A] = { sub: A -> A }
//│ Defined type alias ArraysImpl[=A]

type ArraysImplConsumer[A] = ArraysImpl[A] -> int
//│ Defined type alias ArraysImplConsumer[=A]

def stepImpl_ty: ArraysImpl['a] -> ArraysImpl['a]
//│ stepImpl_ty: ArraysImpl['a] -> ArraysImpl['a]


// * There used to be a wrongly-simplified `'a <: nothing` bound here
def s arr (k: ArraysImplConsumer['a]) = arr (fun impl -> k (stepImpl_ty impl))
//│ s: ((ArraysImpl['a] -> int) -> 'b) -> ArraysImplConsumer['a] -> 'b

// * ...although we could see that it shouldn't be simplified to nothing:
:ns
s
//│ res: forall 'b 'a 'c. 'b -> (forall 'a0. ArraysImplConsumer['a0] -> 'c)
//│   where
//│     'a0 := 'a
//│     'b <: (forall 'a1. ArraysImpl['a1] -> int) -> 'c
//│     'a1 := 'a
//│     'a <: in anything out nothing


