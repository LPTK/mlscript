:GeneralizeCurriedFunctions
:NoRecursiveTypes
:NoProvs


def app n f = n f
//│ app: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│    = [Function: app]

def g x y = app x y
//│ g: 'a -> (forall 'b, 'c, 'd, 'e, 'a. (('b & 'e) -> 'd
//│   where
//│     'a <: 'b -> ('c & 'd)))
//│  = [Function: g]

:e
g {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.19: 	g {} {}
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.19: 	g {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.6: 	def app n f = n f
//│ ╙──     	              ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function



// ————————————————————————


def app p q = p q
//│ app: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│    = [Function: app1]

def mul r s = r (app s) id
//│ mul: 'a -> (forall 'b, 'c, 'a, 'd, 'e. (('e & 'b) -> 'd
//│   where
//│     'a <: (forall 'e, 'f, 'g, 'h. ('f -> 'g | 'h
//│   where
//│     'e <: 'f -> 'g)) -> ((forall 'i. 'i -> 'i) -> 'd & 'c)))
//│    = [Function: mul]

:e
mul id {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.53: 	mul id {}
//│ ║        	^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.53: 	mul id {}
//│ ║        	       ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.38: 	def app p q = p q
//│ ╙──      	              ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: p is not a function

def fact t = mul t {}
//│ fact: ((forall 'a, 'b, 'c. ('b -> 'c | 'a
//│   where
//│     anything <: 'b -> 'c)) -> ((forall 'd. 'd -> 'd) -> ('e & 'f) & 'g) & 'h & 'i) -> 'f
//│     = [Function: fact]

:e
fact id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.74: 	fact id
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.67: 	def fact t = mul t {}
//│ ║        	                   ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.38: 	def app p q = p q
//│ ╙──      	              ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: p is not a function

def mul r s = r (app s)
//│ mul: 'a -> (forall 'a, 'b, 'c, 'd. (('b & 'd) -> 'c
//│   where
//│     'a <: (forall 'b, 'e, 'f, 'g. ('e -> 'f | 'g
//│   where
//│     'b <: 'e -> 'f)) -> 'c))
//│    = [Function: mul1]

mul id id {}
//│ res: anything
//│    = {}



// ————————————————————————


:ArgGen
:DistributeForalls


type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

def succ: ChurchInt -> ChurchInt
def succ n f x = f (n f x)
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'b, 'd. ('d -> 'c
//│   where
//│     'b <: (forall 'a, 'b, 'd, 'e, 'f. ('e
//│   where
//│     'a <: 'b -> ('d -> 'e & 'f))) -> 'c)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ1]

def add n m = n succ m
def f x y = add x y
//│ add: 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'c
//│   where
//│     'a <: (ChurchInt -> ChurchInt) -> ('b -> 'c & 'd)))
//│    = [Function: add]
//│ f: 'a -> (forall 'b, 'c, 'd, 'e, 'a, 'f. (('e & 'f) -> 'c
//│   where
//│     'a <: (ChurchInt -> ChurchInt) -> ('e -> ('d & 'c) & 'b)))
//│  = [Function: f]

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.137: 	f {} {}
//│ ║         	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.137: 	f {} {}
//│ ║         	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.125: 	def add n m = n succ m
//│ ╙──       	              ^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function




