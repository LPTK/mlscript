:NoRecursiveTypes
:NoProvs
:ConstrainedTypes



def app n f = n f
//│ app: 'a -> ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)
//│    = [Function: app]

def g x y = app x y
//│ g: 'a -> ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)
//│  = [Function: g]

:e
g {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.20: 	g {} {}
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.20: 	g {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	def app n f = n f
//│ ╙──     	              ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function



// ————————————————————————


def app p q = p q
//│ app: 'a -> ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)
//│    = [Function: app1]

def mul r s = r (app s) id
//│ mul: 'a -> ('b -> 'c
//│   where
//│     'a <: (forall 'd 'e. ('d -> 'e
//│   where
//│     'b <: 'd -> 'e)) -> (forall 'f. 'f -> 'f) -> 'c)
//│    = [Function: mul]

:e
mul id {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.54: 	mul id {}
//│ ║        	^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.54: 	mul id {}
//│ ║        	       ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.39: 	def app p q = p q
//│ ╙──      	              ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: p is not a function

def fact t = mul t {}
//│ fact: ((forall 'a 'b. ('a -> 'b
//│   where
//│     anything <: 'a -> 'b)) -> (forall 'c. 'c -> 'c) -> 'd) -> 'd
//│     = [Function: fact]

:e
fact id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.75: 	fact id
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.68: 	def fact t = mul t {}
//│ ║        	                   ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.39: 	def app p q = p q
//│ ╙──      	              ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: p is not a function

def mul r s = r (app s)
//│ mul: 'a -> ('b -> 'c
//│   where
//│     'a <: (forall 'd 'e. ('d -> 'e
//│   where
//│     'b <: 'd -> 'e)) -> 'c)
//│    = [Function: mul1]

mul id id {}
//│ res: anything
//│    = {}



// ————————————————————————


:GeneralizeArguments
:DistributeForalls


type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

def succ: ChurchInt -> ChurchInt
def succ n f x = f (n f x)
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>
//│ 'a -> 'b -> ('c -> 'd
//│   where
//│     'b <: (forall 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'e)) -> 'd)
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ1]

:ns
def add n m = n succ m
//│ add: forall 'a. 'a -> (forall 'b 'c 'd. ('d -> 'c
//│   where
//│     'a <: (ChurchInt -> ChurchInt) -> 'b))
//│   where
//│     'b <: 'd -> 'c
//│    = [Function: add]

add
//│ res: 'a -> ('b -> 'c
//│   where
//│     'a <: (ChurchInt -> ChurchInt) -> 'b -> 'c)
//│    = [Function: add]

:ns
def f x y = add x y
//│ f: forall 'a. 'a -> (forall 'b 'c 'd 'e 'f. ('b -> 'c
//│   where
//│     'a <: (ChurchInt -> ChurchInt) -> 'd))
//│   where
//│     'b <: 'e
//│     'd <: 'e -> 'f
//│     'f <: 'c
//│  = [Function: f]

// :ds
f
//│ res: 'a -> ('b -> 'c
//│   where
//│     'a <: (ChurchInt -> ChurchInt) -> 'b -> 'c)
//│    = [Function: f]

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.160: 	f {} {}
//│ ║         	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.160: 	f {} {}
//│ ║         	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.127: 	def add n m = n succ m
//│ ╙──       	              ^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function






