// * Adaptation of QML's original existentials example; using encoded existentials and classes

:NoRecursiveTypes



class ArraysRep[A, Rep]
  method Init: A -> Rep
  method Sub: Rep -> int -> A
  method Update: Rep -> int -> A -> Rep
  method Fold: (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined class ArraysRep[=A, =Rep]
//│ Declared ArraysRep.Init: ArraysRep['A, 'Rep] -> 'A -> 'Rep
//│ Declared ArraysRep.Sub: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Declared ArraysRep.Fold: ArraysRep['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
  method Init = this.init
  method Sub = this.sub
  method Update = this.update
  method Fold = this.fold
//│ Defined class ArraysImpl[=A, =Rep]
//│ Defined ArraysImpl.Init: ArraysImpl['A, 'Rep] -> 'A -> 'Rep
//│ Defined ArraysImpl.Sub: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Defined ArraysImpl.Fold: ArraysImpl['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

type ArraysRepConsumer[A, R] = forall 'rep. ArraysRep[A, 'rep] -> R
//│ Defined type alias ArraysRepConsumer[=A, +R]

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]



baseImpl = ArraysImpl {
    init   = fun a -> a;
    sub    = fun r -> fun (i : int) -> r;
    update = fun r -> fun (i : int) -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

def base: Arrays['a]
def base f = f baseImpl
//│ base: Arrays['a]
//│ (error -> 'a) -> 'a
//│   <:  base:
//│ Arrays['a]
//│ ╔══[ERROR] identifier not found: baseImpl
//│ ║  l.51: 	def base f = f baseImpl
//│ ╙──      	               ^^^^^^^^
//│ Code generation encountered an error:
//│   unresolved symbol baseImpl



// * Notice the strange `anything` and `nothing` occurrences...
// * They don't seem to cause problems. Maybe simplification bug artifacts?
def simpleStepImpl arrImpl = ArraysImpl {
    init   = fun a -> (arrImpl.Init a, "initialized");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
  }
//│ simpleStepImpl: ArraysRep[in 'A & 'A0 & 'A1 out 'A0 | 'A, in 'Rep & 'Rep0 & 'a out 'Rep | 'Rep0] -> (ArraysImpl['A1, 'Rep1] with {fold: forall 'b. ('A0 -> 'b -> 'b) -> 'b -> ('Rep0, anything,) -> 'b, init: 'A -> ('Rep, "initialized",), sub: ('Rep0, anything,) -> int -> 'A0, update: forall 'c. ('Rep0 & 'c, anything,) -> int -> 'A -> ('Rep | 'c, "updated",)})
//│   where
//│     'Rep1 :> ('Rep | 'd, "initialized" | "updated",)
//│           <: ('Rep0 & 'a, anything,)
//│     'a <: 'Rep0 & 'd
//│     'd :> 'Rep
//│        <: 'Rep0 & 'a
//│     'A1 :> 'A0
//│         <: 'A
//│               = [Function: simpleStepImpl]

def simpleStepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ simpleStepImpl_ty: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│                  = <missing implementation>

simpleStepImpl_ty = simpleStepImpl
//│ ArraysRep[in 'A & 'A0 & 'A1 out 'A0 | 'A, in 'Rep & 'Rep0 & 'a out 'Rep | 'Rep0] -> (ArraysImpl['A1, 'Rep1] with {fold: forall 'b. ('A0 -> 'b -> 'b) -> 'b -> ('Rep0, anything,) -> 'b, init: 'A -> ('Rep, "initialized",), sub: ('Rep0, anything,) -> int -> 'A0, update: forall 'c. ('Rep0 & 'c, anything,) -> int -> 'A -> ('Rep | 'c, "updated",)})
//│   where
//│     'Rep1 :> ('Rep | 'd, "initialized" | "updated",)
//│           <: ('Rep0 & 'a, anything,)
//│     'a <: 'Rep0 & 'd
//│     'd :> 'Rep
//│        <: 'Rep0 & 'a
//│     'A1 :> 'A0
//│         <: 'A
//│   <:  simpleStepImpl_ty:
//│ ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│                  = [Function: simpleStepImpl]

// * This is weird.
// * It seems to be the same subtype check as above, but it goes of the rails (see stats)
// * Also weird: this type checks efficiently when the file is typed with `:ConstrainedTypes`
:e
:stats
simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?A ?a ?A0 ?update ?b ?A1 ?fold ?c ?d ?Rep ?Rep0 ?A2 ?e ?f ?Rep1 ?init ?Rep2 ?Rep3 ?A3 ?g ?sub ?Rep4 ?A4 ?h ?i ?A5 ?Rep5 ?A6 ?j ?A7 ?Rep6 ?Rep7 ?Rep8 ?Rep9 ?k ?Rep10 ?A8 ?A9. ?d -> ?h <: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]` took too many steps and ran out of fuel (10000)
//│ ║  l.106: 	simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ║         	^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│   where
//│     'a :> error
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 10057
//│ annoying  calls  : 76
//│ subtyping calls  : 70601
// * Note that the above incidentally can be checked using recursive types
:RecursiveTypes
:stats
simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 579
//│ annoying  calls  : 101
//│ subtyping calls  : 5641
:NoRecursiveTypes

// * Apparently, it's due to excessive extrusion due to the type annot not being generalized!
:stats
simpleStepImpl : forall 'a 'r. ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 711
//│ annoying  calls  : 101
//│ subtyping calls  : 1838



// * First approach to implementing step

def simpleStep: Arrays['a] -> Arrays['a]
//│ simpleStep: Arrays['a] -> Arrays['a]
//│           = <missing implementation>

// * Note: this one fails to type check when the file is typed with `:ConstrainedTypes`
def simpleStep arr = arr (fun impl -> fun (k: ArraysRepConsumer['a, 'r]) -> k (simpleStepImpl impl))
//│ /!!!\ Uncaught error: java.lang.StackOverflowError


// * Second approach to implementing step

def simpleStep2: Arrays['a] -> Arrays['a]
//│ simpleStep2: Arrays['a] -> Arrays['a]
//│            = <missing implementation>

def simpleStep2 arr (k: ArraysRepConsumer['a, 'r]) = arr (fun impl -> k (simpleStepImpl impl))
//│ /!!!\ Uncaught error: java.lang.StackOverflowError



sb = simpleStep base
//│ sb: Arrays['a]
//│   = <no result>
//│     simpleStep is not implemented

sb (fun arr -> arr.Init true)
//│ res: ??Rep
//│    = <no result>
//│      sb and simpleStep are not implemented

sb (fun arr -> arr.Sub (arr.Init true) 1)
//│ res: true
//│    = <no result>
//│      sb and simpleStep are not implemented

:e // * Type error is expected – argument order confusion
sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.178: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'Rep` is not an instance of type `int`
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.9: 	  method Sub: Rep -> int -> A
//│ ║       	                     ^^^
//│ ╟── from application:
//│ ║  l.178: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	                          ^^^^^^^^^^^^^
//│ ╟── Note: quantified type variable 'Rep is defined at:
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟──       class type parameter Rep is defined at:
//│ ║  l.7: 	class ArraysRep[A, Rep]
//│ ╙──     	                   ^^^
//│ res: error | true
//│    = <no result>
//│      sb and simpleStep are not implemented

sb (fun arr -> arr.Update (arr.Init true) 1 false)
//│ res: ??Rep
//│    = <no result>
//│      sb and simpleStep are not implemented

:e // * Rightly prevent skolem confusion
sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╔══[ERROR] Type error in application
//│ ║  l.207: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.207: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                                             ^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.162: 	sb = simpleStep base
//│ ║         	     ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.207: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                ^^
//│ ╟── • this reference:
//│ ║  l.207: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	                                ^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.207: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╙──       	                                             ^^^^^^^^^^^^^^
//│ res: int -> anything -> (??Rep | ??Rep0) | error
//│    = <no result>
//│      sb and simpleStep are not implemented

sb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = <no result>
//│      sb and simpleStep are not implemented



// * The unannotated versions of `step` do not work, as expected

:e
def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ((forall 'a 'A 'c 'Rep 'A0 'd 'A1 'Rep0. ArraysRep[in 'A & 'A1 & 'A0 out 'A1 | 'A, in 'Rep & 'Rep0 & 'a out 'Rep | 'Rep0] -> ((forall 'Rep1. ArraysImpl['A0, 'Rep1] with {fold: forall 'b. ('A1 -> 'b -> 'b) -> 'b -> ('Rep0, anything,) -> 'b, init: 'A -> ('Rep, "initialized",), sub: ('Rep0, anything,) -> int -> 'A1, update: forall 'e. ('Rep0 & 'e, anything,) -> int -> 'A -> ('Rep | 'e, "updated",)}) -> 'd) -> 'd) -> 'f) -> 'f
//│   where
//│     'Rep1 :> ('Rep | 'c, "initialized" | "updated",)
//│           <: ('Rep0 & 'a, anything,)
//│     'a <: 'Rep0 & 'c
//│     'c :> 'Rep
//│        <: 'Rep0 & 'a
//│     'A0 :> 'A1
//│         <: 'A
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.247: 	def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.37: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.247: 	def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ║         	                     ^^^
//│ ╟── • this function:
//│ ║  l.247: 	def simpleStep arr = arr (fun impl -> fun k -> k (simpleStepImpl impl))
//│ ║         	                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.68: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
//│ ╙──      	                                                    ^^
//│           = [Function: simpleStep]

:e
def simpleStep2 arr k = arr (fun impl -> k (simpleStepImpl impl))
//│ /!!!\ Uncaught error: java.lang.StackOverflowError



// * Now for the real version of `step`


:escape
def Math: nothing
//│ Math: nothing
//│     = <missing implementation>

def div: int -> int -> int
def div a b = Math.trunc(a/b)
//│ div: int -> int -> int
//│    = <missing implementation>
//│ number -> number -> nothing
//│   <:  div:
//│ int -> int -> int
//│    = [Function: div1]

def mod: int -> int -> int
rec def mod a b = if a < b then a else mod (a - b) b
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

def stepImpl arrImpl = ArraysImpl {
    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
    sub = fun ((r0, r1)) -> fun i ->
      if mod i 2 == 0
      then arrImpl.Sub r0 (div i 2)
      else arrImpl.Sub r1 (div i 2);
    update = fun ((r0, r1)) -> fun i -> fun a ->
      if mod i 2 == 0
      then (arrImpl.Update r0 (div i 2) a, r1)
      else (r0, arrImpl.Update r1 (div i 2) a);
    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
  }
//│ stepImpl: ArraysRep[in 'A & 'A0 & 'A1 out 'A0 | 'A, in 'Rep & 'Rep0 & 'a & 'c out 'Rep | 'Rep0] -> (ArraysImpl['A1, 'Rep1] with {fold: forall 'b 'b0. ('A0 -> 'b -> 'b & 'A0 -> 'b0 -> ('b & 'b0)) -> ('b & 'b0) -> ('Rep0, 'Rep0,) -> 'b, init: 'A -> ('Rep, 'Rep,), sub: ('Rep0, 'Rep0,) -> int -> 'A0, update: forall 'd 'e. ('Rep0 & 'd, 'Rep0 & 'e,) -> int -> 'A -> ('Rep | 'd, 'Rep | 'e,)})
//│   where
//│     'Rep1 :> ('Rep | 'a | 'f, 'Rep | 'c | 'g,)
//│           <: ('Rep0 & 'a, 'Rep0 & 'c,)
//│     'c <: 'Rep0 & 'g
//│     'g :> 'Rep
//│        <: 'Rep0 & 'c
//│     'a <: 'Rep0 & 'f
//│     'f :> 'Rep
//│        <: 'Rep0 & 'a
//│     'A1 :> 'A0
//│         <: 'A
//│ Code generation encountered an error:
//│   unresolved symbol mod


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>

def step arr = arr (fun impl -> fun (k: ArraysRepConsumer['a, 'r]) -> k (stepImpl impl))
//│ /!!!\ Uncaught error: java.lang.StackOverflowError


def step2: Arrays['a] -> Arrays['a]
//│ step2: Arrays['a] -> Arrays['a]
//│      = <missing implementation>

def step2 arr (k: ArraysRepConsumer['a, 'r]) = arr (fun impl -> k (simpleStepImpl impl))
//│ /!!!\ Uncaught error: java.lang.StackOverflowError


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = <no result>
//│      step is not implemented

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = <no result>
//│      ssb and step are not implemented


ssb = step2 (step2 base)
//│ ssb: Arrays['a]
//│    = <no result>
//│      step2 is not implemented

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = <no result>
//│      ssb and step2 are not implemented


rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray(n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = <no result>
//│              base is not implemented

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = <no result>
//│      mkMonoArray and base are not implemented

snb (fun arr -> arr.Init true)
//│ res: ??Rep | ??Rep0
//│    = <no result>
//│      snb, mkMonoArray and base are not implemented


rec def mkMonoArray n =
  if n == 0 then base else step2 (mkMonoArray(n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = <no result>
//│              base is not implemented

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = <no result>
//│      mkMonoArray and base are not implemented

snb (fun arr -> arr.Init true)
//│ res: ??Rep | ??Rep0
//│    = <no result>
//│      snb, mkMonoArray and base are not implemented



// * From the paper:
// let mkPolyArray n = {∀α(∃ρ.∀β.sig(α,ρ,β))} (mkMonoArray n)



