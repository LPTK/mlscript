
:GeneralizeCurriedFunctions
:ArgGen // Type of cons is much simpler without this...

:AllowTypeErrors // FIXME


class Z
class S[P]
  method Inv: P -> P
  method Inv = id
//│ Defined class Z
//│ Defined class S[=P]
//│ Declared S.Inv: S['P] -> 'P -> 'P
//│ Defined S.Inv: S['P] -> (forall 'a. 'a -> 'a)

:IrregularTypes

class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
class Nil: { size: Z }
type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ Defined class Cons[+A, =N]
//│ Defined class Nil
//│ Defined type alias Vec[+A, =N]

type AnyVec[A] = forall 'r. (forall 'p. Nil | Cons[A, S['p]] -> 'r) -> 'r
//│ Defined type alias AnyVec[+A]

def Nil = Nil { size = Z{} }
def Cons head tail = Cons { head; tail; size = S{} }
//│ Nil: Nil
//│ Cons: 'a -> (forall 'A, 'N, 'b, 'c, 'tail, 'head. (Vec['A, 'N] & 'c & 'tail) -> ((Cons['A | 'a, 'N] with {head: 'head | 'a, size: forall 'P, 'size. S['P] | 'size, tail: 'tail}) | 'b))


def nil k = k Nil
def cons h t k = k (Cons h t)
//│ nil: (Nil -> 'a & 'b) -> 'a
//│ cons: 'a -> (forall 'b. 'b -> (forall 'c, 'd. ((forall 'A, 'a, 'e, 'b, 'head, 'f, 'g, 'tail, 'N. ((Cons['A | 'a | 'g, 'N] with {head: 'head | 'a | 'g, size: forall 'P, 'size. S['P] | 'size, tail: 'tail | 'b}) | 'f | 'e
//│   where
//│     'b <: Vec['A, 'N])) -> 'c & 'd) -> 'c))

nil_ty = nil : Vec[int, Z]
//│ nil_ty: Vec[int, Z]

def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ cons_ty: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

// FIXME runs out of fuel, making the test very slow...
// cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]

// FIXME runs out of fuel, making the test very slow...
// cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]

type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ Defined type alias Cons_ty












// :exit
// ====================================================================================================


















cons_ty = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.88: 	cons_ty = cons : Cons_ty
//│ ║        	          ^^^^
//│ ╟── expression of type `S[‘n_285 & ?p]` is not an instance of type `'n_285`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.54: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ Cons_ty
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty3 = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.103: 	cons_ty3 = cons : Cons_ty
//│ ║         	           ^^^^
//│ ╟── expression of type `S[‘n_355 & ?p]` is not an instance of type `'n_355`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.54: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ cons_ty3: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'c, 'd. ((forall 'e, 'A, 'head, 'f, 'g, 'tail, 'N. (Cons['a | 'A | 'b | 'g, 'N] with {head: 'head | 'b | 'g, size: forall 'P, 'size. S['P] | 'size, tail: 'tail | Vec['a, 'n]}) | 'e | 'f) -> 'c & 'd) -> 'c))
//│   where
//│     'N := 'n

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.121: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── expression of type `S[‘n_516 & ?p]` is not an instance of type `'n_516`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.54: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── from type variable:
//│ ║  l.116: 	def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ ║         	                       ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ res: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'c, 'd. ((forall 'head, 'N, 'e, 'f, 'g, 'tail, 'A. (Cons['a | 'A | 'b | 'f, 'N] with {head: 'head | 'b | 'f, size: forall 'size, 'P. S['P] | 'size, tail: 'tail | Vec['a, 'n]}) | 'e | 'g) -> 'c & 'd) -> 'c))
//│   where
//│     'N := 'n

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.142: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── expression of type `S[‘n_679 & ?p]` is not an instance of type `'n_679`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.54: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── from type variable:
//│ ║  l.137: 	def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ ║         	                       ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ res: Cons_ty


// v0 = nil

// v0_ty = v0 : Vec[int, Z]

v1_ = Cons 1 nil
//│ v1_: (Cons[1, 'N] with {size: forall 'P, 'size. S['P] | 'size, tail: forall 'a, 'b. (Nil -> 'a & 'b) -> 'a}) | 'c
//│   where
//│     'N :> Z

v1_ty = v1_ : Cons[int, Z]
//│ v1_ty: Cons[int, Z]

v1_0 = cons 1 nil
//│ v1_0: ((forall 'N, 'a, 'head, 'A, 'b, 'c, 'tail. (Cons[1 | 'A | 'b, 'N] with {head: 1 | 'head | 'b, size: forall 'size, 'P. S['P] | 'size, tail: 'tail | Vec['A, 'n]}) | 'a | 'c) -> 'd & 'e) -> 'd
//│   where
//│     'N := 'n
//│     'n :> Z

v1_0 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.177: 	v1_0 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.177: 	v1_0 : Vec[int, S[Z]]
//│ ║         	                ^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]

v1_1 k = k v1_
//│ v1_1: ((forall 'N, 'a. (Cons[1, 'N] with {size: forall 'P, 'size. S['P] | 'size, tail: forall 'b, 'c. (Nil -> 'b & 'c) -> 'b}) | 'a) -> 'd & 'e) -> 'd
//│   where
//│     'N :> Z

// :e
v1_1 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.198: 	v1_1 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.198: 	v1_1 : Vec[int, S[Z]]
//│ ║         	                ^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]


v1_tty = cons_ty 1 nil_ty
//│ v1_tty: Vec[int, S['n]]
//│   where
//│     'n :> Z
//│        <: S[in ‘p_998_1000 | ‘p_998_1001 out ‘p_998_1000 & ‘p_998_1001] | Z

v1_tty = cons_ty2 1 nil_ty
//│ ╔══[ERROR] identifier not found: cons_ty2
//│ ║  l.220: 	v1_tty = cons_ty2 1 nil_ty
//│ ╙──       	         ^^^^^^^^
//│ v1_tty: error

v1_tty = cons_ty3 1 nil_ty
//│ v1_tty: Vec[int, S['n]]
//│   where
//│     'n :> Z
//│        <: S[in ‘p_1020_1022 | ‘p_1020_1023 out ‘p_1020_1022 & ‘p_1020_1023] | Z


v2 = cons 1 (cons 2 nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.233: 	v2 = cons 1 (cons 2 nil)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                                                                     ^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ v2: error


def impossible x = case x of {}
//│ impossible: nothing -> nothing

def head1 vec = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head1: ((forall 'head, 'a, 'b, 'c, 'd. ('c & ((Cons['a, ?]\size\tail with {head: 'head}) & 'a | Nil & {size: nothing} & 'd)) -> ('head | 'b)) -> 'e & 'f) -> 'e

def head1_ty : Vec['a, S['p]] -> 'a
head1_ty = head1
//│ head1_ty: Vec['a, S['p]] -> 'a
//│ ((forall 'a, 'b, 'c, 'd, 'head. ('c & ((Cons['a, ?]\size\tail with {head: 'head}) & 'a | Nil & {size: nothing} & 'b)) -> ('head | 'd)) -> 'e & 'f) -> 'e
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a

// FIXME works without `:GeneralizeCurriedFunctions`!
def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head2: Vec['a, S['p]] -> (forall 'b. 'a | 'head | 'b | 'c)

head1 v1
head1 v2
//│ ╔══[ERROR] identifier not found: v1
//│ ║  l.272: 	head1 v1
//│ ╙──       	      ^^
//│ res: error
//│ res: error

:e
head1 nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.281: 	head1 nil
//│ ║         	^^^^^^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.249: 	def impossible x = case x of {}
//│ ║         	                        ^
//│ ╟── from field selection:
//│ ║  l.253: 	  | Nil -> impossible v.size
//│ ║         	                      ^^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: error


rec def sum vec = vec (fun v -> case v of {
  | Nil -> 0
  | Cons -> v.head + sum v.tail
  })
//│ sum: 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)

def sum_ty : Vec[int, 'n] -> int
//│ sum_ty: Vec[int, 'n] -> int

// FIXME should be a cycle error
sum_ty = sum
//│ 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)
//│   <:  sum_ty:
//│ Vec[int, 'n] -> int
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?head, ?tail, ?e, ?sum, ?f, ?g. ?sum <: forall ?n. Vec[int, ?n] -> int` exceeded recursion depth limit (300)
//│ ║  l.312: 	sum_ty = sum
//│ ║         	^^^^^^^^^^^^
//│ ╟── while constraining:  (‹∀ 3. (((Nil & {size: (‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])}) | (Cons[int<number>,S['p45_1418'''']] & Cons[int<number>,(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])])) -> 'r44_1419')› -> 'r44_1419')  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── while constraining:  ‹∀ 2. (‹∀ 3. (((Nil & {size: (‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])}) | (Cons[int<number>,S['p45_47'''']] & Cons[int<number>,(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])])) -> 'r44_48''')› -> 'r44_48''')›  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── while constraining:  Vec[int<number>,(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])]  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── while constraining:  Vec[int<number>,(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])]  <!<  α1317_1365'
//│ ╟── while constraining:  Vec[int<number>,(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])]  <!<  tail1323_1369'
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')] | ‘n_1363')..((S[‘p_1416_1417'] & ‘n_1363') | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') | ‘p_1416_1417')]), size: S[(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])], head: int<number>})  <!<  {tail: tail1323_1369'}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')] | ‘n_1363')..((S[‘p_1416_1417'] & ‘n_1363') | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') | ‘p_1416_1417')]), size: S[(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n_1363' | S[((((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413') & ‘p_1416_1417')])], head: int<number>})  <!<  α1320_1368'
//│ ╟── while constraining:  (Cons[int<number>,S[‘p_1416_1417'..‘p_1416_1417']..S[‘p_1416_1417'..‘p_1416_1417']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])])  <!<  ((nil<> & α1319_1367') | ((cons<> & α1320_1368') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])}) | (Cons[int<number>,S[‘p_1416_1417'..‘p_1416_1417']..S[‘p_1416_1417'..‘p_1416_1417']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])]))  <!<  ((nil<> & α1319_1367') | ((cons<> & α1320_1368') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])}) | (Cons[int<number>,S[‘p_1416_1417'..‘p_1416_1417']..S[‘p_1416_1417'..‘p_1416_1417']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])]))  <!<  α1318_1366'
//│ ╟── while constraining:  ((Nil & {size: (‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])}) | (Cons[int<number>,S[‘p_1416'']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])]))  <!<  α1318_1366'
//│ ╟── while constraining:  (α1318_1366' -> (0<int,number> | α1325_1371'))  <!<  ‹∀ 3. (((Nil & {size: (‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])}) | (Cons[int<number>,S['p45_1414'''']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])])) -> 'r44_1415')›
//│ ╟── while constraining:  ((α1318_1366' -> (0<int,number> | α1325_1371')),)  <!<  (‹∀ 3. (((Nil & {size: (‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])}) | (Cons[int<number>,S['p45_1414'''']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])])) -> 'r44_1415')›,)
//│ ╟── while constraining:  (‹∀ 3. (((Nil & {size: (‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])}) | (Cons[int<number>,S['p45_1414'''']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])])) -> 'r44_1415')› -> 'r44_1415')  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── while constraining:  ‹∀ 2. (‹∀ 3. (((Nil & {size: (‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])}) | (Cons[int<number>,S['p45_47'''']] & Cons[int<number>,(‘n_1363' | S[(((((((((‘p_1376_1377' & ‘p_1380_1381') & ‘p_1384_1385') & ‘p_1388_1389') & ‘p_1392_1393') & ‘p_1396_1397') & ‘p_1400_1401') & ‘p_1404_1405') & ‘p_1408_1409') & ‘p_1412_1413')])])) -> 'r44_48''')› -> 'r44_48''')›  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ((Nil & {size: ‘n_1363'}) | (Cons[Int,S[‘p_1376_1377'..‘p_1376_1377']..S[‘p_1376_1377'..‘p_1376_1377']] & Cons[Int,‘n_1363']))  <!<  ((nil<> & α1319_1367') | ((cons<> & α1320_1368') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ‘n_1363'}) | (Cons[Int,S[‘p_1376_1377'..‘p_1376_1377']..S[‘p_1376_1377'..‘p_1376_1377']] & Cons[Int,‘n_1363']))  <!<  α1318_1366'
//│ ╟── while constraining:  ((Nil & {size: ‘n_1363'}) | (Cons[Int,S[‘p_1376'']] & Cons[Int,‘n_1363']))  <!<  α1318_1366'
//│ ╟── while constraining:  (α1318_1366' -> (0<int,number> | α1325_1371'))  <!<  ‹∀ 3. (((Nil & {size: ‘n_1363'}) | (Cons[Int,S['p45_1374'''']] & Cons[Int,‘n_1363'])) -> 'r44_1375')›
//│ ╟── while constraining:  ((α1318_1366' -> (0<int,number> | α1325_1371')),)  <!<  (‹∀ 3. (((Nil & {size: ‘n_1363'}) | (Cons[Int,S['p45_1374'''']] & Cons[Int,‘n_1363'])) -> 'r44_1375')›,)
//│ ╟── while constraining:  (‹∀ 3. (((Nil & {size: ‘n_1363'}) | (Cons[Int,S['p45_1374'''']] & Cons[Int,‘n_1363'])) -> 'r44_1375')› -> 'r44_1375')  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── while constraining:  ‹∀ 2. (‹∀ 3. (((Nil & {size: ‘n_1363'}) | (Cons[Int,S['p45_47'''']] & Cons[Int,‘n_1363'])) -> 'r44_48''')› -> 'r44_48''')›  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── while constraining:  Vec[Int,‘n_1363']  <!<  (((α1318_1366' -> (0<int,number> | α1325_1371')),) -> α1326_1372')
//│ ╟── while constraining:  Vec[Int,‘n_1363']  <!<  α1317_1365'
//│ ╟── while constraining:  (Vec[Int,‘n_1363'],)  <!<  (α1317_1365',)
//│ ╟── while constraining:  (α1317_1365' -> α1326_1372')  <!<  (Vec[Int,‘n_1363'] -> Int)
//│ ╟── while constraining:  sum1316_1364'#  <!<  (Vec[Int,‘n_1363'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. sum1316'#›  <!<  (Vec[Int,‘n_1363'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. sum1316'#››  <!<  (Vec[Int,‘n_1363'] -> Int)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. sum1316'#››  <!<  ‹∀ 0. (Vec[Int,'n1341_1342'] -> Int)›


sum nil
//│ res: int

sum v1_0
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?b, ?tail, ?c, ?d, ?e, ?f, ?g, ?h, ?head, ?sum. ?sum <: (forall ?n, ?i, ?a, ?j. ?j) -> ?k` exceeded recursion depth limit (300)
//│ ║  l.358: 	sum v1_0
//│ ║         	^^^^^^^^
//│ ╟── while constraining:  (α1318_1449 -> (0<int,number> | α1325_1454))  <!<  (((Nil & {size: ('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])}) | (Cons['a562_1469,S[‘p_1524']] & Cons['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])])) -> 'r44_1523)
//│ ╟── while constraining:  (α1318_1449 -> (0<int,number> | α1325_1454))  <!<  ‹∀ 3. (((Nil & {size: ('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])}) | (Cons['a562_1469,S['p45_1522'''']] & Cons['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])])) -> 'r44_1523)›
//│ ╟── while constraining:  ((α1318_1449 -> (0<int,number> | α1325_1454)),)  <!<  (‹∀ 3. (((Nil & {size: ('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])}) | (Cons['a562_1469,S['p45_1522'''']] & Cons['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])])) -> 'r44_1523)›,)
//│ ╟── while constraining:  (‹∀ 3. (((Nil & {size: ('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])}) | (Cons['a562_1469,S['p45_1522'''']] & Cons['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])])) -> 'r44_1523)› -> 'r44_1523)  <!<  (((α1318_1449 -> (0<int,number> | α1325_1454)),) -> α1326_1455)
//│ ╟── while constraining:  ‹∀ 2. (‹∀ 3. (((Nil & {size: ('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])}) | (Cons['a562_1469,S['p45_47'''']] & Cons['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])])) -> 'r44_48''')› -> 'r44_48''')›  <!<  (((α1318_1449 -> (0<int,number> | α1325_1454)),) -> α1326_1455)
//│ ╟── while constraining:  Vec['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])]  <!<  (((α1318_1449 -> (0<int,number> | α1325_1454)),) -> α1326_1455)
//│ ╟── while constraining:  Vec['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])]  <!<  α1317_1448
//│ ╟── while constraining:  Vec['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])]  <!<  tail1323_1452
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)] | 'n563_1463)..((S[‘p_1520_1521] & 'n563_1463) | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) | ‘p_1520_1521)]), size: S[('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])], Cons#A: mut ..'a562_1469, tail: Vec['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])], head: 'a562_1469})  <!<  {tail: tail1323_1452}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)] | 'n563_1463)..((S[‘p_1520_1521] & 'n563_1463) | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) | ‘p_1520_1521)]), size: S[('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])], Cons#A: mut ..'a562_1469, tail: Vec['a562_1469,('n563_1463 | S[((((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517) & ‘p_1520_1521)])], head: 'a562_1469})  <!<  α1320_1451
//│ ╟── while constraining:  (Cons['a562_1469,S[‘p_1520_1521..‘p_1520_1521]..S[‘p_1520_1521..‘p_1520_1521]] & Cons['a562_1469,('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])])  <!<  ((nil<> & α1319_1450) | ((cons<> & α1320_1451) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])}) | (Cons['a562_1469,S[‘p_1520_1521..‘p_1520_1521]..S[‘p_1520_1521..‘p_1520_1521]] & Cons['a562_1469,('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])]))  <!<  ((nil<> & α1319_1450) | ((cons<> & α1320_1451) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])}) | (Cons['a562_1469,S[‘p_1520_1521..‘p_1520_1521]..S[‘p_1520_1521..‘p_1520_1521]] & Cons['a562_1469,('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])]))  <!<  α1318_1449
//│ ╟── while constraining:  ((Nil & {size: ('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])}) | (Cons['a562_1469,S[‘p_1520']] & Cons['a562_1469,('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])]))  <!<  α1318_1449
//│ ╟── while constraining:  (α1318_1449 -> (0<int,number> | α1325_1454))  <!<  ‹∀ 3. (((Nil & {size: ('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])}) | (Cons['a562_1469,S['p45_1518'''']] & Cons['a562_1469,('n563_1463 | S[(((((((‘p_1488_1489 & ‘p_1492_1493) & ‘p_1496_1497) & ‘p_1500_1501) & ‘p_1504_1505) & ‘p_1508_1509) & ‘p_1512_1513) & ‘p_1516_1517)])])) -> 'r44_1519)›
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 4. α583_1459'''''›  <!<  ((nil<> & α1319_1450) | ((cons<> & α1320_1451) & ~(nil<>)))
//│ ╟── while constraining:  ‹∀ 4. α583_1459'''''›  <!<  α1318_1449
//│ ╟── while constraining:  (‹∀ 4. α583_1459'''''›,)  <!<  (α1318_1449,)
//│ ╟── while constraining:  (α1318_1449 -> (0<int,number> | α1325_1454))  <!<  ((‹∀ 4. α583_1459'''''›,) -> α604_1473)
//│ ╟── while constraining:  (α1318_1449 -> (0<int,number> | α1325_1454))  <!<  α564_1472
//│ ╟── while constraining:  ((α1318_1449 -> (0<int,number> | α1325_1454)),)  <!<  (α564_1472,)
//│ ╟── while constraining:  (α564_1472 -> α604_1473)  <!<  (((α1318_1449 -> (0<int,number> | α1325_1454)),) -> α1326_1455)
//│ ╟── while constraining:  ‹∀ 3. (α564_1458'''' -> α604_1471'''')›  <!<  (((α1318_1449 -> (0<int,number> | α1325_1454)),) -> α1326_1455)
//│ ╟── while constraining:  α840_1457  <!<  (((α1318_1449 -> (0<int,number> | α1325_1454)),) -> α1326_1455)
//│ ╟── while constraining:  ‹∀ 0. α840'›  <!<  (((α1318_1449 -> (0<int,number> | α1325_1454)),) -> α1326_1455)
//│ ╟── while constraining:  ‹∀ 0. α840'›  <!<  α1317_1448
//│ ╟── while constraining:  (‹∀ 0. α840'›,)  <!<  (α1317_1448,)
//│ ╟── while constraining:  (α1317_1448 -> α1326_1455)  <!<  ((‹∀ 0. α840'›,) -> α1446)
//│ ╟── while constraining:  sum1316_1447#  <!<  ((‹∀ 0. α840'›,) -> α1446)
//│ ╙── while constraining:  ‹∀ 0. sum1316'#›  <!<  ((‹∀ 0. α840'›,) -> α1446)
//│ res: error

sum v2
//│ res: error




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


def head1_ty v = case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  }
//│ ('a & ((Cons['b, ?]\size\tail with {head: 'head}) & 'b | Nil & {size: nothing} & 'c)) -> ('head | 'd)
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  | Nil -> impossible v.size
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Cons -> v.head
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── type `(forall ?p. (Cons[‘a_1599, in S[in ‘p_1600 & ?p out ?p | ‘p_1600] out S[in ?p | ‘p_1600 out ‘p_1600 & ?p]] | (Nil with {size: S[‘p_1600]})) -> ?r) -> ?r` does not match type `Cons[?, ?] & ?a | Nil & ?b`
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ╙──      	                      ^


sum v1_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	sum v1_ty
//│ ║        	^^^^^^^^^
//│ ╟── type `Cons[int, Z]` is not a function
//│ ║  l.168: 	v1_ty = v1_ : Cons[int, Z]
//│ ║         	              ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a -> ?b) -> ?c`
//│ ║  l.+1: 	sum v1_ty
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.300: 	rec def sum vec = vec (fun v -> case v of {
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.301: 	  | Nil -> 0
//│ ║         	^^^^^^^^^^^^
//│ ║  l.302: 	  | Cons -> v.head + sum v.tail
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.303: 	  })
//│ ║         	^^^^
//│ ╟── from reference:
//│ ║  l.300: 	rec def sum vec = vec (fun v -> case v of {
//│ ╙──       	                  ^^^
//│ res: error


