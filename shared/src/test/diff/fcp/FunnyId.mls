:NoRecursiveTypes


def id_ty: forall 'a. 'a -> 'a
//│ id_ty: 'a -> 'a
//│      = <missing implementation>


rec def id x = let tmp = id x in x
//│ id: 'a -> 'a
//│   = [Function: id]

:re
id 1
//│ res: 1
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

id_ty = id
//│ 'a -> 'a
//│   <:  id_ty:
//│ 'a -> 'a
//│      = [Function: id]


// * When we had the "recursive definition hacks", and the reason was:
// * "we get `'a <: 'a -> anything` because `id` is passed for `x`
// * and we can't infer polymorphic recursion, so all `x` should have the same type"
:e // occurs-check
rec def id x = let tmp = id id x in x
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> ?
//│     'b :> 'b -> 'b
//│        <: ? & 'a
//│ ║  l.30: 	rec def id x = let tmp = id id x in x
//│ ╙──      	                         ^^^^^
//│ id: 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   = [Function: id1]

:e
:re
id 1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> ?
//│     'b :> 'b -> 'b | 1
//│        <: ? & 'a
//│ ║  l.30: 	rec def id x = let tmp = id id x in x
//│ ╙──      	                         ^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.47: 	id 1
//│ ║        	^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.47: 	id 1
//│ ║        	   ^
//│ ╟── Note: constraint arises from application:
//│ ║  l.30: 	rec def id x = let tmp = id id x in x
//│ ║        	                         ^^^^^^^
//│ ╟── from reference:
//│ ║  l.30: 	rec def id x = let tmp = id id x in x
//│ ╙──      	                                    ^
//│ res: 'a -> 'a | 1 | error | 'b
//│   where
//│     'a :> 'a -> 'a | 1
//│        <: 'a -> anything & 'b
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:e
id_ty = id
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> anything
//│     'b :> 'b -> 'b
//│        <: 'a
//│ ║  l.30: 	rec def id x = let tmp = id id x in x
//│ ╙──      	                         ^^^^^
//│ 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   <:  id_ty:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.73: 	id_ty = id
//│ ║        	^^^^^^^^^^
//│ ╟── type `'a` is not a function
//│ ║  l.4: 	def id_ty: forall 'a. 'a -> 'a
//│ ║       	                      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.30: 	rec def id x = let tmp = id id x in x
//│ ║        	                         ^^^^^^^
//│ ╟── from reference:
//│ ║  l.30: 	rec def id x = let tmp = id id x in x
//│ ║        	                                    ^
//│ ╟── Note: quantified type variable 'a is defined at:
//│ ║  l.4: 	def id_ty: forall 'a. 'a -> 'a
//│ ╙──     	                  ^^
//│      = [Function: id1]

// * Note: the above seem to work with :precise-rec-typing
:precise-rec-typing
rec def id x = let tmp = id id x in x
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

:re
id 1
//│ res: 1
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

id_ty = id
//│ /!!!\ Uncaught error: java.lang.StackOverflowError


// * Not sure why we get a cycle in this slight variation!
:e
rec def id x = if true then x else id id x
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

:e
id_ty = id
//│ /!!!\ Uncaught error: java.lang.StackOverflowError



:RecursiveTypes
:NoJS


def choose: 'a -> 'a -> 'a
//│ choose: 'a -> 'a -> 'a

rec def id1 x = choose x (id1 id1 x)
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

id1 id
//│ res: 'b | 'a
//│   where
//│     'b :> 'c -> 'b
//│     'c <: 'a
//│     'a <: ('b | 'c) -> 'a

rec def id1 x = if true then x else id1 id1 x
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

id1 id
//│ res: 'a -> 'b | 'c
//│   where
//│     'a <: 'c
//│     'c <: ('a -> 'b | 'a) -> 'c
//│     'b :> 'a -> 'b | 'c


