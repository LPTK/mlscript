:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type sid = ['a] 'a -> 'a;;
// type nat = ['a] ('a -> 'a) -> 'a -> 'a
type Sid = forall 'a. 'a -> 'a
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias Sid
//│ Defined type alias ChurchInt

// let auto (x:sid) = x x
// let id x = x
// let k x y = x
def auto (x: Sid) = x x
def auto_ x = x x
def id x = x
def k x y = x
//│ auto: Sid -> (Sid | 'a)
//│     = [Function: auto]
//│ auto_: ('a -> 'b & 'a) -> 'b
//│      = [Function: auto_]
//│ id: 'a -> 'a
//│   = [Function: id]
//│ k: 'a -> (forall 'b. 'b -> 'a)
//│  = [Function: k]

// (* church_zero is like the sequence *)
// let church_zero = fun f -> id
def church_zero = fun f -> id
//│ church_zero: 'a -> (forall 'b. 'b -> 'b)
//│            = [Function: church_zero]

// (* church_un is like apply *)
// let church_one = fun f x -> f x
def church_one = fun f -> fun x -> f x
//│ church_one: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│           = [Function: church_one]

// (* church_un is like apply_twice *)
// let church_two = fun f x -> f (f x)
def church_two = fun f -> fun x -> f (f x)
//│ church_two: 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│           = [Function: church_two]

// let church_succ n = fun f x -> f (n f x)
def church_succ n = fun f -> fun x -> f (n f x)
//│ church_succ: 'a -> (forall 'b. 'b -> (forall 'c, 'b, 'd, 'a, 'e, 'f. ('c -> 'e
//│   where
//│     'a <: 'b -> ('c -> 'f & 'd)
//│     'b <: 'f -> 'e)))
//│            = [Function: church_succ]

// (* We build the a0 of the icfp version paper *)
// type a1 = ['b] ['a > sid] ('a -> 'b) -> 'b
// let a1 = fun f -> f id;;
// let a3 = (fun z z' -> z church_two);;
// let a2 (x:a1) =  (x auto); (fun y -> x y; y church_succ) a3;;
// let a0 = a2 a1;;
type A1 = forall 'a 'b. (('a | Sid) -> 'b) -> 'b
def a1 = fun f -> f id
def a3 = fun z -> fun _ -> z church_two
def a2 (x: A1) =
  let _ = x auto in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a2_ (x: A1) =
  let _ = x auto_ in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a0 = a2 a1
def a0_ = a2_ a1
//│ Defined type alias A1
//│ a1: ((forall 'a. 'a -> 'a) -> 'b & 'c) -> 'b
//│   = [Function: a1]
//│ a3: 'a -> (forall 'b, 'a, 'c. ('b -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> (forall 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'd <: 'e -> 'f & 'f -> 'g))) -> 'c))
//│   = [Function: a3]
//│ a2: A1 -> (forall 'a, 'b, 'c. ('b -> 'a | 'c
//│   where
//│     forall 'd, 'e. 'e -> (forall 'f. 'f -> (forall 'g, 'e, 'h, 'i, 'j, 'f. ('i -> 'j
//│   where
//│     'f <: 'h -> 'j
//│     'e <: 'f -> ('i -> 'h & 'g)))) | 'd <: (forall 'k. 'k -> (forall 'k, 'l, 'm, 'n. ('l -> 'n
//│   where
//│     'k <: 'l -> 'm & 'm -> 'n))) -> 'a))
//│   = [Function: a2]
//│ a2_: A1 -> (forall 'a, 'b, 'c. ('b -> 'a | 'c
//│   where
//│     forall 'd, 'e. 'e -> (forall 'f. 'f -> (forall 'g, 'h, 'i, 'e, 'f, 'j. ('j -> 'i
//│   where
//│     'e <: 'f -> ('j -> 'g & 'h)
//│     'f <: 'g -> 'i))) | 'd <: (forall 'k. 'k -> (forall 'k, 'l, 'm, 'n. ('l -> 'n
//│   where
//│     'k <: 'l -> 'm & 'm -> 'n))) -> 'a))
//│    = [Function: a2_]
//│ a0: 'a -> 'b | 'c
//│   where
//│     forall 'd, 'e. 'e -> (forall 'f. 'f -> (forall 'g, 'h, 'i, 'j, 'e, 'f. ('g -> 'i
//│   where
//│     'e <: 'f -> ('g -> 'h & 'j)
//│     'f <: 'h -> 'i))) | 'd <: (forall 'k. 'k -> (forall 'k, 'l, 'm, 'n. ('l -> 'n
//│   where
//│     'k <: 'l -> 'm & 'm -> 'n))) -> 'b
//│   = [Function: a0]
//│ a0_: 'a -> 'b | 'c
//│   where
//│     forall 'd, 'e. 'e -> (forall 'f. 'f -> (forall 'g, 'e, 'h, 'f, 'i, 'j. ('j -> 'g
//│   where
//│     'f <: 'i -> 'g
//│     'e <: 'f -> ('j -> 'i & 'h)))) | 'd <: (forall 'k. 'k -> (forall 'k, 'l, 'm, 'n. ('l -> 'n
//│   where
//│     'k <: 'l -> 'm & 'm -> 'n))) -> 'b
//│    = [Function: a0_]

// let test0 = 
//   (fun f -> f (fun h -> h id))
//     (fun (g:a1) ->
//       k (g (fun (x:sid) -> x x))
//         ((fun t -> (fun u v -> v) (g t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;
def test0 =
  (fun f -> f (fun h -> h id))
    (fun (g: A1) ->
      k (g (fun (x: Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
def test0_ =
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test0: Sid | 'a | 'b
//│      = [Function: test0]
//│ test0_: 'a -> 'a
//│       = [Function: test0_]


// (** Encoding in F+eta **)
// (* we repace sa by sb and build a coercion function form sb to sc *)

// type a1_sid = ['b] ['a = sid] ('a -> 'b) -> 'b;;
// type a1_nat = ['b] ['a = nat -> nat] ('a -> 'b) -> 'b;;
type A1_sid = forall 'a 'b. (('a & Sid | Sid) -> 'b) -> 'b
type A1_nat = forall 'a 'b. (('a & ChurchInt -> ChurchInt | ChurchInt -> ChurchInt) -> 'b) -> 'b
//│ Defined type alias A1_sid
//│ Defined type alias A1_nat

// let a1_sid_to_nat (g : a1_sid) =
//   let r = fun f -> g (fun (x : sid) -> f x) in
//   (r : a1_nat);;

// :e // due to tapping
// :e // skolem extrusion
def a1_sid_to_nat (g: A1_sid) =
  let r = fun f -> g (fun (x: Sid) -> f x) in
  (r: A1_nat)
//│ a1_sid_to_nat: A1_sid -> A1_nat
//│              = [Function: a1_sid_to_nat]

def a1_sid_to_nat_ g =
  let r = fun f -> g (fun x -> f x) in
  r
//│ a1_sid_to_nat_: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: (forall 'b, 'd, 'e. ('d -> 'e
//│   where
//│     'b <: 'd -> 'e)) -> 'c))
//│               = [Function: a1_sid_to_nat_]

// (* the term is as above but abstract over sb and uses the coercion *)

// let test_in_F_eta = 
//   (fun f -> f (fun h -> h id))
//     (fun (g : a1_sid) ->
//       k (g (fun (x : sid) -> x x))
//         ((fun t -> (fun u v -> v) ((a1_sid_to_nat g) t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;

// :e // FIXME?
// :e // FIXME? refreshing-extr
def test_in_F_eta = 
  (fun f -> f (fun h -> h id))
    (fun (g: A1_sid) ->
      k (g (fun (x : Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test_in_F_eta: Sid | 'a | 'b
//│              = [Function: test_in_F_eta]

def test_in_F_eta_ = 
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat_ g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test_in_F_eta_: 'a -> 'a
//│               = [Function: test_in_F_eta_]

// (*
// (* Le terme dans la syntaxe de Joe Wells *)
//   (fn f => f (fn h => h id))
//     (fn g => 
//         k (g (fn x => x x))
//           ((fn t => (fn u v => v) (g t) (t (fn f x => x)))
//              (fn x => ((fn f x => f x) x) (fn f x => x))))

// *)

// (* We can also build a version of a0 that should not be in F+eta. 
// To do that we require x to return its argument. 
// *)

// type a1' = ['a > sid] ('a -> 'a) -> 'a -> 'a;;
type A1' = forall 'a. (('a | Sid) -> ('a | Sid)) -> ('a | Sid) -> ('a | Sid)
//│ Defined type alias A1'

// let either x y = if true then x else y;;
// let a1' = fun f x -> f (f (either id x));;
// let a2' (x:a1') = x auto id; (fun y -> x y church_two; y church_succ) a3;;
// let a0' = a2' a1';;

def either x y = if true then x else y
//│ either: 'a -> (forall 'b, 'c, 'd. ('b & 'c & 'd) -> ('a | 'd))
//│       = [Function: either]

def a1' = fun f -> fun x -> f (f (either id x))
//│ a1': 'a -> (forall 'b, 'c, 'd, 'a, 'e, 'f, 'g. (('h & 'd & 'c & 'b & 'g) -> 'e
//│   where
//│     'a <: (forall 'i, 'h. 'i -> 'i | 'h) -> 'f & 'f -> 'e))
//│    = [Function: a1$]

// FIXME: ClassCastException: mlscript.TyperDatatypes$TraitTag cannot be cast to mlscript.TyperDatatypes$TypeVariable
// def a2' (x: A1') =
//   let _ = x auto id in
//   (fun y ->
//     let _ = x y church_two in
//     y church_succ
//   ) a3

def a2'_ x =
  let _ = x auto_ id in
  (fun y ->
    let _ = x y church_two in
    y church_succ
  ) a3
//│ a2'_: ((forall 'a, 'b. 'a -> (forall 'a, 'c, 'd. ('d -> 'c
//│   where
//│     'a <: (forall 'e. 'e -> (forall 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'e <: 'f -> 'g & 'g -> 'h))) -> 'c)) | 'b) -> ((forall 'e. 'e -> (forall 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'e <: 'f -> 'g & 'g -> 'h))) -> 'i & 'j) & (forall 'k, 'l. ('k -> 'l & 'k) -> 'l) -> ((forall 'm. 'm -> 'm) -> 'n & 'o) & 'p) -> (forall 'q, 'r, 's. ('r -> 'q | 's
//│   where
//│     forall 't, 'u. 't -> (forall 'v. 'v -> (forall 'v, 'w, 'x, 'y, 'z, 't. ('w -> 'y
//│   where
//│     't <: 'v -> ('w -> 'x & 'z)
//│     'v <: 'x -> 'y))) | 'u <: (forall 'e. 'e -> (forall 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'e <: 'f -> 'g & 'g -> 'h))) -> 'q))
//│     = [Function: a2$_]

// FIXME
def a0' = a2' a1'
//│ ╔══[ERROR] identifier not found: a2'
//│ ║  l.277: 	def a0' = a2' a1'
//│ ╙──       	          ^^^
//│ a0': error
//│ Code generation encountered an error:
//│   unresolved symbol a2'

// FIXME?
// :e // works with quantif extrus
:Fuel 15000
def a0'_ = a2'_ a1'
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.288: 	def a0'_ = a2'_ a1'
//│ ║         	           ^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 1. (α43_44'' -> α43_44'')››  <:  α33_1240'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 1. (α43_44'' -> α43_44'')››  <:  α33_35''
//│ a0'_: error
//│     = [Function: a0$_]
:ResetFuel

// * ^ Strangely, this one works[ed] with recursive types:
:RecursiveTypes
// :e // fails after new-refreshing-extrusion // Works since inconsistent constrained types...
def a0'_ = a2'_ a1'
//│ a0'_: 'a -> 'b | 'c
//│   where
//│     forall 'd, 'e. 'd -> (forall 'f. 'f -> (forall 'g, 'h, 'f, 'd, 'i, 'j. ('h -> 'g
//│   where
//│     'd <: 'f -> ('h -> 'j & 'i)
//│     'f <: 'j -> 'g))) | 'e <: (forall 'k. 'k -> (forall 'k, 'l, 'm, 'n. ('l -> 'n
//│   where
//│     'k <: 'l -> 'm & 'm -> 'n))) -> 'b
//│     = [Function: a0$_1]
:NoRecursiveTypes

// type a1'_sid = ['a = sid] ('a -> 'a) -> 'a -> 'a;;
// type a1'_nat = ['a = nat] ('a -> 'a) -> 'a -> 'a;;
type A1'_sid = forall 'a. (('a & Sid | Sid) -> ('a & Sid | Sid)) -> ('a & Sid | Sid) -> ('a & Sid | Sid)
type A1'_nat = forall 'a. (('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)) -> ('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)
//│ Defined type alias A1'_sid
//│ Defined type alias A1'_nat

// (* There is no coercion from a1'_sid to a1'_nat, hence we can conjecture that a0'
//    is not in F+eta. *)


