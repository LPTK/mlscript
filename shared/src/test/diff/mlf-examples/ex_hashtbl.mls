:NoRecursiveTypes
:NoJS



// ============ Dummy definitions to type the examples ============


class List[a]
  method Get: a
def nil: List['a]
def cons[a]: a -> List[a] -> List[a]
def isnil: List['a] -> bool
def car: List['a] -> 'a
def cdr: List['a] -> List['a]
def fst: (('a, 'b),) -> 'a
def snd: (('a, 'b),) -> 'b
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a
//│ nil: List[nothing]
//│ cons: 'a -> List['a] -> List['a]
//│ isnil: List[?] -> bool
//│ car: List['a] -> 'a
//│ cdr: List['a] -> List['a]
//│ fst: ('a, anything,) -> 'a
//│ snd: (anything, 'b,) -> 'b


// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def none: Option['a]
def none = None {}
def some: 'a -> Option['a]
def some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ none: Option[nothing]
//│ None
//│   <:  none:
//│ Option[nothing]
//│ some: 'a -> Option['a]
//│ 'val -> Some['val]
//│   <:  some:
//│ 'a -> Option['a]

def match_opt: forall 'a 'r. (() -> 'r, 'a -> 'r) -> Option['a] -> 'r
//│ match_opt: (() -> 'r, 'a -> 'r,) -> Option['a] -> 'r

match_opt (n, s) opt = case opt of
  None -> n(),
  Some -> s(opt.val)
//│ (() -> 'a, 'val -> 'a,) -> (None | Some[?] & {val: 'val}) -> 'a
//│   <:  match_opt:
//│ (() -> 'r, 'a -> 'r,) -> Option['a] -> 'r



// ============ The original examples ============


// let create_hashtbl () = []
def create_hashtbl () = nil
//│ create_hashtbl: () -> List[nothing]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: List['a] -> 'b -> 'c -> List[('b, 'c,) | 'a]


// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key

rec def find table key =
  if isnil table then none
  else if eq (fst (car table)) key then some (snd (car table))
  else find (cdr table) key
//│ find: List[(anything, 'a,)] -> anything -> Option['a]

// :ns
// find

:ng
find(error:List[(int, string)])(unit)
//│ res: Option[string]


// * Versions with `_A` are versions we annotate that weren't originally annotated
def find_A: forall 'a 'b. List[('a, 'b)] -> 'a -> Option['b]
//│ find_A: List[(anything, 'b,)] -> anything -> Option['b]

def find_A table key =
  if isnil table then none
  else if eq (fst (car table)) key then some (snd (car table))
  else find_A (cdr table) key
//│ List[(anything, 'a,)] -> anything -> Option['a]
//│   <:  find_A:
//│ List[(anything, 'b,)] -> anything -> Option['b]


// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end

def nfind table key =
  match_opt (
    fun () -> fun f -> fun x -> x,
    fun v -> v
  ) (find table key)
//│ nfind: List[(anything, 'a,)] -> anything -> (anything -> 'b -> 'b | 'a)


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> ('a -> ('a & 'b)) -> 'a -> 'b

// * Versions with `_` are versions where we removed the annotatation
def succ_ n = fun f -> fun x -> f (n f x)
//│ succ_: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd

// let add (n:Int) (m:Int) = n succ m
def add (n: ChurchInt) (m: ChurchInt) = n succ m
def add_ n m = n succ_ m
//│ add: ChurchInt -> ChurchInt -> (('a -> ('a & 'b)) -> 'a -> 'b | ChurchInt)
//│ add_: ((forall 'a 'b 'c 'd. ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd) -> 'e -> 'f) -> 'e -> 'f

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt_ n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> string
//│ printInt_: ((int -> int) -> 0 -> anything) -> string

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl ()
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│ table: List[("one", forall 'a 'b. ('a -> 'b) -> 'a -> 'b,)]
//│ table: List[("one" | "two", forall 'a 'b 'c. ('a -> 'b & 'b -> 'c & 'a -> 'c) -> 'a -> 'c,)]

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))
:stats
zog = printInt (add (nfind table "one") (nfind table "two"))
//│ zog: string
//│ constrain calls  : 1295
//│ annoying  calls  : 30
//│ subtyping calls  : 10785

// * Some subexpressions typed individually:

:stats
a = add (nfind table "one")
//│ a: ChurchInt -> (('a -> ('a & 'b)) -> 'a -> 'b | ChurchInt)
//│ constrain calls  : 595
//│ annoying  calls  : 15
//│ subtyping calls  : 5226

:stats
b = (nfind table "two")
//│ b: ('a -> 'b & 'b -> 'c & 'a -> 'c & 'a -> 'd & 'd -> 'c) -> 'a -> ('a | 'c)
//│ constrain calls  : 327
//│ annoying  calls  : 15
//│ subtyping calls  : 3485

:stats
b (fun x -> x)
//│ res: 'a -> 'a
//│ constrain calls  : 220
//│ annoying  calls  : 0
//│ subtyping calls  : 2101

b (fun x -> x (not x))
//│ res: nothing -> nothing

b (fun x -> 0)
//│ res: 'a -> (0 | 'a)

// * Note: this one required `:DistributeForalls`
:stats
a b
//│ res: ('a -> ('a & 'b)) -> 'a -> 'b | ChurchInt
//│ constrain calls  : 262
//│ annoying  calls  : 0
//│ subtyping calls  : 2236


// * [FCP:patho] !! Note the stats here for this fully annotation-free version
:stats
// ==========================================================================================
:Fuel 20000
zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ zog_: string
//│ constrain calls  : 3136
//│ annoying  calls  : 30
//│ subtyping calls  : 24198

:stats
a_ = add_ (nfind table "one")
//│ a_: ('a -> 'b -> 'c & 'a -> 'b -> 'd & 'a -> 'b -> 'e & 'a -> 'b -> 'f & 'g) -> (('f -> 'h & 'i -> 'h & 'e -> 'i & 'd -> 'h & 'j -> 'h & 'c -> 'j & 'a) -> 'b -> 'h | 'g)
//│ constrain calls  : 677
//│ annoying  calls  : 15
//│ subtyping calls  : 6012

:stats
a_ b
//│ res: ('a -> 'b & 'b -> 'c & 'a -> 'c & 'a -> 'd & 'd -> 'c & 'e -> 'f & 'g -> 'e & 'h -> ('g & 'i) & 'i -> 'g & 'j -> 'f & 'h -> ('j & 'k) & 'k -> 'j & 'l -> 'f & 'm -> 'l & 'h -> ('m & 'n) & 'n -> 'm & 'o -> 'f & 'h -> ('o & 'p) & 'p -> 'o) -> ('a & 'g & 'h & 'j & 'm & 'o) -> ('a | 'f | 'c)
//│ constrain calls  : 896
//│ annoying  calls  : 0
//│ subtyping calls  : 12920
:ResetFuel
// ==========================================================================================







