:NoRecursiveTypes
:GeneralizeCurriedFunctions
// :NoJS

// ============ Dummy classes to represent the types in the examples ============

class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'c, 'tail, 'head, 'd. (List['a] & 'c & 'tail) -> ((Cons['a | 'b] with {head: 'head | 'b, tail: 'tail}) | 'd))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ (List['a & 'b] & 'c & 'this) -> 'b
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ (List['a] & 'b & 'this) -> (List['a] | 'c)
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def print_bool: bool -> unit
def print_bool b = log b
//│ print_bool: bool -> unit
//│           = <missing implementation>
//│ ('a & 'b) -> (unit | 'c)
//│   <:  print_bool:
//│ bool -> unit
//│           = [Function: print_bool]

def print_int: int -> unit
def print_int i = log i
//│ print_int: int -> unit
//│          = <missing implementation>
//│ ('a & 'b) -> (unit | 'c)
//│   <:  print_int:
//│ int -> unit
//│          = [Function: print_int]

def print_string: string -> unit
def print_string s = log s
//│ print_string: string -> unit
//│             = <missing implementation>
//│ ('a & 'b) -> (unit | 'c)
//│   <:  print_string:
//│ string -> unit
//│             = [Function: print_string]



// (* A quick demo of MLF *)

// (* In the following, "untype expr" means that the expression expr should not be typable. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
def delta = fun (x: Sid) -> x x
def delta_ = fun x -> x x
//│ delta: Sid -> (Sid | 'a)
//│      = [Function: delta]
//│ delta_: ('a -> 'b & 'a) -> 'b
//│       = [Function: delta_]

// let choose x y = if true then x else y
def choose x y = if true then x else y
//│ choose: 'a -> (forall 'b, 'c, 'd. ('b & 'c & 'd) -> ('a | 'd))
//│       = [Function: choose]

// let succ n = n + 1
// ;;
def succ n = n + 1
//│ succ: (int & 'a) -> (int | 'b)
//│     = [Function: succ]

// let test1 = delta id
test1 = delta id
//│ test1: Sid | 'a
//│      = [Function: id]

// untype delta succ
:e
delta succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.139: 	delta succ
//│ ║         	^^^^^^^^^^
//│ ╟── type `‘a_336` is not an instance of type `int`
//│ ║  l.105: 	type Sid = forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.128: 	def succ n = n + 1
//│ ╙──       	             ^
//│ res: error
//│    = 'function succ(n) {  return n + 1;}1'

// :e // FIXME? failed with genLamBodies but works with quantif extrus
// let test2 = delta (choose id id)
test2 = delta (choose id id)
//│ test2: Sid | 'a
//│      = [Function: id]

test2 = delta_ (choose id id)
//│ test2: 'a -> 'a
//│      = [Function: id]

// untype delta (choose id succ)
:e
delta (choose id succ)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.164: 	delta (choose id succ)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a_388` is not an instance of type `int`
//│ ║  l.105: 	type Sid = forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.128: 	def succ n = n + 1
//│ ╙──       	             ^
//│ res: error
//│    = [Function: id]

// let test3 = choose id succ
test3 = choose id succ
//│ test3: (int & 'a & 'b) -> (int | 'a | 'c)
//│      = [Function: id]

// let test4 = choose succ id
// ;;
test4 = choose succ id
//│ test4: (int & 'a & 'b) -> (int | 'b | 'c)
//│      = [Function: succ]


// let eqstring s1 s2 = (s1^"A" = s2^"A")
def eqstring s1 s2 = eq (concat s1 "A") (concat s2 "A")
//│ eqstring: (string & 'a & 'b) -> (forall 'b, 'c. (string & 'b) -> (bool | 'c))
//│         = [Function: eqstring]

// let eqint i1 i2 = (i1 - i2) = 0
def eqint i1 i2 = (i1 - i2) == 0
//│ eqint: (int & 'a & 'b) -> (forall 'b, 'c. (int & 'b) -> (bool | 'c))
//│      = [Function: eqint]

// let eqbool b1 b2 = if b1 then b2 else (not b2)
def eqbool b1 b2 = if b1 then b2 else (not b2)
//│ eqbool: (bool & 'a) -> (forall 'b, 'c, 'd. (bool & 'a & 'b & 'c & 'd) -> (bool | 'd))
//│       = [Function: eqbool]

// let ignore x = ()
def ignore x = null
//│ ignore: 'a -> null
//│       = [Function: ignore]


def listiterA: ('a -> unit) -> List['a] -> unit
//│ listiterA: ('a -> unit) -> List['a] -> unit
//│          = <missing implementation>

// let rec listiter f ll =
//   if ll = [] then ()
//   else begin ignore (f (car ll)) ; listiter f (cdr ll) end
// ;;

:RecursiveTypes // needed for this recursive def
rec def listiter f ll =
  if eq ll nil then unit
  else
    let _ = ignore (f (head ll)) in 
    listiter f (tail ll)
//│ listiter: ('a -> anything) -> List['a] -> unit
//│         = [Function: listiter]
:NoRecursiveTypes

listiterA = listiter
//│ ('a -> anything) -> List['a] -> unit
//│   <:  listiterA:
//│ ('a -> unit) -> List['a] -> unit
//│          = [Function: listiter]



// (* Polymorphic recursion. *)
// untype let rec id x = if true then x else id id x in id

// * This does not actually seem to require general polymorphic recursion,
// *  but it does need recursive types:
:RecursiveTypes
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b
//│    = [Function: id1]
id1 id
//│ res: ('a & 'b) -> ('a | 'c) | 'd
//│   where
//│     'b :> forall 'a. ('a & 'b) -> ('a | 'c)
//│        <: 'c
//│     'c :> forall 'a. ('a & 'b) -> ('a | 'c)
//│        <: 'b -> 'c & 'd
//│    = [Function: id]
:NoRecursiveTypes

// ^ FIXME type pp – id1 is not shown to have an upper bound!
:ns
id1
//│ res: forall 'id1, 'a, 'b, 'c, 'd, 'e. 'id1
//│   where
//│     'id1 := 'a -> 'e
//│     'a :> 'a -> 'e
//│        <: 'b
//│     'e :> 'a -> 'e
//│        <: 'd & 'c
//│     'c :> 'a -> 'e
//│        <: 'a -> 'd
//│     'd :> 'a -> 'e
//│        <: 'b
//│     'b :> 'a -> 'e
//│        <: 'e
//│    = [Function: id1]

:e
id1: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.281: 	id1: nothing
//│ ║         	^^^
//│ ╟── function of type `?a -> ?b` does not match type `nothing`
//│ ║  l.243: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.281: 	id1: nothing
//│ ║         	^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.281: 	id1: nothing
//│ ╙──       	     ^^^^^^^
//│ res: nothing
//│    = [Function: id1]

:e // * Works with `:RecursiveTypes`
id1 id
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.298: 	id1 id
//│ ║         	^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  (α570_628 -> α576_629)  <:  α575_630    FunctionType  TypeVariable
//│ ╙──  ... looks like:  (α570' -> α576')  <:  α575'
//│ res: error
//│    = [Function: id]

res id
//│ res: error
//│    = [Function: id]

res id
//│ res: error
//│    = [Function: id]

:e // FIXME?
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.317: 	id1 id1
//│ ║         	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id1569'#›  <:  α570_647    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id1569'#›  <:  α570'
//│ res: error
//│    = [Function: id1]

rec def id1_ x = id1_ id1_ x
//│ id1_: anything -> nothing
//│     = [Function: id1_]


// let rec (id:sid) x = if true then x else id id x

def id2: Sid
//│ id2: Sid
//│    = <missing implementation>

// * (Note: absence of `rec` emulates annotated rec def.)
def id2 x = if true then x else id2 id2 x
//│ ('b & 'a & 'c & 'd & 'e) -> 'e
//│   <:  id2:
//│ Sid
//│    = <no result>
//│      id2 is not implemented




// (* Existential types. *)
// (* Creating an encapsulation is explicit (unavoidable). *)
// (* Here, we build (Exist 'a . 'a * ('a -> unit))              *)
// (*        then    (Exist 'a . 'a * 'a * ('a -> 'a -> bool))   *)


// let make_ex1 x (f:['a] ('a * ('a -> 'c)) -> 'b) = f x
def make_ex1 x (f: forall 'a. (('a, 'a -> 'c),) -> 'b) = f x
//│ make_ex1: 'd -> (forall 'd, 'a, 'c, 'b, 'e. ((forall 'a0. ('a0, 'a0 -> 'c,) -> ('b & 'e)) -> 'e
//│   where
//│     'd <: ('a, 'a -> 'c,)))
//│         = [Function: make_ex1]

ex1_1 = make_ex1 (("A String", print_string))
//│ ex1_1: (forall 'a. ('a, 'a -> 'c,) -> ('b & 'd)) -> 'd
//│   where
//│     ("A String", string -> unit,) <: ('a0, 'a0 -> 'c,)
//│      = [Function (anonymous)]

ex1_1 (fun ((x, f)) -> f x)
//│ = undefined
//│ // Output
//│ A String

ex1_2 = if true then make_ex1 ((42, print_int)) else ex1_1
//│ ex1_2: (forall 'a, 'a0. ('a, 'a -> 'c,) -> ('b & 'd) & ('a0, 'a0 -> 'c0,) -> ('b0 & 'e)) -> ('d | 'e)
//│   where
//│     ("A String", string -> unit,) <: ('a1, 'a1 -> 'c0,)
//│     (42, int -> unit,) <: ('a2, 'a2 -> 'c,)
//│      = [Function (anonymous)]

ex1_2 (fun ((x, f)) -> f x)
//│ = undefined
//│ // Output
//│ 42


// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2 x (f: forall 'a. (('a, 'a, 'a -> 'a -> 'c),) -> 'b) = f x
//│ make_ex2: 'd -> (forall 'd, 'a, 'c, 'b, 'e. ((forall 'a0. ('a0, 'a0, 'a0 -> 'a0 -> 'c,) -> ('b & 'e)) -> 'e
//│   where
//│     'd <: ('a, 'a, 'a -> 'a -> 'c,)))
//│         = [Function: make_ex2]

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
ex_list1 = cons (make_ex1 (("A String", print_string)))
  (cons (make_ex1 ((8250, print_int)))
  (cons (make_ex1 ((true, print_bool))) nil))
//│ ex_list1: List[forall 'a, 'c, 'a0, 'c0, 'a1, 'c1, 'b, 'd, 'b0, 'e, 'b1, 'f. ((forall 'a2, 'a3, 'a4. ('a2, 'a2 -> 'c1,) -> ('b & 'd) & ('a3, 'a3 -> 'c,) -> ('b0 & 'e) & ('a4, 'a4 -> 'c0,) -> ('b1 & 'f)) -> ('e | 'f | 'd)
//│   where
//│     ("A String", string -> unit,) <: ('a1, 'a1 -> 'c1,)
//│     (true, bool -> unit,) <: ('a0, 'a0 -> 'c0,)
//│     (8250, int -> unit,) <: ('a, 'a -> 'c,))]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 (("String", "String", eqstring)))
  (cons (make_ex2 ((1250, 4890, eqint)))
  (cons (make_ex2 ((true, false, eqbool))) nil))
//│ ex_list2: List[forall 'b, 'd, 'b0, 'e, 'b1, 'f. ((forall 'a, 'a0, 'a1. ('a, 'a, 'a -> 'a -> 'c,) -> ('b & 'd) & ('a0, 'a0, 'a0 -> 'a0 -> 'c0,) -> ('b0 & 'e) & ('a1, 'a1, 'a1 -> 'a1 -> 'c1,) -> ('b1 & 'f)) -> ('e | 'f | 'd)
//│   where
//│     ("String", "String", forall 'g, 'h. (string & 'g & 'h) -> (forall 'i, 'h. (string & 'h) -> (bool | 'i)),) <: ('a2, 'a2, 'a2 -> 'a2 -> 'c,)
//│     (1250, 4890, forall 'j, 'k. (int & 'j & 'k) -> (forall 'k, 'i, 'l. (int & 'k) -> (bool | 'i | 'l)),) <: ('a3, 'a3, 'a3 -> 'a3 -> 'c0,)
//│     (true, false, forall 'm. (bool & 'm) -> (forall 'i, 'n, 'o, 'p. (bool & 'm & 'n & 'o & 'p) -> (bool | 'i | 'p)),) <: ('a4, 'a4, 'a4 -> 'a4 -> 'c1,))]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }


h = head ex_list1
//│ h: (forall 'a, 'a0, 'a1. ('a, 'a -> 'c,) -> ('b & 'd) & ('a0, 'a0 -> 'c0,) -> ('b0 & 'e) & ('a1, 'a1 -> 'c1,) -> ('b1 & 'f)) -> ('e | 'f | 'd)
//│   where
//│     (true, bool -> unit,) <: ('a2, 'a2 -> 'c1,)
//│     (8250, int -> unit,) <: ('a3, 'a3 -> 'c0,)
//│     ("A String", string -> unit,) <: ('a4, 'a4 -> 'c,)
//│  = [Function (anonymous)]

h (fun ((x, f)) -> f x)
//│ = undefined
//│ // Output
//│ A String

// * _n accessors not yet implemented in JS backend:
// test1 = listiterA (fun ex -> ex (fun p -> p._2 p._1)) ex_list1

// :e // FIXME? fails with genLamBodies // fixed with skolem-LHS-extrusion
test1 = listiterA (fun ex -> ex (fun ((p1, p2)) -> p2 p1)) ex_list1
//│ test1: unit
//│      = [Function: unit]
//│ // Output
//│ A String
//│ 8250
//│ true

// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;
test1 = listiter (fun ex -> ex (fun ((p1, p2)) -> p2 p1)) ex_list1
//│ test1: unit
//│      = [Function: unit]
//│ // Output
//│ A String
//│ 8250
//│ true

test1_ = listiter (fun ex -> ex (fun ((p1, p2)) -> p2 p1))
//│ test1_: List[(forall 'a, 'b, 'c. ('a, 'a -> 'b & 'c,) -> 'b) -> 'c] -> unit
//│       = [Function (anonymous)]

test1_ ex_list1
//│ = [Function: unit]
//│ // Output
//│ A String
//│ 8250
//│ true

process ex = ex (fun ((p1, p2)) -> p2 p1)
//│ process: ((forall 'a, 'b, 'c. ('a, 'a -> 'b & 'c,) -> 'b) -> 'd & 'e) -> 'd
//│        = [Function: process]

process h
//│ = undefined
//│ // Output
//│ A String

// * Also fails:
// listiter process ex_list1


// let test2 = listiter (fun ex -> ex (fun t -> 
//   let arg1 = fst t
//   and arg2 = fst (snd t)
//   and eqf  = snd (snd t) in
//   let areequal = eqf arg1 arg2
//   in print_bool areequal )) ex_list2
// ;;
// :e // FIXME? refreshing-extr
test2 = listiterA (fun ex -> ex (fun ((t1, t2, t3)) ->
  let arg1 = t1 in
  let arg2 = t2 in
  let eqf = t3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal )) ex_list2
//│ test2: unit
//│      = [Function: unit]
//│ // Output
//│ true
//│ false
//│ false

test2_ = listiter (fun ex -> ex (fun ((t1, t2, t3)) ->
  let arg1 = t1 in
  let arg2 = t2 in
  let eqf = t3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal ))
//│ test2_: List[(forall 'a, 'b, 'c, 'd, 'e, 'f. ('a, 'b, 'a -> ('b -> (bool & 'c) & 'd) & 'e,) -> (unit | 'f)) -> 'c] -> unit
//│       = [Function (anonymous)]

// * Also fails:
// test2_ ex_list2


// * ============ Annotated+untupled versions: ============

def make_ex1: ('x, 'x -> 'c) -> (forall 'b. (forall 'a. ('a, 'a -> 'c) -> 'b) -> 'b)
//│ make_ex1: ('x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a -> 'c,) -> 'b) -> 'b)
//│         = <missing implementation>

make_ex1 (x, f) k = k (x, f)
//│ ('a, 'b,) -> (forall 'c, 'd. (('a, 'b,) -> 'c & 'd) -> 'c)
//│   <:  make_ex1:
//│ ('x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a -> 'c,) -> 'b) -> 'b)
//│         = [Function: make_ex11]

ex1_1 = make_ex1 ("A String", print_string)
//│ ex1_1: (forall 'a. ('a, 'a -> unit,) -> 'b) -> 'b
//│      = [Function (anonymous)]

ex1_1 (fun (x, f) -> f x)
//│ = undefined
//│ // Output
//│ A String

ex1_2 = if true then make_ex1 (42, print_int) else ex1_1
//│ ex1_2: (forall 'a, 'a0. ('a, 'a -> unit,) -> 'b & ('a0, 'a0 -> unit,) -> 'b0) -> ('b | 'b0)
//│      = [Function (anonymous)]

ex1_2 (fun (x, f) -> f x)
//│ = undefined
//│ // Output
//│ 42


// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2: ('x, 'x, 'x -> 'c) -> (forall 'b. (forall 'a. ('a, 'a, 'a -> 'c) -> 'b) -> 'b)
//│ make_ex2: ('x, 'x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a, 'a -> 'c,) -> 'b) -> 'b)
//│         = <missing implementation>

make_ex2 (x, y, f) k = k (x, y, f)
//│ ('a, 'b, 'c,) -> (forall 'd, 'e. (('a, 'b, 'c,) -> 'd & 'e) -> 'd)
//│   <:  make_ex2:
//│ ('x, 'x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a, 'a -> 'c,) -> 'b) -> 'b)
//│         = [Function: make_ex21]

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
//
ex_list1 = cons (make_ex1 ("A String", print_string))
  (cons (make_ex1 (8250, print_int))
  (cons (make_ex1 (true, print_bool)) nil))
//│ ex_list1: List[forall 'b, 'b0, 'b1. (forall 'a, 'a0, 'a1. ('a, 'a -> unit,) -> 'b & ('a0, 'a0 -> unit,) -> 'b0 & ('a1, 'a1 -> unit,) -> 'b1) -> ('b0 | 'b1 | 'b)]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 ("String", "String", eqstring))
  (cons (make_ex2 (1250, 4890, eqint))
  (cons (make_ex2 (true, false, eqbool)) nil))
//│ ex_list2: List[forall 'b, 'b0, 'b1. (forall 'a. ('a, 'a, 'a -> (forall 'c, 'd. (string & 'c) -> (bool | 'd)),) -> 'b & ('a0, 'a0, 'a0 -> (forall 'd, 'e, 'f. (int & 'e) -> (bool | 'd | 'f)),) -> 'b0 & ('a1, 'a1, 'a1 -> (forall 'd, 'g, 'h, 'i. (bool & 'g & 'h & 'i) -> (bool | 'd | 'i)),) -> 'b1) -> ('b0 | 'b1 | 'b)]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }

// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;

// :e // FIXME? fails with genLamBodies // fixed with skolem-LHS-extrusion
test1 = listiterA (fun ex -> ex (fun (a, b) -> b a)) ex_list1
//│ test1: unit
//│      = [Function: unit]
//│ // Output
//│ A String
//│ 8250
//│ true

test1_ = listiterA (fun ex -> ex (fun (a, b) -> b a))
//│ test1_: List[(forall 'a, 'b, 'c. ('a, 'a -> 'b & 'c,) -> 'b) -> unit] -> unit
//│       = [Function (anonymous)]

test1_ ex_list1
//│ = [Function: unit]
//│ // Output
//│ A String
//│ 8250
//│ true





// (* Some examples for MLF inspired by standard encoding in System F. *)

// type Void   = ['x] 'x
// type Unit   = ['x] 'x -> 'x
// type Int    = ['x] ('x -> 'x) -> ('x -> 'x)
// type Bool   = ['x] (Unit -> 'x) -> (Unit -> 'x) -> 'x 
type Fvoid = forall 'a. 'a
type Funit = forall 'a. 'a -> 'a
type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ Defined type alias Fvoid
//│ Defined type alias Funit
//│ Defined type alias Fint
//│ Defined type alias Fbool

// type Sum    = ['x] (Int -> 'x) -> (Int -> 'x) -> 'x
// type Pair   = ['x] (Int -> Int -> 'x) -> 'x
// type Triple = ['x] (Int -> Int -> Int -> 'x) -> 'x
type Sum    = forall 'a. (Fint -> 'a) -> (Fint -> 'a) -> 'a
type Pair   = forall 'a. (Fint -> Fint -> 'a) -> 'a
type Triple = forall 'a. (Fint -> Fint -> Fint -> 'a) -> 'a
//│ Defined type alias Sum
//│ Defined type alias Pair
//│ Defined type alias Triple

// (* Unit *)
// let c_unit = fun x -> x
def c_unit = fun x -> x
//│ c_unit: 'a -> 'a
//│       = [Function: c_unit]


// (* BOOLEANS, IFS, AND, OR, NOT. *)
// let c_true  = fun a b -> a c_unit
def c_true = fun a -> fun b -> a c_unit
//│ c_true: 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> 'd) -> 'c))
//│       = [Function: c_true]

// let c_false = fun a b -> b c_unit
def c_false = fun a -> fun b -> b c_unit
//│ c_false: 'a -> ((forall 'b. 'b -> 'b) -> 'c & 'd) -> 'c
//│        = [Function: c_false]

// let c_if (cond:Bool) c_then c_else = cond c_then c_else 
def c_if (cond: Fbool) c_then c_else = cond c_then c_else
def c_if_ cond c_then c_else = cond c_then c_else
//│ c_if: Fbool -> (forall 'b. 'b -> (forall 'b, 'a, 'c, 'd. ((Funit -> ('a & 'c) & 'd) -> 'c
//│   where
//│     'b <: Funit -> ('a & 'c) & 'd)))
//│     = [Function: c_if]
//│ c_if_: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'd
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e))))
//│      = [Function: c_if_]

// let c_and (a:Bool) (b:Bool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and (a: Fbool) (b: Fbool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and_ a b = c_if a (fun z -> b) (fun z -> c_false)
//│ c_and: Fbool -> Fbool -> (forall 'a. 'a -> ((forall 'b. 'b -> 'b) -> 'c & 'd) -> 'c | Fbool | 'e)
//│      = [Function: c_and]
//│ c_and_: (Fbool & 'b) -> (forall 'c, 'a, 'd, 'e. ('c & 'a & 'd & 'e) -> (forall 'f. 'f -> ((forall 'g. 'g -> 'g) -> 'h & 'i) -> 'h | 'e))
//│       = [Function: c_and_]

// let c_or  (a:Bool) (b:Bool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or (a: Fbool) (b: Fbool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or_ a b = c_if a (fun z -> c_true) (fun z -> b)
//│ c_or: Fbool -> Fbool -> (forall 'a. 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> 'd) -> 'c)) | Fbool | 'e)
//│     = [Function: c_or]
//│ c_or_: (Fbool & 'b) -> (forall 'c, 'a, 'd, 'e. ('c & 'a & 'd & 'e) -> (forall 'f. 'f -> (forall 'f. ('g -> 'h
//│   where
//│     'f <: (forall 'i. 'i -> 'i) -> 'h)) | 'e))
//│      = [Function: c_or_]

// let c_not (a:Bool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not (a: Fbool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not_ a = c_if a (fun z -> c_false) (fun z -> c_true)
//│ c_not: Fbool -> (forall 'a, 'b. ('a & 'b) -> (forall 'b. (((forall 'c. 'c -> 'c) -> 'd & 'e & 'f) -> ('g | 'd)
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'g)) | 'h)
//│      = [Function: c_not]
//│ c_not_: (Fbool & 'a) -> (forall 'b, 'c. ('b & 'c) -> (forall 'c. (((forall 'd. 'd -> 'd) -> 'e & 'f & 'g) -> ('h | 'e)
//│   where
//│     'c <: (forall 'd. 'd -> 'd) -> 'h)) | 'i)
//│       = [Function: c_not_]

// let c_or = (c_or : Bool -> Bool -> Bool)

// :e // FIXME? failed with genLamBodies but works with quantif extrus
def c_or2 = c_or : Fbool -> Fbool -> Fbool
//│ c_or2: Fbool -> Fbool -> Fbool
//│      = [Function: c_or2]

// :e // FIXME? failed with genLamBodies but works with quantif extrus
def c_or2_ = c_or_ : Fbool -> Fbool -> Fbool
//│ c_or2_: Fbool -> Fbool -> Fbool
//│       = [Function: c_or2_]


// (* CONSTRUCTORS FOR PAIRS ET TRIPLES. *)
// let c_pair x y   = fun f -> f x y
def c_pair x y = fun f -> f x y
//│ c_pair: 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('a -> ('b -> 'c & 'd) & 'e) -> 'c))
//│       = [Function: c_pair]

// let c_trip x y z = fun f -> f x y z
def c_trip x y z = fun f -> f x y z
//│ c_trip: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd, 'e, 'f, 'g. ('a -> ('b -> ('c -> 'd & 'e) & 'f) & 'g) -> 'd)))
//│       = [Function: c_trip]


// (* PROJECTIONS FOR PRODUCTS. *)
// let c_1_2 (p:Pair) = p (fun x y -> x) 
def c_1_2 (p: Pair) = p (fun x -> fun y -> x)
def c_1_2_ p = p (fun x -> fun y -> x)
//│ c_1_2: Pair -> (Fint | 'a)
//│      = [Function: c_1_2]
//│ c_1_2_: ((forall 'a. 'a -> (forall 'b. 'b -> 'a)) -> 'c & 'd) -> 'c
//│       = [Function: c_1_2_]

// let c_2_2 (p:Pair) = p (fun x y -> y) 
def c_2_2 (p: Pair) = p (fun x -> fun y -> y)
def c_2_2_ p = p (fun x -> fun y -> y)
//│ c_2_2: Pair -> (Fint | 'a)
//│      = [Function: c_2_2]
//│ c_2_2_: ((forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> 'c & 'd) -> 'c
//│       = [Function: c_2_2_]

// let c_1_3 (t:Triple) = t (fun x y z -> x)
def c_1_3 (t: Triple) = t (fun x -> fun y -> fun z -> x)
def c_1_3_ t = t (fun x -> fun y -> fun z -> x)
//│ c_1_3: Triple -> (Fint | 'a)
//│      = [Function: c_1_3]
//│ c_1_3_: ((forall 'a. 'a -> (forall 'b. 'b -> (forall 'c. 'c -> 'a))) -> 'd & 'e) -> 'd
//│       = [Function: c_1_3_]

// let c_2_3 (t:Triple) = t (fun x y z -> y) 
def c_2_3 (t: Triple) = t (fun x -> fun y -> fun z -> y)
def c_2_3_ t = t (fun x -> fun y -> fun z -> y)
//│ c_2_3: Triple -> (Fint | 'a)
//│      = [Function: c_2_3]
//│ c_2_3_: ((forall 'a. 'a -> (forall 'b. 'b -> (forall 'c. 'c -> 'b))) -> 'd & 'e) -> 'd
//│       = [Function: c_2_3_]

// let c_3_3 (t:Triple) = t (fun x y z -> z) 
def c_3_3 (t: Triple) = t (fun x -> fun y -> fun z -> z)
def c_3_3_ t = t (fun x -> fun y -> fun z -> z)
//│ c_3_3: Triple -> (Fint | 'a)
//│      = [Function: c_3_3]
//│ c_3_3_: ((forall 'a. 'a -> (forall 'b. 'b -> (forall 'c. 'c -> 'c))) -> 'd & 'e) -> 'd
//│       = [Function: c_3_3_]


// (* CONSTRUCTOR FOR A BINARY SUM. *)
// let c_sumg = fun x fg fd -> fg x
def c_sumg = fun x -> fun fg -> fun fd -> fg x
//│ c_sumg: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'b <: 'a -> 'c)))
//│       = [Function: c_sumg]

// let c_sumd = fun x fg fd -> fd x
def c_sumd = fun x -> fun fg -> fun fd -> fd x
//│ c_sumd: 'a -> (forall 'b. 'b -> (forall 'c, 'd. ('a -> 'c & 'd) -> 'c))
//│       = [Function: c_sumd]


// (* CASE FOR A SUM. *)
// let c_case (s:Sum) g d = s g d
def c_case (s: Sum) g d = s g d
def c_case_ s g d = s g d
//│ c_case: Sum -> (forall 'b. 'b -> (forall 'b, 'a, 'c, 'd. ((Fint -> ('a & 'c) & 'd) -> 'c
//│   where
//│     'b <: Fint -> ('a & 'c) & 'd)))
//│       = [Function: c_case]
//│ c_case_: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'd
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e))))
//│        = [Function: c_case_]


// (* Integers. *)
// let c_i0 = fun f x ->   x
def c_i0 = fun f -> fun x -> x
//│ c_i0: 'a -> (forall 'b. 'b -> 'b)
//│     = [Function: c_i0]

// let c_i1 = fun f x -> f x
def c_i1 = fun f -> fun x -> f x
//│ c_i1: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│     = [Function: c_i1]

// let c_i2 = fun f x -> f (f x)
def c_i2 = fun f -> fun x -> f (f x)
//│ c_i2: 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│     = [Function: c_i2]

// let c_succ (n:Int) = fun f x -> n f (f x)
def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
def c_succ_ n = fun f -> fun x -> n f (f x)
//│ c_succ: Fint -> (forall 'b. 'b -> (forall 'b, 'a, 'c, 'd, 'e. ('d -> 'c
//│   where
//│     'b <: 'a -> ('a & 'c) & 'd -> ('a & 'c & 'e))))
//│       = [Function: c_succ]
//│ c_succ_: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('f -> 'd
//│   where
//│     'b <: 'f -> 'c
//│     'a <: 'b -> ('c -> 'd & 'e))))
//│        = [Function: c_succ_]

// let c_iszero (n:Int) = n (fun x -> c_false) c_true
def c_iszero (n: Fint) = n (fun x -> c_false) c_true
def c_iszero_ n = n (fun x -> c_false) c_true
//│ c_iszero: Fint -> (forall 'a, 'b. ('a & 'b) -> (forall 'b. (((forall 'c. 'c -> 'c) -> 'd & 'e & 'f) -> ('g | 'd)
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'g)) | 'h)
//│         = [Function: c_iszero]
//│ c_iszero_: ((forall 'a. 'a -> (forall 'b. 'b -> ((forall 'c. 'c -> 'c) -> 'd & 'e) -> 'd)) -> ((forall 'f. 'f -> (forall 'f. ('g -> 'h
//│   where
//│     'f <: (forall 'c. 'c -> 'c) -> 'h))) -> 'i & 'j) & 'k) -> 'i
//│          = [Function: c_iszero_]

// let c_add n (m:Int) = m c_succ n

//:e // due to tapping
def c_add n (m: Fint) = m c_succ n
//│ c_add: (Fint & 'b) -> Fint -> (forall 'c. 'c -> (forall 'c, 'a, 'd, 'e, 'f. ('e -> 'd
//│   where
//│     'c <: 'a -> ('a & 'd) & 'e -> ('a & 'd & 'f))) | 'b | 'g)
//│      = [Function: c_add]

def c_add_ n m = m c_succ_ n
//│ c_add_: 'a -> ((forall 'b. 'b -> (forall 'c. 'c -> (forall 'b, 'c, 'd, 'e, 'f, 'g. ('g -> 'e
//│   where
//│     'c <: 'g -> 'd
//│     'b <: 'c -> ('d -> 'e & 'f))))) -> ('a -> 'h & 'i) & 'j) -> 'h
//│       = [Function: c_add_]

// let c_mul n (m:Int) = m (c_add n) c_i0

//:e // due to tapping
def c_mul m (n: Fint) = m (c_add n) c_i0
//│ c_mul: 'b -> (forall 'b. (Fint -> 'c
//│   where
//│     'b <: (Fint -> (forall 'd. 'd -> (forall 'd, 'a, 'e, 'f, 'g. ('f -> 'e
//│   where
//│     'd <: 'a -> ('a & 'e) & 'f -> ('a & 'e & 'g))) | Fint | 'h | 'i) | 'j) -> ((forall 'k. 'k -> (forall 'l. 'l -> 'l)) -> 'c & 'm)))
//│      = [Function: c_mul]

def c_mul_ m n = m (c_add_ n) c_i0
//│ c_mul_: 'a -> (forall 'a. (('b & 'c) -> 'd
//│   where
//│     'a <: (((forall 'e. 'e -> (forall 'f. 'f -> (forall 'e, 'f, 'g, 'h, 'i, 'j. ('j -> 'h
//│   where
//│     'e <: 'f -> ('g -> 'h & 'i)
//│     'f <: 'j -> 'g)))) -> ('b -> 'k & 'l) & 'm) -> 'k | 'n) -> ((forall 'o. 'o -> (forall 'p. 'p -> 'p)) -> 'd & 'q)))
//│       = [Function: c_mul_]

// let c_pow n (m:Int) = m (c_mul n) c_i1

// :e // due to tapping
def c_pow m (n: Fint) = m (c_mul n) c_i1
//│ c_pow: 'b -> (forall 'b. (Fint -> 'c
//│   where
//│     'b <: (forall 'd, 'e. (Fint -> 'f | 'g
//│   where
//│     Fint | 'd | 'e <: (Fint -> (forall 'h. 'h -> (forall 'h, 'a, 'i, 'j, 'k. ('j -> 'i
//│   where
//│     'h <: 'a -> ('a & 'i) & 'j -> ('a & 'i & 'k))) | Fint | 'd | 'l) | 'm) -> ((forall 'n. 'n -> (forall 'o. 'o -> 'o)) -> 'f & 'p))) -> ((forall 'q. 'q -> (forall 'q, 'r, 's. ('r -> 's
//│   where
//│     'q <: 'r -> 's))) -> 'c & 't)))
//│      = [Function: c_pow]

def c_pow_ m n = m (c_mul_ n) c_i1
//│ c_pow_: 'a -> (forall 'a. (('b & 'c) -> 'd
//│   where
//│     'a <: (forall 'b. (('e & 'f) -> 'g | 'h
//│   where
//│     'b <: (((forall 'i. 'i -> (forall 'j. 'j -> (forall 'i, 'j, 'k, 'l, 'm, 'n. ('n -> 'l
//│   where
//│     'i <: 'j -> ('k -> 'l & 'm)
//│     'j <: 'n -> 'k)))) -> ('e -> 'o & 'p) & 'q) -> 'o | 'r) -> ((forall 's. 's -> (forall 't. 't -> 't)) -> 'g & 'u))) -> ((forall 'v. 'v -> (forall 'v, 'w, 'x. ('w -> 'x
//│   where
//│     'v <: 'w -> 'x))) -> 'd & 'y)))
//│       = [Function: c_pow_]


// let c_pred (n:Int) =
//    let s p = c_pair (c_2_2 p) (c_succ (c_2_2 p))
//   and z = c_pair c_i0 c_i0 in
//   c_1_2 (n s z)

def c_pred (n: Fint) =
  let s = fun p -> c_pair (c_2_2 p) (c_succ (c_2_2 p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2 (n s z)
//│ c_pred: Fint -> (forall 'a, 'b. Fint | 'a | 'b)
//│       = [Function: c_pred]

def c_pred_ n =
  let s = fun p -> c_pair (c_2_2_ p) (c_succ_ (c_2_2_ p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2_ (n s z)
//│ c_pred_: ((((forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> ('c & 'd & 'e) & (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> ('f & 'g & 'h) & 'i & 'j & 'k) -> (('h -> ((forall 'l. 'l -> (forall 'e, 'l, 'm, 'n, 'o, 'p. ('p -> 'n
//│   where
//│     'l <: 'p -> 'm
//│     'e <: 'l -> ('m -> 'n & 'o))) | 'q) -> 'r & 's) & 't) -> 'r | 'u)) -> ((((forall 'v. 'v -> (forall 'w. 'w -> 'w) | 'x | 'y) -> ((forall 'v. 'v -> (forall 'w. 'w -> 'w) | 'y) -> 'z & 'a1) & 'b1) -> 'z | 'c1) -> ((forall 'd1. 'd1 -> (forall 'e1. 'e1 -> 'd1)) -> ('f1 & 'g1) & 'h1 & 'i1) & 'j1) & 'k1) -> 'g1
//│        = [Function: c_pred_]


// let c_printint (n:Int) = print_int (n (fun x -> x+1) 0); print " "
def c_printint (n: Fint) =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
def c_printint_ n =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
//│ c_printint: Fint -> (unit | 'a)
//│           = [Function: c_printint]
//│ c_printint_: ((forall 'a, 'b. (int & 'a) -> (int | 'b)) -> (0 -> (int & 'c) & 'd) & 'e) -> (unit | 'f)
//│            = [Function: c_printint_]

def c_printint2 (n: Fint) = toString (n (fun x -> x + 1) 0)
def c_printint2_ n = toString (n (fun x -> x + 1) 0)
//│ c_printint2: Fint -> (string | 'a)
//│            = [Function: c_printint2]
//│ c_printint2_: ((forall 'a, 'b. (int & 'a) -> (int | 'b)) -> (0 -> 'c & 'd) & 'e) -> (string | 'f)
//│             = [Function: c_printint2_]

// let c_i2 = c_succ c_i1
def c_i2 = c_succ c_i1
def c_i2_ = c_succ_ c_i1
//│ c_i2: 'b -> (forall 'b, 'a, 'c, 'd, 'e. ('d -> 'c
//│   where
//│     'b <: 'a -> ('a & 'c) & 'd -> ('a & 'c & 'e)))
//│     = [Function: c_i21]
//│ c_i2_: 'a -> ('b -> 'c
//│   where
//│     forall 'd. 'd -> (forall 'd, 'e, 'f. ('e -> 'f
//│   where
//│     'd <: 'e -> 'f)) <: 'a -> ('g -> 'c & 'h)
//│     'a <: 'b -> 'g)
//│      = [Function: c_i2_]

// let c_i3 = c_succ c_i2
def c_i3 = c_succ c_i2
def c_i3_ = c_succ_ c_i2
//│ c_i3: 'b -> (forall 'b, 'a, 'c, 'd, 'e. ('d -> 'c
//│   where
//│     'b <: 'a -> ('a & 'c) & 'd -> ('a & 'c & 'e)))
//│     = [Function: c_i3]
//│ c_i3_: 'b -> ('c -> 'd
//│   where
//│     'b <: 'c -> 'e
//│     forall 'f. 'f -> (forall 'f, 'a, 'g, 'h, 'i. ('h -> 'g
//│   where
//│     'f <: 'a -> ('a & 'g) & 'h -> ('a & 'g & 'i))) <: 'b -> ('e -> 'd & 'j))
//│      = [Function: c_i3_]

// let c_i4 = c_succ c_i3
def c_i4 = c_succ c_i3
def c_i4_ = c_succ_ c_i3
//│ c_i4: 'b -> (forall 'b, 'a, 'c, 'd, 'e. ('d -> 'c
//│   where
//│     'b <: 'a -> ('a & 'c) & 'd -> ('a & 'c & 'e)))
//│     = [Function: c_i4]
//│ c_i4_: 'b -> ('c -> 'd
//│   where
//│     'b <: 'c -> 'e
//│     forall 'f. 'f -> (forall 'f, 'a, 'g, 'h, 'i. ('h -> 'g
//│   where
//│     'f <: 'a -> ('a & 'g) & 'h -> ('a & 'g & 'i))) <: 'b -> ('e -> 'd & 'j))
//│      = [Function: c_i4_]


// (* Fails with value restriction. *)
// (* Passes with relaxed value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
def to_church: int -> Fint
//│ to_church: int -> Fint
//│          = <missing implementation>



// * The following tests don't benefit from `:RecursiveTypes`
// *  (except `print_fact_` and `print_fact2_`),
// *  but they produce LOTS of spammy error messages unless we enable it:
:RecursiveTypes


// * See to_church_3 in `ex_casparticuliers.mls`
:e
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1032: 	rec def to_church n =
//│ ║          	                  ^^^
//│ ║  l.1033: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1034: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a_4515_4517` is not an instance of type `'a_4515_4516`
//│ ║  l.639: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.639: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from reference:
//│ ║  l.1034: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╙──        	                                                         ^
//│ int -> (forall 'b. ((‘a_4515_4516 | 'a) -> 'c & ('a | ‘a_4515_4516 | ‘a_4515_4517) -> (‘a_4515_4516 & 'a) & 'b) -> (forall 'd. (‘a_4515_4516 & 'd & 'a) -> (‘a_4515_4516 | 'd | 'c)))
//│   <:  to_church:
//│ int -> Fint
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1032: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1033: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1034: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a_4515_4516` is not an instance of type `'a_4537`
//│ ║  l.639: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── but it flows into application with expected type `‘a_4537`
//│ ║  l.1034: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.639: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│          = [Function: to_church]


// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)

// * Makes the test take several seconds:
// rec def to_church_ n =
//   if n == 0 then fun f -> fun x -> x
//   else fun f -> fun x -> f ((to_church_ (n - 1)) f x)
def to_church_ = to_church
//│ to_church_: int -> Fint
//│           = [Function: to_church_]


// let rec c_fact (n:Int) =
//   c_if (c_iszero n) (fun (u:Unit) -> c_i1)
//     (fun (u:Unit) -> c_mul n (c_fact (c_pred n)))

rec def c_fact (n: Fint) =
  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ c_fact: Fint -> (forall 'b, 'c, 'd, 'e, 'a, 'a0, 'f, 'a1, 'g, 'h, 'i, 'j. ('b -> 'c & 'd -> ('e & 'a & 'a0 & 'f) & 'a0 -> ('a0 & 'a1 & 'g) & 'h & 'i & 'j) -> (forall 'd, 'f, 'g, 'k, 'l, 'm, 'n, 'o. ('b & 'k & 'l & 'd & 'm) -> ('l | 'n | 'o | 'c | 'g | 'f)) | Fint | 'p)
//│       = [Function: c_fact]

// def c_fact: Fint -> (forall 'a 'b. ('a & 'b) -> (forall 'c 'd 'e 'f 'g 'h. (('c & 'h) -> ('d | 'g | 'c))))
def c_fact_A: Fint -> Fint
//│ c_fact_A: Fint -> Fint
//│         = <missing implementation>

// :e // FIXME? // works with quantif extrus
//:e // due to tapping
// :e // FIXME? refreshing-extr
// :e // FIXME?
// :e // fails after new-refreshing-extrusion
// :e // Works since inconsistent constrained types...
def c_fact_A n =
  c_if (c_iszero n) (fun u -> c_i1)
    (fun u -> c_mul n (c_fact_A (c_pred n)))
//│ (Fint & (Fint -> (forall 'b, 'c, 'a, 'a0, 'd, 'a1, 'e, 'f. ('b -> ('c & 'a & 'a0 & 'd) & 'a0 -> ('a0 & 'a1 & 'e) & 'f) -> (forall 'b, 'a, 'a0, 'd, 'a1, 'e, 'f, 'a2, 'g, 'h, 'i. (('b & 'h) -> ('g | 'e | 'd)
//│   where
//│     'f <: ('a2 | 'a1 | 'a) -> ('a0 & 'a2 & 'g) & 'h -> ('a0 & 'a2 & 'g & 'i))) | Fint | 'j | 'k) | 'l) -> ((forall 'm. 'm -> (forall 'n. 'n -> 'n)) -> ('o & 'p & 'a3 & 'q & 'r) & 's) & 't) -> (forall 'u, 'v, 'w. ('u -> 'v & 'w) -> (forall 'u, 'v, 'w, 'x, 'y. (('u & 'x) -> ('y | 'v)
//│   where
//│     'w <: 'x -> 'y)) | 'r)
//│   <:  c_fact_A:
//│ Fint -> Fint
//│         = <no result>
//│           c_fact_A is not implemented

// :e // FIXME? fails with genLamBodies
rec def c_fact_ n =
  c_if_ (c_iszero_ n) (fun _ -> c_i1)
    (fun _ -> c_mul_ n (c_fact_ (c_pred_ n)))
//│ c_fact_: 'a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> (forall 'd. 'd -> ((forall 'e. 'e -> 'e) -> 'f & 'g) -> 'f)) -> (((forall 'e. 'e -> 'e) -> 'h & 'i) -> (forall 'j, 'k. 'j -> ('k | 'h))) -> (forall 'l. 'l -> (forall 'm, 'n, 'o, 'p, 'q. ('m -> 'n & 'o -> 'p & 'q) -> (forall 'r, 's. ('m & 'o & 'r) -> ('s | 'p | 'n)))) -> ('r -> 't) -> 'b & (forall 'u, 'v. ((forall 'w. 'w -> (forall 'x. 'x -> 'x)) -> ('y -> ('z -> 'a1 & 'b1) & 'c1 & 'd1 & 'e1) & (forall 'w. 'w -> (forall 'x. 'x -> 'x)) -> ('f1 & 'g1 & 'h1) & 'i1 & 'j1 & 'k1) -> (('h1 -> ((forall 'l1, 'm1, 'n1. ('l1 -> ('z & 'm1) & 'y & 'n1) -> (forall 'o1, 'p1. ('l1 & 'o1) -> ('p1 | 'a1)) | 'u) -> 'q1 & 'r1) & 's1) -> 'q1 | 'v)) -> (((forall 't1. 't1 -> (forall 'u1. 'u1 -> 'u1) | 'v1 | 'w1) -> ((forall 't1. 't1 -> (forall 'u1. 'u1 -> 'u1) | 'w1) -> 'x1 & 'y1) & 'z1) -> 'x1 | 'a2) -> (forall 'b2. 'b2 -> (forall 'c2. 'c2 -> 'b2)) -> 'a & (((forall 'd2, 'e2, 'f2, 'g2, 'h2. ('d2 -> ('e2 -> 'f2 & 'g2) & 'h2) -> (forall 'i2, 'j2, 'k2. ('i2 -> ('e2 & 'j2) & 'd2 & 'k2) -> (forall 'l2, 'm2. ('i2 & 'l2) -> ('m2 | 'f2)))) -> ('b -> 'n2 & 'o2) & 'p2) -> 'n2) -> (forall 't1. 't1 -> (forall 'u1. 'u1 -> 'u1) | 'w1) -> 't
//│        = [Function: c_fact_]


// let print_fact n =
//   print_string "Factorial " ;
//   print_int n ;
//   print_string " = " ;
//   c_printint (c_fact (to_church n)) ;
//   print_string "\n" ;
//   ()
def print_fact n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint (c_fact (to_church n)) in
          print_string "\n"
//│ print_fact: (int & 'a) -> (unit | 'b)
//│           = [Function: print_fact]

:e // FIXME?
def print_fact_ n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint_ (c_fact_ (to_church_ n)) in
          print_string "\n"
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1151: 	  let _ = c_printint_ (c_fact_ (to_church_ n)) in
//│ ║          	                       ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. ‹∀ 3. (α4003_4044'''' -> α4039_4053'''')››  <:  α3271_5342'''    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 2. ‹∀ 3. (α4003_4044'''' -> α4039_4053'''')››  <:  α3271_5331'''''
//│ print_fact_: (int & 'a) -> (unit | 'b)
//│            = [Function: print_fact_]

def print_fact2 n =
  concat "Factorial " (
  concat (toString n) (
  concat " = "
         (c_printint2 (c_fact (to_church n))) ))
//│ print_fact2: (int & 'a) -> (string | 'b)
//│            = [Function: print_fact2]

:e // FIXME?
def print_fact2_ n =
  concat "Factorial_ " (
  concat (toString n) (
  concat " = "
         (c_printint2_ (c_fact_ (to_church_ n))) ))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1175: 	         (c_printint2_ (c_fact_ (to_church_ n))) ))
//│ ║          	                        ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. ‹∀ 3. (α4003_4044'''' -> α4039_4053'''')››  <:  α3271_5572''    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 2. ‹∀ 3. (α4003_4044'''' -> α4039_4053'''')››  <:  α3271_5561'''''
//│ print_fact2_: (int & 'a) -> (string | 'b)
//│             = [Function: print_fact2_]

// let essai =
//   print_string "Church integers :\n";
//   let c_i5 = c_add c_i3 c_i2 in
//   let c_i10 = c_mul c_i5 c_i2 in
//   let c_i9 = c_pred c_i10 in
//   let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//   let c_98 = c_pred c_99 in
//   print_string "This should be 98 : " ;
//   c_printint c_98;
//   print_string "\n\n" ;

this_should_be_98 =
  let c_i5 = c_add c_i3 c_i2 in
  let c_i10 = c_mul c_i5 c_i2 in
  let c_i9 = c_pred c_i10 in
  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
  let c_98 = c_pred c_99 in
  c_printint2 c_98
//│ this_should_be_98: string | 'a
//│                  = '98'

// * Note: we get a recursive depth excess when using `c_i2` instead of `c_i2` (see test case below)
// :e // FIXME? refreshing-extr
// :e // Works since inconsistent constrained types...
:e // FIXME?
this_should_be_98_ =
  let c_i5_ = c_add_ c_i3_ c_i2_ in
  let c_i10_ = c_mul_ c_i5_ c_i2_ in
  let c_i9_ = c_pred_ c_i10_ in
  let c_99_ = c_add_ (c_mul_ c_i9_ c_i10_) c_i9_ in
  let c_98_ = c_pred_ c_99_ in
  c_printint2_ c_98_
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1212: 	  let c_i10_ = c_mul_ c_i5_ c_i2_ in
//│ ║          	               ^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››  <:  α4987_6804''    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››  <:  α4987''
//│ this_should_be_98_: string
//│                   = '98'

// This annot-mixed expression causes a stack overflow when increasing the depth limit:
// :e // works with quantif extrus
//:e // due to tapping
:e // FIXME? refreshing-extr
c_i5_ = c_add_ c_i3_ c_i2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b. ?b) -> ?c` exceeded recursion depth limit (300)
//│ ║  l.1230: 	c_i5_ = c_add_ c_i3_ c_i2
//│ ║          	        ^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  {(α3272_7577' -> α3275_7576') where: α3270_7357' :> ((α3271_7567',) -> α3273_7574'), α3271_7567' :> ((α3272_7577',) -> α3274_7575')}  <!<  ((α3274_7564',) -> α3275_7565')
//│ ╟── while constraining:  ‹∀ 3. {(α3272_7573'''' -> α3275_7572'''') where: α3270_7357' :> ((α3271_7567',) -> α3273_7570''''), α3271_7567' :> ((α3272_7573'''',) -> α3274_7571'''')}›  <!<  ((α3274_7564',) -> α3275_7565')
//│ ╟── while constraining:  ‹∀ 3. {(α3272_7573'''' -> α3275_7572'''') where: α3270_7357' :> ((α3271_7567',) -> α3273_7570''''), α3271_7567' :> ((α3272_7573'''',) -> α3274_7571'''')}›  <!<  α3273_7563'
//│ ╟── while constraining:  (α3271_7567' -> ‹∀ 3. {(α3272_7573'''' -> α3275_7572'''') where: α3270_7357' :> ((α3271_7567',) -> α3273_7570''''), α3271_7567' :> ((α3272_7573'''',) -> α3274_7571'''')}›)  <!<  ((α3271_7556',) -> α3273_7563')
//│ ╟── while constraining:  ‹∀ 2. (α3271_7362''' -> ‹∀ 3. {(α3272_7368'''' -> α3275_7367'''') where: α3270_7357' :> ((α3271_7362''',) -> α3273_7365''''), α3271_7362''' :> ((α3272_7368'''',) -> α3274_7366'''')}›)›  <!<  ((α3271_7556',) -> α3273_7563')
//│ ╟── while constraining:  α3270_7357'  <!<  ((α3271_7556',) -> α3273_7563')
//│ ╟── while constraining:  {(α3272_7566' -> α3275_7565') where: α3270_7357' :> ((α3271_7556',) -> α3273_7563'), α3271_7556' :> ((α3272_7566',) -> α3274_7564')}  <!<  ((α3274_7553',) -> α3275_7554')
//│ ╟── while constraining:  ‹∀ 3. {(α3272_7562'''' -> α3275_7561'''') where: α3270_7357' :> ((α3271_7556',) -> α3273_7559''''), α3271_7556' :> ((α3272_7562'''',) -> α3274_7560'''')}›  <!<  ((α3274_7553',) -> α3275_7554')
//│ ╟── while constraining:  ‹∀ 3. {(α3272_7562'''' -> α3275_7561'''') where: α3270_7357' :> ((α3271_7556',) -> α3273_7559''''), α3271_7556' :> ((α3272_7562'''',) -> α3274_7560'''')}›  <!<  α3273_7552'
//│ ╟── while constraining:  (α3271_7556' -> ‹∀ 3. {(α3272_7562'''' -> α3275_7561'''') where: α3270_7357' :> ((α3271_7556',) -> α3273_7559''''), α3271_7556' :> ((α3272_7562'''',) -> α3274_7560'''')}›)  <!<  ((α3271_7545',) -> α3273_7552')
//│ ╟── while constraining:  ‹∀ 2. (α3271_7362''' -> ‹∀ 3. {(α3272_7368'''' -> α3275_7367'''') where: α3270_7357' :> ((α3271_7362''',) -> α3273_7365''''), α3271_7362''' :> ((α3272_7368'''',) -> α3274_7366'''')}›)›  <!<  ((α3271_7545',) -> α3273_7552')
//│ ╟── while constraining:  α3270_7357'  <!<  ((α3271_7545',) -> α3273_7552')
//│ ╟── while constraining:  {(α3272_7555' -> α3275_7554') where: α3270_7357' :> ((α3271_7545',) -> α3273_7552'), α3271_7545' :> ((α3272_7555',) -> α3274_7553')}  <!<  ((α3274_7542',) -> α3275_7543')
//│ ╟── while constraining:  ‹∀ 3. {(α3272_7551'''' -> α3275_7550'''') where: α3270_7357' :> ((α3271_7545',) -> α3273_7548''''), α3271_7545' :> ((α3272_7551'''',) -> α3274_7549'''')}›  <!<  ((α3274_7542',) -> α3275_7543')
//│ ╟── while constraining:  ‹∀ 3. {(α3272_7551'''' -> α3275_7550'''') where: α3270_7357' :> ((α3271_7545',) -> α3273_7548''''), α3271_7545' :> ((α3272_7551'''',) -> α3274_7549'''')}›  <!<  α3273_7541'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. (α3271_7362''' -> ‹∀ 3. {(α3272_7368'''' -> α3275_7367'''') where: α3270_7357' :> ((α3271_7362''',) -> α3273_7365''''), α3271_7362''' :> ((α3272_7368'''',) -> α3274_7366'''')}›)›  <!<  'a4608_7339'
//│ ╟── while constraining:  (α3270_7357' -> ‹∀ 2. (α3271_7362''' -> ‹∀ 3. {(α3272_7368'''' -> α3275_7367'''') where: α3270_7357' :> ((α3271_7362''',) -> α3273_7365''''), α3271_7362''' :> ((α3272_7368'''',) -> α3274_7366'''')}›)›)  <!<  ('a4607_7337' -> 'a4608_7339')
//│ ╟── while constraining:  ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)›  <!<  ('a4607_7337' -> 'a4608_7339')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››  <!<  ('a4607_7337' -> 'a4608_7339')
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››  <!<  α3240_7333'
//│ ╟── while constraining:  (‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››,)  <!<  (α3240_7333',)
//│ ╟── while constraining:  (α3240_7333' -> ‹∀ 3. {(α3241_7343'''' -> α3245_7342'''') where: α3240_7333' :> ('a2419_7341'''' -> 'a2419_7341''''), α3240_7333' :> ((α3241_7343'''',) -> α3244_7344'''')}›)  <!<  ((‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››,) -> α3425_7330')
//│ ╟── while constraining:  ‹∀ 2. (α3240_3250''' -> ‹∀ 3. {(α3241_3253'''' -> α3245_3252'''') where: α3240_3250''' :> ('a2419_3251'''' -> 'a2419_3251''''), α3240_3250''' :> ((α3241_3253'''',) -> α3244_3254'''')}›)›  <!<  ((‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››,) -> α3425_7330')
//│ ╟── while constraining:  α4299_7332'  <!<  ((‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››,) -> α3425_7330')
//│ ╟── while constraining:  ‹∀ 0. α4299'›  <!<  ((‹∀ 0. ‹∀ 1. (α3270_3285'' -> ‹∀ 2. (α3271_3286''' -> ‹∀ 3. {(α3272_3290'''' -> α3275_3289'''') where: α3270_3285'' :> ((α3271_3286''',) -> α3273_3287''''), α3271_3286''' :> ((α3272_3290'''',) -> α3274_3288'''')}›)›)››,) -> α3425_7330')
//│ ╟── while constraining:  ‹∀ 0. α4299'›  <!<  α3424_7329'
//│ ╟── while constraining:  (‹∀ 0. α4299'›,)  <!<  (α3424_7329',)
//│ ╟── while constraining:  (α3424_7329' -> α3426_7331')  <!<  ((‹∀ 0. α4299'›,) -> α7328')
//│ ╟── while constraining:  ‹∀ 2. (α3424_7325''' -> α3426_7327''')›  <!<  ((‹∀ 0. α4299'›,) -> α7328')
//│ ╙── while constraining:  α7323'  <!<  ((‹∀ 0. α4299'›,) -> α7328')
//│ c_i5_: error
//│      = [Function (anonymous)]

//   print_fact 0 ;
//   print_fact 1 ;
//   print_fact 2 ;
//   print_fact 3 ;
//   print_fact 4 ;
//   print_fact 5 ;
//   print_fact 6 ;
//   ()
// :e // FIXME? succeeds with genLamBodies
print_fact2 0
print_fact2 1
print_fact2 2
print_fact2 3
print_fact2 4
print_fact2 5
print_fact2 6
//│ res: string
//│    = 'Factorial 0 = 1'
//│ res: string
//│    = 'Factorial 1 = 1'
//│ res: string
//│    = 'Factorial 2 = 2'
//│ res: string
//│    = 'Factorial 3 = 6'
//│ res: string
//│    = 'Factorial 4 = 24'
//│ res: string
//│    = 'Factorial 5 = 120'
//│ res: string
//│    = 'Factorial 6 = 720'

print_fact2_ 0
print_fact2_ 1
print_fact2_ 2
print_fact2_ 3
print_fact2_ 4
print_fact2_ 5
print_fact2_ 6
//│ res: string
//│    = 'Factorial_ 0 = 1'
//│ res: string
//│    = 'Factorial_ 1 = 1'
//│ res: string
//│    = 'Factorial_ 2 = 2'
//│ res: string
//│    = 'Factorial_ 3 = 6'
//│ res: string
//│    = 'Factorial_ 4 = 24'
//│ res: string
//│    = 'Factorial_ 5 = 120'
//│ res: string
//│    = 'Factorial_ 6 = 720'



