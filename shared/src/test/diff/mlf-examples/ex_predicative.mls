:NoRecursiveTypes

// * In these tests, argument generalization is sometimes needed; I have annotated where.
:GeneralizeArguments


// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
//│ imp: Bot -> nothing
//│    = [Function: imp]

def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp': (nothing -> 'a -> (forall 'b 'c. (nothing -> 'b -> 'c & 'b) -> 'c) -> 'd & 'a) -> 'd
//│     = [Function: imp$]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta$]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: ('a -> 'a -> 'b) -> ('c -> 'a) -> ('d -> 'c) -> ('e -> 'd) -> 'e -> 'b
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: ('a -> 'b -> 'c) -> 'b -> ('d -> 'a) -> 'd -> 'c
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> ('a -> ('a & 'b)) -> 'b
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
// * Note that the `forall` is not distributed out because there's no enclosing polymorphic type here!
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> (forall 'b. ('a -> 'b) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> Sid
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a 'b. ('a -> 'b & 'a) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: ((Sid -> Sid) -> 'a) -> 'a
//│    = [Function (anonymous)]
//│ res: ((forall 'a 'b. ('a -> 'b & 'a) -> 'b) -> 'c) -> 'c
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> Sid
//│    = [Function: delta]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: delta$]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> 'a -> 'a
//│   = [Function: k2]
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]
//│ two: ('a -> 'b & 'b -> 'c) -> 'a -> 'c
//│    = [Function: two]
//│ three: ('a -> 'b & 'b -> 'c & 'c -> 'd) -> 'a -> 'd
//│      = [Function: three]


:e // * Note: this test case of ours works when generalizing the LHS of ascriptions
(app id): Sid
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.154: 	(app id): Sid
//│ ║         	^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.34: 	type Sid = forall 'a. 'a -> 'a
//│ ║        	                      ^^
//│ ╟── back into type variable `'a`
//│ ║  l.34: 	type Sid = forall 'a. 'a -> 'a
//│ ║        	                            ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.138: 	def app = fun f -> fun x -> f x
//│ ╙──       	                            ^^^
//│ res: Sid
//│    = [Function (anonymous)]
// * this one works:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt


// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;

// * [FCP-LIM] requires :GeneralizeArguments
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t: ('b -> nothing -> 'a) -> ('c -> 'a & 'b) -> ('a & 'c) -> 'a
//│  = [Function: t3]

t id succ 0
//│ res: int
//│    = 2

// * Same as above but WITHOUT the type annotation (unlike MLF)
:e
def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╔══[ERROR] Inferred recursive type: (? -> (forall 'a. ? -> 'a -> 'a)) -> (forall 'b. 'b -> ? -> 'b) -> (forall 'c 'd. ('c -> 'd) -> 'c -> 'd) -> (? -> nothing -> ((forall 'a 'b 'e. ((forall 'a. ? -> 'a -> 'a) -> (forall 'a. ? -> 'a -> 'a) -> 'e & 'a & 'b) -> (? -> 'b | 'a | 'e)) | 'f)) -> ? -> nothing & (forall 'g 'h 'i 'j 'k. ((forall 'a. ? -> 'a -> 'a) -> ('g -> 'h -> 'i & 'k)) -> ('k -> (forall 'l. ('i -> 'l & 'g) -> 'h -> 'l) -> 'j) -> 'j) -> (forall 'e. ((forall 'a. ? -> 'a -> 'a) -> (forall 'a. ? -> 'a -> 'a) -> 'e) -> 'e) -> (forall 'b. 'b -> ? -> 'b) -> ? & ? -> ((forall 'a 'b 'e. ((forall 'a. ? -> 'a -> 'a) -> (forall 'a. ? -> 'a -> 'a) -> 'e & 'a & 'b) -> (? -> 'b | 'a | 'e)) | 'm) -> nothing
//│ ║  l.197: 	def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╙──       	                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.197: 	def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ t_: (nothing -> anything) -> error
//│   = [Function: t_]

t_ id succ 0
//│ res: error
//│    = 2

// * Works with CT:
:ConstrainedTypes
def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t_: 'a -> 'b -> ('c -> 'd
//│   where
//│     forall 'e 'f 'g. ('e -> 'f & 'f -> 'g) -> 'e -> 'g <: (forall 'h. ('h
//│   where
//│     forall 'i. ('i
//│   where
//│     forall 'j 'k 'l. 'l -> ((anything -> (forall 'm. anything -> 'm -> 'm)) -> (forall 'n. 'n -> anything -> 'n) -> (forall 'o 'p. ('o -> 'p) -> 'o -> 'p) -> (forall 'q 'r 's. 'r -> ('s -> 'q
//│   where
//│     'k <: (forall 't. ('t
//│   where
//│     'l <: (forall 'u. ('u
//│   where
//│     'k <: (forall 'v 'w. 'v -> ((forall 'x. ('x
//│   where
//│     'v <: (forall 'm. anything -> 'm -> 'm) -> 'x)) -> (forall 'y 'z 'a1. 'y -> ('z -> 'a1
//│   where
//│     'y <: (forall 'b1. ('b1
//│   where
//│     'v <: (forall 'm. anything -> 'm -> 'm) -> 'y -> 'z -> 'b1)) -> 'a1)) -> 'w) -> 'w) -> (forall 'c1. ((forall 'm. anything -> 'm -> 'm) -> (forall 'm. anything -> 'm -> 'm) -> 'c1) -> 'c1) -> (forall 'n. 'n -> anything -> 'n) -> 'u)) -> 'r -> 't)) -> 's -> 'q)) -> 'j & 'k) -> 'j <: (forall 'd1. ('d1
//│   where
//│     forall 'j 'k 'l. 'l -> ((anything -> (forall 'm. anything -> 'm -> 'm)) -> (forall 'n. 'n -> anything -> 'n) -> (forall 'o 'p. ('o -> 'p) -> 'o -> 'p) -> (forall 'q 'r 's. 'r -> ('s -> 'q
//│   where
//│     'k <: (forall 't. ('t
//│   where
//│     'l <: (forall 'u. ('u
//│   where
//│     'k <: (forall 'v 'w. 'v -> ((forall 'x. ('x
//│   where
//│     'v <: (forall 'm. anything -> 'm -> 'm) -> 'x)) -> (forall 'y 'z 'a1. 'y -> ('z -> 'a1
//│   where
//│     'y <: (forall 'b1. ('b1
//│   where
//│     'v <: (forall 'm. anything -> 'm -> 'm) -> 'y -> 'z -> 'b1)) -> 'a1)) -> 'w) -> 'w) -> (forall 'c1. ((forall 'm. anything -> 'm -> 'm) -> (forall 'm. anything -> 'm -> 'm) -> 'c1) -> 'c1) -> (forall 'n. 'n -> anything -> 'n) -> 'u)) -> 'r -> 't)) -> 's -> 'q)) -> 'j & 'k) -> 'j <: (anything -> 'a) -> 'd1)) -> 'i) <: (forall 'e1. ('e1
//│   where
//│     forall 'e 'f 'g. ('e -> 'f & 'f -> 'g) -> 'e -> 'g <: (forall 'f1 'v. 'v -> ((forall 'x. ('x
//│   where
//│     'v <: (forall 'm. anything -> 'm -> 'm) -> 'x)) -> (forall 'y 'z 'a1. 'y -> ('z -> 'a1
//│   where
//│     'y <: (forall 'b1. ('b1
//│   where
//│     'v <: (forall 'm. anything -> 'm -> 'm) -> 'y -> 'z -> 'b1)) -> 'a1)) -> 'f1) -> 'f1) -> (forall 'c1. ((forall 'm. anything -> 'm -> 'm) -> (forall 'm. anything -> 'm -> 'm) -> 'c1) -> 'c1) -> (forall 'n. 'n -> anything -> 'n) -> 'e1)) -> 'b -> 'h)) -> 'c -> 'd)
//│   = [Function: t_1]
:NoConstrainedTypes

t_ id succ 0
//│ res: int
//│    = 2


// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three

// * [FCP-LIM] requires :GeneralizeArguments
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ t: ('b -> nothing -> 'a) -> ('c -> 'a & 'b) -> ('a & 'c) -> 'a
//│  = [Function: t4]

// * Same as above but WITHOUT the type annotation (unlike MLF)
// * Interestingly this one does NOT require CT
:Fuel 6000
:e // occurs-check
def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: ? -> ((forall 'b 'c. ((forall 'd. ? -> 'd -> 'd) -> (forall 'd. ? -> 'd -> 'd) -> 'b & 'c) -> (? -> 'c | 'b) | ?) -> ((forall 'd. ? -> 'd -> 'd) -> ((? -> (forall 'd. ? -> 'd -> 'd)) -> (forall 'e. 'e -> ? -> 'e) -> (forall 'f 'g. ('f -> 'g) -> 'f -> 'g) -> (? -> ('h & ? & (forall 'd. ? -> 'd -> 'd) -> nothing & 'i) -> ?) -> 'a & (forall 'j 'k 'l 'm 'n. ((forall 'd. ? -> 'd -> 'd) -> ('n -> 'k -> 'm & 'l)) -> ('l -> (forall 'o. ('m -> 'o & 'n) -> 'k -> 'o) -> 'j) -> 'j) -> (forall 'p. ((forall 'd. ? -> 'd -> 'd) -> (forall 'd. ? -> 'd -> 'd) -> 'p) -> 'p) -> (forall 'e. 'e -> ? -> 'e) -> ? & ? -> ((forall 'p 'q 'r. nothing -> ((? & 'q) -> (? | 'q) | 'r | 'p) | 'h) -> nothing & ? -> ?)) & 'h & ? & (forall 'd. ? -> 'd -> 'd) -> nothing & 'i) & (forall 'r 's. nothing -> ('s -> 's | 'r)) -> nothing)
//│ ║  l.275: 	def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ╙──       	                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.275: 	def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ t_: ('a -> ('b -> ((forall 'c. anything -> 'c -> 'c) -> ((forall 'd 'e 'f 'g 'h 'i. ((forall 'c. anything -> 'c -> 'c) -> ('f -> 'd -> 'h & 'g)) -> ('g -> (forall 'j. ('h -> 'j & 'f) -> 'd -> 'j) -> 'e) -> ('i -> 'i | 'e) | 'k) -> (forall 'l 'm 'n 'o. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'o & 'l & 'm) -> ('m -> 'm | 'n | 'o) | 'p) -> 'b & 'q) & 'r & 'b & 'p & 's & 't & 'u) & (forall 'l 'n 'o 'v. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'o & 'l & 'v) -> ('v -> 'v | 'n | 'o) | 'r) -> ((forall 'c. anything -> 'c -> 'c) -> ((forall 'd 'e 'f 'g 'h 'i. ((forall 'c. anything -> 'c -> 'c) -> ('f -> 'd -> 'h & 'g)) -> ('g -> (forall 'j. ('h -> 'j & 'f) -> 'd -> 'j) -> 'e) -> ('i -> 'i | 'e) | 'k) -> (forall 'l 'm 'n 'o. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'o & 'l & 'm) -> ('m -> 'm | 'n | 'o) | 'p) -> 'b & 'q) & 'r & 'b & 'p & 's & 't & 'u) & 'k)) -> (('a & 'w) -> ((forall 'c. anything -> 'c -> 'c) -> ((forall 'd 'e 'f 'g 'x 'h. ((forall 'c. anything -> 'c -> 'c) -> ('f -> 'd -> 'h & 'g)) -> ('g -> (forall 'j. ('h -> 'j & 'f) -> 'd -> 'j) -> 'e) -> ('x -> 'x | 'e) | 'k) -> (forall 'l 'y 'n 'o. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'o & 'l & 'y) -> ('y -> 'y | 'n | 'o) | 'p) -> 'b & 'q) & 'r & 'b & 'p & 't) -> 'u | error)
//│   where
//│     's <: (forall 'c. anything -> 'c -> 'c) -> ((anything -> (forall 'c. anything -> 'c -> 'c)) -> (forall 'z. 'z -> anything -> 'z) -> (forall 'a1 'b1. ('a1 -> 'b1) -> 'a1 -> 'b1) -> ('a -> ('r & 'b & 'p) -> nothing) -> 'w -> ((forall 'c1 'd1. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'c1 & 'd1) -> (anything -> 'd1 | 'c1) | 't) -> 's & (forall 'l 'n 'e1. 'l -> ('e1 -> 'e1 | 'n)) -> ((forall 'c. anything -> 'c -> 'c) -> ((forall 'd 'e 'f 'f1 'g 'h. ((forall 'c. anything -> 'c -> 'c) -> ('f -> 'd -> 'h & 'g)) -> ('g -> (forall 'j. ('h -> 'j & 'f) -> 'd -> 'j) -> 'e) -> ('f1 -> 'f1 | 'e) | 'k) -> (forall 'l 'n 'g1 'o. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'o & 'l & 'g1) -> ('g1 -> 'g1 | 'n | 'o) | 'p) -> 'b & 'q) & 'r & 'b & 'p & 't & 'u)) & (forall 'd 'e 'f 'g 'h. ((forall 'c. anything -> 'c -> 'c) -> ('f -> 'd -> 'h & 'g)) -> ('g -> (forall 'j. ('h -> 'j & 'f) -> 'd -> 'j) -> 'e) -> 'e) -> (forall 'o. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'o) -> 'o) -> (forall 'z. 'z -> anything -> 'z) -> anything) & 'r & 'b & 'p
//│     'b :> forall 'h1 'n 'l 'i1 'o. ((forall 'c. anything -> 'c -> 'c) -> (forall 'c. anything -> 'c -> 'c) -> 'o & 'l & 'i1 & 'h1) -> ('i1 -> 'i1 | 'n | 'o | 'h1)
//│        <: (forall 'c. anything -> 'c -> 'c) -> nothing -> nothing -> anything
//│     'l <: (forall 'j1 'k1. anything -> 'j1 -> ('k1 -> 'k1 | 'j1) | 'q) -> (forall 'l1. ('b -> 'l1 & 'k) -> ('b & 'p) -> 'l1) -> 'n
//│   = [Function: t_2]
:ResetFuel

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

t id succ 0
//│ res: int
//│    = 6

:stats
:e // * Strange recursive error. The bounds graph is quite large and hard to analyze for debugging...
t_ id succ 0
//│ ╔══[ERROR] Inferred recursive type: (forall 'a. nothing -> ((? & 'a) -> (? | 'a) | ?) | ?) -> nothing
//│ ║  l.275: 	def t_ y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ╙──       	                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.307: 	t_ id succ 0
//│ ║         	^^^^^^^^^^
//│ ╟── function of type `?a -> anything -> ?a` is not an instance of type `int`
//│ ║  l.136: 	def k = fun x -> fun y -> x
//│ ╙──       	        ^^^^^^^^^^^^^^^^^^^
//│ res: error
//│    = 6
//│ constrain calls  : 153
//│ annoying  calls  : 0
//│ subtyping calls  : 1323


// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> nothing
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> nothing
//│  = [Function: t6]


// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)

// * Note: `z` is free in the MLF commented example... TODO: Ask the MLF authors what they meant


//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)

:re
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.351: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)

:e
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> anything -> anything -> 'a
//│ ╙──
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

:RecursiveTypes
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]
:NoRecursiveTypes


//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)

:e
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> anything -> anything -> 'a
//│ ╙──
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

:RecursiveTypes
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]
:NoRecursiveTypes


//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)

:e
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> anything -> 'a
//│ ╙──
//│ res: 'a -> 'b
//│   where
//│     'a :> 'c
//│     'c :> anything -> 'a | 'b
//│     'b :> anything -> 'c
//│    = [Function (anonymous)]

:RecursiveTypes
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'c
//│     'c :> anything -> 'a | 'b
//│     'b :> anything -> 'c
//│    = [Function (anonymous)]
:NoRecursiveTypes

// * Also works with CT:
:ConstrainedTypes
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     forall 'c. ('c
//│   where
//│     forall 'd 'e 'f. 'd -> ('e -> 'f
//│   where
//│     'd <: (forall 'g. ('g
//│   where
//│     'd <: 'e -> 'g)) -> 'f) <: (forall 'h. ('h
//│   where
//│     forall 'i. ('i
//│   where
//│     forall 'd 'j 'k. 'd -> ('j -> 'k
//│   where
//│     'd <: (forall 'l. ('l
//│   where
//│     'd <: 'j -> 'l)) -> 'k) <: (forall 'd 'm 'n. 'd -> ('m -> 'n
//│   where
//│     'd <: (forall 'o. ('o
//│   where
//│     'd <: 'm -> 'o)) -> 'n)) -> 'i) <: (forall 'p. 'p -> anything -> 'p) -> 'h)) -> 'c) <: (forall 'q. ('q
//│   where
//│     forall 'c. ('c
//│   where
//│     forall 'd 'e 'f. 'd -> ('e -> 'f
//│   where
//│     'd <: (forall 'g. ('g
//│   where
//│     'd <: 'e -> 'g)) -> 'f) <: (forall 'h. ('h
//│   where
//│     forall 'i. ('i
//│   where
//│     forall 'd 'j 'k. 'd -> ('j -> 'k
//│   where
//│     'd <: (forall 'l. ('l
//│   where
//│     'd <: 'j -> 'l)) -> 'k) <: (forall 'd 'm 'n. 'd -> ('m -> 'n
//│   where
//│     'd <: (forall 'o. ('o
//│   where
//│     'd <: 'm -> 'o)) -> 'n)) -> 'i) <: (forall 'p. 'p -> anything -> 'p) -> 'h)) -> 'c) <: 'a -> 'q)) -> 'b
//│    = [Function (anonymous)]
:NoConstrainedTypes



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// * This one still doesn't work with :RecursiveTypes
:e
:re
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: (forall 'b. ? -> ? -> 'b -> 'b) -> (forall 'c. 'c -> ? -> 'c) -> (forall 'd 'e. ('d -> 'e) -> 'd -> 'e) -> (((forall 'c 'f 'g. nothing -> (? -> ('f -> 'f | 'c) | 'g) | 'h) -> nothing & 'i) -> ('j & 'k) -> (forall 'l. ('h & 'l) -> (? | 'l) | 'k)) -> 'i -> nothing & (forall 'm 'n 'o 'p 'q. ((forall 'l. ? -> 'l -> 'l) -> 'n & (forall 'r. ? -> 'r -> 'r) -> 'q -> 'o -> 'm) -> ('n -> (forall 's. ('m -> 's & 'q) -> 'o -> 's) -> 'p) -> 'p) -> (forall 'g. ((forall 't. ? -> 't -> 't) -> (forall 'u. ? -> 'u -> 'u) -> 'g) -> 'g) -> (forall 'c. 'c -> ? -> 'c) -> 'a & ('h -> ? | ?) -> 'j -> 'k
//│ ║  l.493: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╙──       	                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.493: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.493: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// *)


