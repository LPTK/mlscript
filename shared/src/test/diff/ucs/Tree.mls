:NewDefs

type Option[A] = Some[A] | None
class Some[A](value: A)
module None
//│ type Option[A] = None | Some[A]
//│ class Some[A](value: A)
//│ module None

type Tree[A] = Node[A] | Empty
module Empty
class Node[A](value: Int, left: Tree[A], right: Tree[A])
//│ type Tree[A] = Empty | Node[A]
//│ module Empty
//│ class Node[A](value: Int, left: Tree[A], right: Tree[A])

fun find(t, v) = if t is
  Node(v', l, r) and
    v < v' then find(l, v)
    v > v' then find(r, v)
    _ then Some(v)
  Empty then None
//│ fun find: forall 'a. (Empty | Node[in anything out nothing], Num & 'a) -> (None | Some['a])

fun insert(t, v) = if t is
  Node(v', l, r) and
    v < v' then Node(v', insert(l, v), r)
    v > v' then Node(v', l, insert(r, v))
    _ then t
  Empty then Node(v, Empty, Empty)
//│ fun insert: forall 'A 'A0 'A1 'A2 'A3. (Empty | Node[in 'A0 out 'A], Int) -> Node[in 'A1 & ('A | ??A) out 'A2 | ??A0 & 'A0]
//│   where
//│     'A0 <: 'A1 & ('A1 & ('A | ??A) | ~??A0 & ('A | ??A)) | ~??A0
//│     'A1 :> 'A2 | ??A0 & 'A0
//│         <: 'A3 & ('A | ??A)
//│     'A3 <: 'A1 & ('A | ??A)
//│     'A <: 'A0
//│     'A2 :> 'A1 | ??A0 & 'A0

find(Empty, 0)
find(Node(0, Empty, Empty), 0)
find(Node(1, Empty, Empty), 0)
//│ None | Some[0]
//│ res
//│     = None { class: [class None] }
//│ res
//│     = Some {}
//│ res
//│     = None { class: [class None] }
