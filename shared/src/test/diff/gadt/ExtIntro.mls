:NewDefs
:DontDistributeForalls

class Z 
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }

abstract class K[type T]: KS[?]
class KS[A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?]
//│ class KS[A](ev: K[A]) extends K

:d
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(e1, e2) else 0
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))))), NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0))))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int)))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0))))))))
//│ | Completing fun fr: (K['L], K['L]) -> Int
//│ | | Type params 
//│ | | Params 
//│ | | Typing type Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 1. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))
//│ | | | | 1. type Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L))))))
//│ | | | | | 1. type AppliedType(TypeName(K),List('L))
//│ | | | | | | 1. type 'L
//│ | | | | | | => 'L52'
//│ | | | | | => K['L52']
//│ | | | | | 1. type AppliedType(TypeName(K),List('L))
//│ | | | | | | 1. type 'L
//│ | | | | | | => 'L52'
//│ | | | | | => K['L52']
//│ | | | | => (K['L52'], K['L52'],)
//│ | | | | 1. type TypeName(Int)
//│ | | | | => Int
//│ | | | => ((K['L52'], K['L52'],) -> Int)
//│ | | => ((K['L52'], K['L52'],) -> Int) ——— 'L52'
//│ | | Inferred poly constr: ((K['L52'], K['L52'],) -> Int)  —— where 
//│ | | Type fr polymorphically? true && (0 === 0 || false || false
//│ | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›› <! fr53'
//│ | |   where 
//│ | | 1. C ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›› <! fr53'    (0)
//│ | | | NEW fr53' LB (0)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))))),‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)››) where 
//│ | Completing fun fr = (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | Type params (TypeName(L),L54',TypeParamInfo(None,false,None,None))
//│ | | Params 
//│ | | Type fr polymorphically? true && (0 === 0 || true || false
//│ | | 1. Typing term (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | | 1. Typing pattern [l: K‹L›, r: K‹L›,]
//│ | | | | 1. Typing pattern l : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L54') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L54'
//│ | | | | | | => K[‘L54']
//│ | | | | | => K[‘L54'] ——— 
//│ | | | | 1. : K[‘L54']
//│ | | | | 1. Typing pattern r : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L54') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L54'
//│ | | | | | | => K[‘L54']
//│ | | | | | => K[‘L54'] ——— 
//│ | | | | 1. : K[‘L54']
//│ | | | 1. : (l: K[‘L54'], r: K[‘L54'],)
//│ | | | 1. Typing term {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | | | 1. Typing term if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(l); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))
//│ | | | | | [Desugarer.destructPattern] Result: «l is Var(KS)»
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(r); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e2))))))
//│ | | | | | [Desugarer.destructPattern] Result: «r is Var(KS)»
//│ | | | | | Desugared term: case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }; _ => 0 }
//│ | | | | | 1. Typing term case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }; _ => 0 }
//│ | | | | | | 1. Typing term l
//│ | | | | | | 1. : K[‘L54']
//│ | | | | | | CONSTRAIN K[‘L54'] <! Object
//│ | | | | | |   where 
//│ | | | | | | 1. C K[‘L54'] <! Object    (0)
//│ | | | | | | | Assigning T :: T36' := ‘L54' where 
//│ | | | | | | | Set T36_55' ~> T36'
//│ | | | | | | | Assigned Some(‘L54')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L54'..‘L54'}) <! #Object<>    (2)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | Match arm KS: #KS<Object,K> & {KS#A: mut A39_56'..A39_57'} intl {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}
//│ | | | | | | var rfn: l :: K[‘L54'] & #KS<Object,K> & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}
//│ | | | | | | 2. Typing term let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }
//│ | | | | | | | 2. Typing term (KS).unapply(l,)
//│ | | | | | | | | 2. Typing term (KS).unapply
//│ | | | | | | | | | 2. Typing term (x,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | 3. Typing pattern [x,]
//│ | | | | | | | | | | | 3. Typing pattern x
//│ | | | | | | | | | | | 3. : x60'''
//│ | | | | | | | | | | 3. : (x60''',)
//│ | | | | | | | | | | 3. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | 3. Typing term x : KS
//│ | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | 3. : x60'''
//│ | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | vars=Map(L -> ‘L54') newDefsInfo=Map()
//│ | | | | | | | | | | | | | 3. type TypeName(KS)
//│ | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | CONSTRAIN x60''' <! #KS<Object,K>
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C x60''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | NEW x60''' UB (0)
//│ | | | | | | | | | | | 3. : #KS<Object,K>
//│ | | | | | | | | | | | 3. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | 3. Typing term (x).#ev
//│ | | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | | 3. : x60'''
//│ | | | | | | | | | | | | | CONSTRAIN x60''' <! {#ev: #ev61'''}
//│ | | | | | | | | | | | | |   where 
//│ 		x60''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | 3. C x60''' <! {#ev: #ev61'''}    (0)
//│ | | | | | | | | | | | | | | NEW x60''' UB (3)
//│ | | | | | | | | | | | | 3. : #ev61'''
//│ | | | | | | | | | | | 3. : (#ev61''',)
//│ | | | | | | | | | | 3. : (#ev61''',)
//│ | | | | | | | | | | Inferred poly constr: (x60''' -> (#ev61''',))  —— where 
//│ 		x60''' <: {#ev: #ev61'''} & #KS<Object,K>
//│ | | | | | | | | | 2. : ‹∀ 2. (x60''' -> (#ev61''',))›
//│ | | | | | | | | 2. : ‹∀ 2. (x60''' -> (#ev61''',))›
//│ | | | | | | | | 2. Typing term l
//│ | | | | | | | | 2. : ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')})
//│ | | | | | | | | CONSTRAIN ‹∀ 2. (x60''' -> (#ev61''',))› <! (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}) -> α62'')
//│ | | | | | | | |   where 
//│ 		A39_56' <: A39_57'
//│ 		x60''' <: {#ev: #ev61'''} & #KS<Object,K>
//│ | | | | | | | | 2. C ‹∀ 2. (x60''' -> (#ev61''',))› <! (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}) -> α62'')    (0)
//│ | | | | | | | | | INST [2]   ‹∀ 2. (x60''' -> (#ev61''',))›
//│ | | | | | | | | |   where  
//│ 		x60''' <: {#ev: #ev61'''} & #KS<Object,K>
//│ | | | | | | | | | TO [2] ~>  (x60_63'' -> (#ev61_64'',))
//│ | | | | | | | | |   where  
//│ 		x60_63'' <: {#ev: #ev61_64''} & #KS<Object,K>
//│ | | | | | | | | | 2. C (x60_63'' -> (#ev61_64'',)) <! (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}) -> α62'')    (2)
//│ | | | | | | | | | | 2. C (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}),) <! (x60_63'',)    (2)
//│ | | | | | | | | | | | 2. C ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}) <! x60_63''    (3)
//│ | | | | | | | | | | | | NEW x60_63'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}) <! {#ev: #ev61_64''}    (6)
//│ | | | | | | | | | | | | | Assigning T :: T36' := ‘L54' where 
//│ | | | | | | | | | | | | | Set T36_65' ~> T36'
//│ | | | | | | | | | | | | | Assigned Some(‘L54')
//│ | | | | | | | | | | | | | Assigning A :: A39' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | Set A39_66 ~> A39'
//│ | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | 2. ARGH  DNF(2, #KS<Object,K>{KS#A: mut (A39_56' | ‘A58'')..(‘A58'' & A39_57'), T: mut ‘L54'..‘L54'})  <!  DNF(2, {#ev: #ev61_64''})
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut (A39_56' | ‘A58'')..(‘A58'' & A39_57'), T: mut ‘L54'..‘L54'} <: DNF(2, {#ev: #ev61_64''})
//│ | | | | | | | | | | | | | | Possible: List({#ev: #ev61_64''})
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A39_56' | ‘A58'')..(‘A58'' & A39_57'), T: mut ‘L54'..‘L54'}  %  List()  <!  List({#ev: #ev61_64''})  %  ⊥
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A39_56' | ‘A58'')..(‘A58'' & A39_57'), T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  {#ev:#ev61_64''}
//│ | | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A39_56' | ‘A58'')..(‘A58'' & A39_57'), T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  |{#ev:#ev61_64''}
//│ | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A39']) where 
//│ | | | | | | | | | | | | | | | | | | Lookup: Found mut (A39_56' | ‘A58'')..(‘A58'' & A39_57')
//│ | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A39_56' | ‘A58'')..(‘A58'' & A39_57')]) where Some(
//│ 		A39_56' <: A39_57')
//│ | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | 2. C K[(A39_56' | ‘A58'')..(‘A58'' & A39_57')] <! #ev61_64''    (5)
//│ | | | | | | | | | | | | | | | | | | NEW #ev61_64'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_56' | ‘A58'')..(A39_57' & ‘A58'')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | 2. C (#ev61_64'',) <! α62''    (2)
//│ | | | | | | | | | | | NEW α62'' LB (2)
//│ | | | | | | | 2. : α62''
//│ | | | | | | | 2. Typing term let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }
//│ | | | | | | | | 2. Typing term ($unapp).0
//│ | | | | | | | | | 2. Typing term $unapp
//│ | | | | | | | | | 2. : α62''
//│ | | | | | | | | | CONSTRAIN α62'' <! {0: α67''}
//│ | | | | | | | | |   where 
//│ 		A39_56' <: A39_57'
//│ 		α62'' :> (#ev61_64'',)
//│ 		#ev61_64'' :> K[(A39_56' | ‘A58'')..(‘A58'' & A39_57')]
//│ | | | | | | | | | 2. C α62'' <! {0: α67''}    (0)
//│ | | | | | | | | | | NEW α62'' UB (2)
//│ | | | | | | | | | | 2. C (#ev61_64'',) <! {0: α67''}    (2)
//│ | | | | | | | | | | | 2. C {0: #ev61_64''} <! {0: α67''}    (4)
//│ | | | | | | | | | | | | 2. C #ev61_64'' <! α67''    (3)
//│ | | | | | | | | | | | | | NEW #ev61_64'' UB (2)
//│ | | | | | | | | | | | | | 2. C K[(A39_56' | ‘A58'')..(‘A58'' & A39_57')] <! α67''    (5)
//│ | | | | | | | | | | | | | | NEW α67'' LB (2)
//│ | | | | | | | | 2. : α67''
//│ | | | | | | | | 2. Typing term case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }
//│ | | | | | | | | | 2. Typing term r
//│ | | | | | | | | | 2. : K[‘L54']
//│ | | | | | | | | | CONSTRAIN K[‘L54'] <! Object
//│ | | | | | | | | |   where 
//│ | | | | | | | | | 2. C K[‘L54'] <! Object    (0)
//│ | | | | | | | | | | Assigning T :: T36' := ‘L54' where 
//│ | | | | | | | | | | Set T36_68' ~> T36'
//│ | | | | | | | | | | Assigned Some(‘L54')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L54'..‘L54'}) <! #Object<>    (2)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | Match arm KS: #KS<Object,K> & {KS#A: mut A39_69''..A39_70''} intl {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}
//│ | | | | | | | | | var rfn: r :: K[‘L54'] & #KS<Object,K> & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}
//│ | | | | | | | | | 3. Typing term let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,)
//│ | | | | | | | | | | 3. Typing term (KS).unapply(r,)
//│ | | | | | | | | | | | 3. Typing term (KS).unapply
//│ | | | | | | | | | | | | 3. Typing term (x::0,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | | | | 4. Typing pattern [x::0,]
//│ | | | | | | | | | | | | | | 4. Typing pattern x::0
//│ | | | | | | | | | | | | | | 4. : x73''''
//│ | | | | | | | | | | | | | 4. : (x73'''',)
//│ | | | | | | | | | | | | | 4. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | | 4. Typing term x : KS
//│ | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | 4. : x73''''
//│ | | | | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | | | | vars=Map(L -> ‘L54') newDefsInfo=Map()
//│ | | | | | | | | | | | | | | | | 4. type TypeName(KS)
//│ | | | | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | | | | CONSTRAIN x73'''' <! #KS<Object,K>
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | 4. C x73'''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | | | | NEW x73'''' UB (0)
//│ | | | | | | | | | | | | | | 4. : #KS<Object,K>
//│ | | | | | | | | | | | | | | 4. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | | | | 4. Typing term (x).#ev
//│ | | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | | 4. : x73''''
//│ | | | | | | | | | | | | | | | | CONSTRAIN x73'''' <! {#ev: #ev74''''}
//│ | | | | | | | | | | | | | | | |   where 
//│ 		x73'''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | | | | 4. C x73'''' <! {#ev: #ev74''''}    (0)
//│ | | | | | | | | | | | | | | | | | NEW x73'''' UB (4)
//│ | | | | | | | | | | | | | | | 4. : #ev74''''
//│ | | | | | | | | | | | | | | 4. : (#ev74'''',)
//│ | | | | | | | | | | | | | 4. : (#ev74'''',)
//│ | | | | | | | | | | | | | Inferred poly constr: (x73'''' -> (#ev74'''',))  —— where 
//│ 		x73'''' <: {#ev: #ev74''''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. : ‹∀ 3. (x73'''' -> (#ev74'''',))›
//│ | | | | | | | | | | | 3. : ‹∀ 3. (x73'''' -> (#ev74'''',))›
//│ | | | | | | | | | | | 3. Typing term r
//│ | | | | | | | | | | | 3. : ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')})
//│ | | | | | | | | | | | CONSTRAIN ‹∀ 3. (x73'''' -> (#ev74'''',))› <! (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}) -> α75''')
//│ | | | | | | | | | | |   where 
//│ 		A39_69'' <: A39_70''
//│ 		x73'''' <: {#ev: #ev74''''} & #KS<Object,K>
//│ | | | | | | | | | | | 3. C ‹∀ 3. (x73'''' -> (#ev74'''',))› <! (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}) -> α75''')    (0)
//│ | | | | | | | | | | | | INST [3]   ‹∀ 3. (x73'''' -> (#ev74'''',))›
//│ | | | | | | | | | | | |   where  
//│ 		x73'''' <: {#ev: #ev74''''} & #KS<Object,K>
//│ | | | | | | | | | | | | TO [3] ~>  (x73_76''' -> (#ev74_77''',))
//│ | | | | | | | | | | | |   where  
//│ 		x73_76''' <: {#ev: #ev74_77'''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. C (x73_76''' -> (#ev74_77''',)) <! (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}) -> α75''')    (2)
//│ | | | | | | | | | | | | | 3. C (((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}),) <! (x73_76''',)    (2)
//│ | | | | | | | | | | | | | | 3. C ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}) <! x73_76'''    (3)
//│ | | | | | | | | | | | | | | | NEW x73_76''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}) <! {#ev: #ev74_77'''}    (6)
//│ | | | | | | | | | | | | | | | | Assigning T :: T36' := ‘L54' where 
//│ | | | | | | | | | | | | | | | | Set T36_78' ~> T36'
//│ | | | | | | | | | | | | | | | | Assigned Some(‘L54')
//│ | | | | | | | | | | | | | | | | Assigning A :: A39' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | | | | Set A39_79 ~> A39'
//│ | | | | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | | | | 3. ARGH  DNF(3, #KS<Object,K>{KS#A: mut (A39_69'' | ‘A71''')..(‘A71''' & A39_70''), T: mut ‘L54'..‘L54'})  <!  DNF(3, {#ev: #ev74_77'''})
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut (A39_69'' | ‘A71''')..(‘A71''' & A39_70''), T: mut ‘L54'..‘L54'} <: DNF(3, {#ev: #ev74_77'''})
//│ | | | | | | | | | | | | | | | | | Possible: List({#ev: #ev74_77'''})
//│ | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A39_69'' | ‘A71''')..(‘A71''' & A39_70''), T: mut ‘L54'..‘L54'}  %  List()  <!  List({#ev: #ev74_77'''})  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A39_69'' | ‘A71''')..(‘A71''' & A39_70''), T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  {#ev:#ev74_77'''}
//│ | | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A39_69'' | ‘A71''')..(‘A71''' & A39_70''), T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  |{#ev:#ev74_77'''}
//│ | | | | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A39']) where 
//│ | | | | | | | | | | | | | | | | | | | | | Lookup: Found mut (A39_69'' | ‘A71''')..(‘A71''' & A39_70'')
//│ | | | | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A39_69'' | ‘A71''')..(‘A71''' & A39_70'')]) where Some(
//│ 		A39_69'' <: A39_70'')
//│ | | | | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | | | | 3. C K[(A39_69'' | ‘A71''')..(‘A71''' & A39_70'')] <! #ev74_77'''    (5)
//│ | | | | | | | | | | | | | | | | | | | | | NEW #ev74_77''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L54'] & #KS<Object,K>) & {KS#A: mut (A39_69'' | ‘A71''')..(A39_70'' & ‘A71''')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | 3. C (#ev74_77''',) <! α75'''    (2)
//│ | | | | | | | | | | | | | | NEW α75''' LB (3)
//│ | | | | | | | | | | 3. : α75'''
//│ | | | | | | | | | | 3. Typing term let e2 = ($unapp).0 in fr(e1, e2,)
//│ | | | | | | | | | | | 3. Typing term ($unapp).0
//│ | | | | | | | | | | | | 3. Typing term $unapp
//│ | | | | | | | | | | | | 3. : α75'''
//│ | | | | | | | | | | | | CONSTRAIN α75''' <! {0: α80'''}
//│ | | | | | | | | | | | |   where 
//│ 		A39_69'' <: A39_70''
//│ 		α75''' :> (#ev74_77''',)
//│ 		#ev74_77''' :> K[(A39_69'' | ‘A71''')..(‘A71''' & A39_70'')]
//│ | | | | | | | | | | | | 3. C α75''' <! {0: α80'''}    (0)
//│ | | | | | | | | | | | | | NEW α75''' UB (3)
//│ | | | | | | | | | | | | | 3. C (#ev74_77''',) <! {0: α80'''}    (2)
//│ | | | | | | | | | | | | | | 3. C {0: #ev74_77'''} <! {0: α80'''}    (4)
//│ | | | | | | | | | | | | | | | 3. C #ev74_77''' <! α80'''    (3)
//│ | | | | | | | | | | | | | | | | NEW #ev74_77''' UB (3)
//│ | | | | | | | | | | | | | | | | 3. C K[(A39_69'' | ‘A71''')..(‘A71''' & A39_70'')] <! α80'''    (5)
//│ | | | | | | | | | | | | | | | | | NEW α80''' LB (3)
//│ | | | | | | | | | | | 3. : α80'''
//│ | | | | | | | | | | | 3. Typing term fr(e1, e2,)
//│ | | | | | | | | | | | | 3. Typing term fr
//│ | | | | | | | | | | | | 3. : ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)››
//│ | | | | | | | | | | | | 3. Typing term e1
//│ | | | | | | | | | | | | 3. : α67''
//│ | | | | | | | | | | | | 3. Typing term e2
//│ | | | | | | | | | | | | 3. : α80'''
//│ | | | | | | | | | | | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›› <! ((α67'', α80''',) -> α81''')
//│ | | | | | | | | | | | |   where 
//│ 		A39_56' <: A39_57'
//│ 		α67'' :> K[(A39_56' | ‘A58'')..(‘A58'' & A39_57')]
//│ 		A39_69'' <: A39_70''
//│ 		α80''' :> K[(A39_69'' | ‘A71''')..(‘A71''' & A39_70'')]
//│ | | | | | | | | | | | | 3. C ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›› <! ((α67'', α80''',) -> α81''')    (0)
//│ | | | | | | | | | | | | | 3. C ‹∀ 0. ((K['L52'], K['L52'],) -> Int)› <! ((α67'', α80''',) -> α81''')    (2)
//│ | | | | | | | | | | | | | | INST [0]   ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [3] ~>  ((K['L52_82'''], K['L52_82'''],) -> Int)
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 3. C ((K['L52_82'''], K['L52_82'''],) -> Int) <! ((α67'', α80''',) -> α81''')    (4)
//│ | | | | | | | | | | | | | | | 3. C (α67'', α80''',) <! (K['L52_82'''], K['L52_82'''],)    (3)
//│ | | | | | | | | | | | | | | | | 3. C α67'' <! K['L52_82''']    (4)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[-] K['L52_82'''] || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] 'L52_82''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | => 'L52_83''
//│ | | | | | | | | | | | | | | | | | | EXTR[-] 'L52_82''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] 'L52_83'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | => 'L52_83''
//│ | | | | | | | | | | | | | | | | | | => 'L52_84''
//│ | | | | | | | | | | | | | | | | | => K[? :> 'L52_83'' <: 'L52_84'']
//│ | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L52_83''
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L52_84''
//│ | | | | | | | | | | | | | | | | | EXTR RHS  ~>  K[? :> 'L52_83'' <: 'L52_84'']  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ 		'L52_84'' <: 'L52_83''
//│ | | | | | | | | | | | | | | | | | 3. C α67'' <! K[? :> 'L52_83'' <: 'L52_84'']    (4)
//│ | | | | | | | | | | | | | | | | | | NEW α67'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C K[(A39_56' | ‘A58'')..(‘A58'' & A39_57')] <! K[? :> 'L52_83'' <: 'L52_84'']    (7)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L52_83'' <! (A39_56' | ‘A58'')..(‘A58'' & A39_57')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L52_83'' <! (A39_56' | ‘A58'')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L52_83'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | 3. C (A39_56' | ‘A58'')..(‘A58'' & A39_57') <! 'L52_84''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A58'' & A39_57') <! 'L52_84''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L52_84'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A58'' & A39_57') <! 'L52_83''    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L52_83'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A58'' & A39_57') <! (A39_56' | ‘A58'')    (13)
//│ | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 3. C α80''' <! K['L52_82''']    (4)
//│ | | | | | | | | | | | | | | | | | NEW α80''' UB (3)
//│ | | | | | | | | | | | | | | | | | 3. C K[(A39_69'' | ‘A71''')..(‘A71''' & A39_70'')] <! K['L52_82''']    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C (A39_69'' | ‘A71''')..(‘A71''' & A39_70'') <! 'L52_82'''    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A71''' & A39_70'') <! 'L52_82'''    (9)
//│ | | | | | | | | | | | | | | | | | | | | NEW 'L52_82''' LB (3)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A71''' & A39_70'') <! 'L52_83''    (12)
//│ | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[+] (A39_70'' & ‘A71''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] A39_70'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | => A39_70''
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A71''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A71''')
//│ | | | | | | | | | | | | | | | | | | | | | => (A39_70'' & ⊤(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (A39_70'' & ⊤(‘A71'''))  to 2
//│ | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (A39_70'' & ⊤(‘A71''')) <! 'L52_83''    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L52_83'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (A39_70'' & ⊤(‘A71''')) <! (A39_56' | ‘A58'')    (15)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧⊤(‘A71''')∧A39_70'')  <!  DNF(2, A39_56' | {}∧‘A58'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. C A39_70'' <! ((A39_56' | ‘A58'') | ~(⊤(‘A71''')))    (17)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | NEW A39_70'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C 'L52_82''' <! (A39_69'' | ‘A71''')..(‘A71''' & A39_70'')    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L52_82''' <! (A39_69'' | ‘A71''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | NEW 'L52_82''' UB (3)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A71''' & A39_70'') <! (A39_69'' | ‘A71''')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L52_84'' <! (A39_69'' | ‘A71''')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] (‘A71''' | A39_69'') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A71''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A71''')
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A39_69'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | => A39_69''
//│ | | | | | | | | | | | | | | | | | | | | | => (⊥(‘A71''') | A39_69'')
//│ | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (⊥(‘A71''') | A39_69'')  to 2
//│ | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		A39_56' <: A39_57'
//│ 		A39_69'' <: A39_70''
//│ 		A39_70'' <: ((A39_56' | ‘A58'') | ~(⊤(‘A71''')))
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L52_84'' <! (⊥(‘A71''') | A39_69'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L52_84'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A58'' & A39_57') <! (⊥(‘A71''') | A39_69'')    (15)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘A58''∧A39_57')  <!  DNF(2, {}∧⊥(‘A71''') | A39_69'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. C A39_57' <! ((⊥(‘A71''') | A39_69'') | ~(‘A58''))    (17)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A58'' & A39_57') & ~(⊥(‘A71'''))) <! A39_69''    (17)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A39_69'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A58'' & A39_57') & ~(⊥(‘A71'''))) <! A39_70''    (19)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A39_70'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A58'' & A39_57') & ~(⊥(‘A71'''))) <! ((A39_56' | ‘A58'') | ~(⊤(‘A71''')))    (21)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | 3. C Int <! α81'''    (3)
//│ | | | | | | | | | | | | | | | | NEW α81''' LB (0)
//│ | | | | | | | | | | | 3. : α81'''
//│ | | | | | | | | | | 3. : α81'''
//│ | | | | | | | | | 3. : α81'''
//│ | | | | | | | | | CONSTRAIN α81''' <! α72''
//│ | | | | | | | | |   where 
//│ 		α81''' :> Int
//│ | | | | | | | | | 3. C α81''' <! α72''    (0)
//│ | | | | | | | | | | NEW α81''' UB (2)
//│ | | | | | | | | | | 3. C Int <! α72''    (2)
//│ | | | | | | | | | | | NEW α72'' LB (0)
//│ | | | | | | | | | 2. Typing term 0
//│ | | | | | | | | | 2. : #0<Int,Num,Object>
//│ | | | | | | | | | finishing branch: [(#KS<Object,K>,{KS#A: mut A39_69''..A39_70''})] + List((α85'',⊤)) and [α72''] | #0<Int,Num,Object>
//│ | | | | | | | | | finishing case K[‘L54'] <: ((#KS<Object,K> & {KS#A: mut A39_69''..A39_70''}) | (α85'' & ~(#KS<Object,K>)))
//│ | | | | | | | | | CONSTRAIN K[‘L54'] <! ((#KS<Object,K> & {KS#A: mut A39_69''..A39_70''}) | (α85'' & ~(#KS<Object,K>)))
//│ | | | | | | | | |   where 
//│ 		A39_56' <: A39_57'
//│ 		A39_69'' :> ((‘A58'' & A39_57') & ~(⊥(‘A71'''))) <: A39_70''
//│ 		A39_70'' :> ((‘A58'' & A39_57') & ~(⊥(‘A71'''))) <: ((A39_56' | ‘A58'') | ~(⊤(‘A71''')))
//│ | | | | | | | | | 2. C K[‘L54'] <! ((#KS<Object,K> & {KS#A: mut A39_69''..A39_70''}) | (α85'' & ~(#KS<Object,K>)))    (0)
//│ | | | | | | | | | | Assigning T :: T36' := ‘L54' where 
//│ | | | | | | | | | | Set T36_86' ~> T36'
//│ | | | | | | | | | | Assigned Some(‘L54')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L54'..‘L54'}) <! ((#KS<Object,K> & {KS#A: mut A39_69''..A39_70''}) | (α85'' & ~(#KS<Object,K>)))    (2)
//│ | | | | | | | | | | | Assigning A :: A39' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | Set A39_87 ~> A39'
//│ | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'})  <!  DNF(2, #KS<Object,K>{KS#A: mut A39_69''..A39_70''} | α85''∧~(#KS<Object,K>))
//│ | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'} <: DNF(2, #KS<Object,K>{KS#A: mut A39_69''..A39_70''} | α85''∧~(#KS<Object,K>))
//│ | | | | | | | | | | | | Possible: List(#KS<Object,K>{KS#A: mut A39_69''..A39_70''})
//│ | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List((#KS<Object,K> & {KS#A: mut A39_69''..A39_70''}))  %  ⊥
//│ | | | | | | | | | | | | | Case.1
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List(#KS<Object,K>)  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  #KS<Object,K>
//│ | | | | | | | | | | | | | | | class checking #KS<Object,K> List(#KS<Object,K>)
//│ | | | | | | | | | | | | | | | OK  #KS<Object,K>  <:  #KS<Object,K>
//│ | | | | | | | | | | | | | Case.2
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List({KS#A: mut A39_69''..A39_70''})  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  {KS#A:mut A39_69''..A39_70''}
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  |{KS#A:mut A39_69''..A39_70''}
//│ | | | | | | | | | | | | | | | | Looking up field KS#A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | Lookup KS.KS#A : Some(mut A39'..A39') where 
//│ | | | | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | | | | Fresh[0] KS.KS#A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | | | | 2. C ⊥..⊤ <! A39_70''    (2)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! A39_70''    (4)
//│ | | | | | | | | | | | | | | | | | | NEW A39_70'' LB (0)
//│ | | | | | | | | | | | | | | | | | | 2. C ⊤ <! ((A39_56' | ‘A58'') | ~(⊤(‘A71''')))    (6)
//│ | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, )  <!  DNF(2, A39_56' | {}∧‘A58'' | ~(⊤(‘A71''')))
//│ | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(2, A39_56' | {}∧‘A58'' | ~(⊤(‘A71''')))
//│ | | | | | | | | | | | | | | | | | | | | Possible: List(A39_56', {}∧‘A58'', ~(⊤(‘A71''')))
//│ | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(A39_56', ‘A58'', ~(⊤(‘A71''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(‘A58'', ~(⊤(‘A71''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(~(⊤(‘A71''')))  %  ‘A58''
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List(⊤(‘A71'''))  <!  List()  %  ‘A58''
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A71''')  %  List()  <!  List()  %  ‘A58''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A71''') & ~(‘A58'')) <! A39_56'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (⊤(‘A71''') & ~(‘A58'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ⊤(‘A71''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A71''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘A58'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A58'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A58'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊥(‘A58''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => (⊤(‘A71''') & ~(⊥(‘A58'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A71''') & ~(⊥(‘A58'')))  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A71''') & ~(⊥(‘A58''))) <! A39_56'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A39_56' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A71''') & ~(⊥(‘A58''))) <! A39_57'    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A39_57' LB (0)
//│ | | | | | | | | | | | | | | | | 2. C A39_69'' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | | | | 2. C A39_69'' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | | | | NEW A39_69'' UB (0)
//│ | | | | | | | | | | | | | | | | | | 2. C ((‘A58'' & A39_57') & ~(⊥(‘A71'''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧‘A58''∧A39_57'∧~(⊥(‘A71''')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | 2. C A39_57' <! ~((‘A58'' & ~(⊥(‘A71'''))))    (8)
//│ | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] (~(‘A58'') | ⊥(‘A71''')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(‘A58'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A58'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A58'')
//│ | | | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A58''))
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ⊥(‘A71''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A71''')
//│ | | | | | | | | | | | | | | | | | | | | | => (~(⊤(‘A58'')) | ⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (~(⊤(‘A58'')) | ⊥(‘A71'''))  to 1
//│ | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | 2. C A39_57' <! (~(⊤(‘A58'')) | ⊥(‘A71'''))    (8)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW A39_57' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A71''') & ~(⊥(‘A58''))) <! (~(⊤(‘A58'')) | ⊥(‘A71'''))    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, {}∧⊤(‘A71''')∧~(⊥(‘A58'')))  <!  DNF(0, ~(⊤(‘A58'')) | {}∧⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF finished with same type at both sides
//│ | | | | | | | | 2. : (α72'' | #0<Int,Num,Object>)
//│ | | | | | | | 2. : (α72'' | #0<Int,Num,Object>)
//│ | | | | | | 2. : (α72'' | #0<Int,Num,Object>)
//│ | | | | | | CONSTRAIN (α72'' | #0<Int,Num,Object>) <! α59'
//│ | | | | | |   where 
//│ 		α72'' :> Int
//│ | | | | | | 2. C (α72'' | #0<Int,Num,Object>) <! α59'    (0)
//│ | | | | | | | wrong level: 2
//│ | | | | | | | EXTR[+] (α72'' | #0<Int,Num,Object>) || 1 .. 1024  2 false
//│ | | | | | | | | EXTR[+] α72'' || 1 .. 1024  2 false
//│ | | | | | | | | | EXTR[+] Int || 1 .. 1024  0 true
//│ | | | | | | | | | => Int
//│ | | | | | | | | => α72_88'
//│ | | | | | | | | EXTR[+] #0<Int,Num,Object> || 1 .. 1024  0 true
//│ | | | | | | | | => #0<Int,Num,Object>
//│ | | | | | | | => (α72_88' | #0<Int,Num,Object>)
//│ | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | Reconstraining α72_88'
//│ | | | | | | | EXTR LHS  ~>  (α72_88' | #0<Int,Num,Object>)  to 1
//│ | | | | | | |  where 
//│ 		α72_88' :> Int
//│ | | | | | | | 2. C (α72_88' | #0<Int,Num,Object>) <! α59'    (0)
//│ | | | | | | | | NEW α59' LB (1)
//│ | | | | | | 1. Typing term 0
//│ | | | | | | 1. : #0<Int,Num,Object>
//│ | | | | | | finishing branch: [(#KS<Object,K>,{KS#A: mut A39_56'..A39_57'})] + List((α89',⊤)) and [α59'] | #0<Int,Num,Object>
//│ | | | | | | finishing case K[‘L54'] <: ((#KS<Object,K> & {KS#A: mut A39_56'..A39_57'}) | (α89' & ~(#KS<Object,K>)))
//│ | | | | | | CONSTRAIN K[‘L54'] <! ((#KS<Object,K> & {KS#A: mut A39_56'..A39_57'}) | (α89' & ~(#KS<Object,K>)))
//│ | | | | | |   where 
//│ 		A39_56' :> (⊤(‘A71''') & ~(⊥(‘A58''))) <: A39_57'
//│ 		A39_57' :> (⊤(‘A71''') & ~(⊥(‘A58''))) <: (~(⊤(‘A58'')) | ⊥(‘A71'''))
//│ | | | | | | 1. C K[‘L54'] <! ((#KS<Object,K> & {KS#A: mut A39_56'..A39_57'}) | (α89' & ~(#KS<Object,K>)))    (0)
//│ | | | | | | | Assigning T :: T36' := ‘L54' where 
//│ | | | | | | | Set T36_90' ~> T36'
//│ | | | | | | | Assigned Some(‘L54')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L54'..‘L54'}) <! ((#KS<Object,K> & {KS#A: mut A39_56'..A39_57'}) | (α89' & ~(#KS<Object,K>)))    (2)
//│ | | | | | | | | Assigning A :: A39' := ? :> ⊥ <: ⊤
//│ | | | | | | | | Set A39_91 ~> A39'
//│ | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'})  <!  DNF(1, #KS<Object,K>{KS#A: mut A39_56'..A39_57'} | α89'∧~(#KS<Object,K>))
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'} <: DNF(1, #KS<Object,K>{KS#A: mut A39_56'..A39_57'} | α89'∧~(#KS<Object,K>))
//│ | | | | | | | | | Possible: List(#KS<Object,K>{KS#A: mut A39_56'..A39_57'})
//│ | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List((#KS<Object,K> & {KS#A: mut A39_56'..A39_57'}))  %  ⊥
//│ | | | | | | | | | | Case.1
//│ | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List(#KS<Object,K>)  %  ⊥
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  #KS<Object,K>
//│ | | | | | | | | | | | | class checking #KS<Object,K> List(#KS<Object,K>)
//│ | | | | | | | | | | | | OK  #KS<Object,K>  <:  #KS<Object,K>
//│ | | | | | | | | | | Case.2
//│ | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List({KS#A: mut A39_56'..A39_57'})  %  ⊥
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  {KS#A:mut A39_56'..A39_57'}
//│ | | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L54'..‘L54'}  %  List()  <!  List()  %  |{KS#A:mut A39_56'..A39_57'}
//│ | | | | | | | | | | | | | Looking up field KS#A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | Lookup KS.KS#A : Some(mut A39'..A39') where 
//│ | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | Fresh[0] KS.KS#A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | 1. C ⊥..⊤ <! A39_57'    (2)
//│ | | | | | | | | | | | | | | 1. C ⊤ <! A39_57'    (4)
//│ | | | | | | | | | | | | | | | NEW A39_57' LB (0)
//│ | | | | | | | | | | | | | | | 1. C ⊤ <! (~(⊤(‘A58'')) | ⊥(‘A71'''))    (6)
//│ | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, )  <!  DNF(0, ~(⊤(‘A58'')) | {}∧⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(0, ~(⊤(‘A58'')) | {}∧⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A58'')), {}∧⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(~(⊤(‘A58'')), ⊥(‘A71'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List(⊤(‘A58''))  <!  List(⊥(‘A71'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A58'')  %  List()  <!  List(⊥(‘A71'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A58'')  %  List()  <!  List()  %  ⊥(‘A71''')
//│ | | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A58'')) List(⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: (~(⊤(‘A58'')) | ⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | normLike[-] (~(⊤(‘A58'')) | ⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | | norm[-] (~(⊤(‘A58'')) | ⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A58'')) | {}∧⊥(‘A71'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A58'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A58''))
//│ | | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A58'')
//│ | | | | | | | | | | | | | | | | | | | | | | ~> (⊥(‘A71''') | ~(⊤(‘A58'')))
//│ | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | normLike[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! (α59' | #0<Int,Num,Object>)
//│ | | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α59' :> (α72_88' | #0<Int,Num,Object>)
//│ 		α72_88' :> Int
//│ | | | | | | | | | | | | | | | | | | | | | 1. C #error<> <! (α59' | #0<Int,Num,Object>)    (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.21: 	  if l is KS(e1) and r is KS(e2) then fr(e1, e2) else 0
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `??A | ~??A0`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | | | | | | 1. C A39_56' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | 1. C A39_56' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | NEW A39_56' UB (0)
//│ | | | | | | | | | | | | | | | 1. C (⊤(‘A71''') & ~(⊥(‘A58''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A71''')∧~(⊥(‘A58'')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A71''') <: DNF(0, {}∧⊥(‘A58''))
//│ | | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A58''))
//│ | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A71''')  %  List()  <!  List(⊥(‘A58''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A71''')  %  List()  <!  List()  %  ⊥(‘A58'')
//│ | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A71''')) List(⊥(‘A58''))
//│ | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A71''') & ~(⊥(‘A58''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A71''') & ~(⊥(‘A58'')))
//│ | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A71''') & ~(⊥(‘A58'')))
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A71''')∧~(⊥(‘A58'')))
//│ | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A71''') & ~(⊥(‘A58'')))
//│ | | | | | 1. : (α59' | #0<Int,Num,Object>)
//│ | | | | 1. : (α59' | #0<Int,Num,Object>)
//│ | | | 1. : (α59' | #0<Int,Num,Object>)
//│ | | 1. : ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))
//│ | | CONSTRAIN ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>)) <! fr96'
//│ | |   where 
//│ 		α59' :> (α72_88' | #0<Int,Num,Object>)
//│ 		α72_88' :> Int
//│ | | 1. C ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>)) <! fr96'    (0)
//│ | | | NEW fr96' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0)))))))),((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))) where 
//│ 		α59' :> (α72_88' | #0<Int,Num,Object>)
//│ 		α72_88' :> Int
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))› <! ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)››
//│ |   where 
//│ 		α59' :> (α72_88' | #0<Int,Num,Object>)
//│ 		α72_88' :> Int
//│ | 0. C ‹∀ 0. ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))› <! ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)››    (0)
//│ | | BUMP TO LEVEL 1  -->  ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›
//│ | | where 
//│ | | 1. C ‹∀ 0. ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))› <! ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›    (2)
//│ | | | New skolem: 'L52' ~> ‘L97''
//│ | | | BUMP TO LEVEL 2  -->  ((K[‘L97''], K[‘L97''],) -> Int)
//│ | | | where 
//│ | | | 2. C ‹∀ 0. ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))› <! ((K[‘L97''], K[‘L97''],) -> Int)    (4)
//│ | | | | INST [0]   ‹∀ 0. ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))›
//│ | | | |   where  
//│ 		α59' :> (α72_88' | #0<Int,Num,Object>)
//│ 		α72_88' :> Int
//│ | | | | TO [2] ~>  ((l: K[L54_98''], r: K[L54_98''],) -> (α59_99'' | #0<Int,Num,Object>))
//│ | | | |   where  
//│ 		α59_99'' :> (α72_100'' | #0<Int,Num,Object>)
//│ 		α72_100'' :> Int
//│ | | | | 2. C ((l: K[L54_98''], r: K[L54_98''],) -> (α59_99'' | #0<Int,Num,Object>)) <! ((K[‘L97''], K[‘L97''],) -> Int)    (6)
//│ | | | | | 2. C (K[‘L97''], K[‘L97''],) <! (l: K[L54_98''], r: K[L54_98''],)    (4)
//│ | | | | | | 2. C K[‘L97''] <! K[L54_98'']    (5)
//│ | | | | | | | 2. C ‘L97'' <! L54_98''    (6)
//│ | | | | | | | | NEW L54_98'' LB (2)
//│ | | | | | | | 2. C L54_98'' <! ‘L97''    (6)
//│ | | | | | | | | NEW L54_98'' UB (2)
//│ | | | | | | | | 2. C ‘L97'' <! ‘L97''    (9)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 2. C K[‘L97''] <! K[L54_98'']    (5)
//│ | | | | | | | Cached!
//│ | | | | | 2. C (α59_99'' | #0<Int,Num,Object>) <! Int    (4)
//│ | | | | | | 2. C α59_99'' <! Int    (7)
//│ | | | | | | | NEW α59_99'' UB (0)
//│ | | | | | | | 2. C (α72_100'' | #0<Int,Num,Object>) <! Int    (10)
//│ | | | | | | | | 2. C α72_100'' <! Int    (13)
//│ | | | | | | | | | NEW α72_100'' UB (0)
//│ | | | | | | | | | 2. C Int <! Int    (16)
//│ | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | 2. C #0<Int,Num,Object> <! Int    (13)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 2. C #0<Int,Num,Object> <! Int    (7)
//│ | | | | | | | Already a subtype by <:<
//│ | | | UNSTASHING...
//│ | | UNSTASHING...
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›› <! ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)››
//│ |   where 
//│ | 0. C ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›› <! ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)››    (0)
//│ | | Already a subtype by <:<
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun fr: ‹∀ 0. ((l: K[‘L54'], r: K[‘L54'],) -> (α59' | #0<Int,Num,Object>))› where 
//│ |		α59' :> (α72_88' | #0<Int,Num,Object>)
//│ |		α72_88' :> Int
//│ fun fr: ‹∀ 0. ‹∀ 0. ((K['L52'], K['L52'],) -> Int)›› where 
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

:e
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(l, e2) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.713: 	  if l is KS(e1) and r is KS(e2) then fr(l, e2) else 0
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `S[in A & ?A out ?A0 | A] | L | ~??A`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.711: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	           ^^
//│ ╟── from type variable:
//│ ║  l.711: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	                  ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

// FIXME
:e
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(e1, r) else 0
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.5: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

fun fk: (K['L], K['L]) -> Int
fun fk[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fk((e1 : K[e1.T]), (e2 : K[e2.T])) else 0
//│ fun fk: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fk: forall 'L0. (K['L0], K['L0]) -> Int

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then 
    let xw: K[eb.T] = ea : K[ea.T]; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0

:re
fk((error : K[S[S[nothing]]]), (error : K[S[S[nothing]]]))
//│ Int
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.761: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `S[nothing]` does not match type `nothing`
//│ ║  l.761: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ║         	                ^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.761: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ╙──       	                                            ^^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

// * with alt

abstract class K[type T]: KZ | KS[?]
class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?] | KZ
//│ class KZ() extends K
//│ class KS[A](ev: K[A]) extends K

fun get[A](x: K[S[A]]): K[A] = if x is KS(m) then m : K[x.T.P] else error
//│ fun get: forall 'A. (x: K[S['A]]) -> K['A]

fun fk: (K['L], K['L]) -> Int
fun fk[L](l: K[L], r: K[L]): Int =
  if l is KS(ep) and r is KS(eq) then 1 + fk(ep, eq) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.790: 	  if l is KS(ep) and r is KS(eq) then 1 + fk(ep, eq) else 0
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `??A | ~??A0`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.788: 	fun fk: (K['L], K['L]) -> Int
//│ ║         	                  ^^
//│ ╟── from type variable:
//│ ║  l.788: 	fun fk: (K['L], K['L]) -> Int
//│ ║         	           ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.780: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ fun fk: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fk: forall 'L0. (K['L0], K['L0]) -> Int

fk(KS(KS(KZ())), KS(KS(KZ())))
//│ Int
//│ res
//│     = 2

:e
fk(KS(KS(KZ())), KS(KZ()))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.814: 	fk(KS(KS(KZ())), KS(KZ()))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?A]`
//│ ║  l.779: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.780: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ║         	                                     ^^^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.780: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ Int | error
//│ res
//│     = 1

fun fi[L](x: K[L]): K[L] = if x is 
    KZ() then KZ() : K[x.T]
    KS(ea) then KS(ea) : K[x.T]
//│ fun fi: forall 'L. (x: K['L]) -> K['L]

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[ea.T] = ea ; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0

fun fz[L](l: KS[L], r: KS[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[eb.T] = ea : K[ea.T] ; 0
  else 0
//│ fun fz: forall 'L. (l: KS['L], r: KS['L]) -> 0

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt = ea : K[eb.T] ; 0
  else error
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.849: 	  if l is KS(ea) and r is KS(eb) then
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.850: 	    let zt = ea : K[eb.T] ; 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.851: 	  else error
//│ ║         	^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `S[?] | ??A | ~??A0`
//│ ╟── Note: constraint arises from type selection:
//│ ║  l.850: 	    let zt = ea : K[eb.T] ; 0
//│ ║         	                      ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.780: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> (0 | error)

fun fz[L](l: K[L], r: K[L]): K[L] =
  if l is KS(ea) and r is KS(eb) 
    then (KS(eb) : K[r.T]) : K[l.T]
    else error
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> K['L]

abstract class Eq[type A, type B]: Refl[A]
class Refl[A]() extends Eq[A, A]
//│ abstract class Eq[A, B]: Refl[A]
//│ class Refl[A]() extends Eq

fun conv[L, A](x: K[L], ev: Eq[L, S[A]]): K[S[A]] =
  if ev is Refl() then (x as K[ev.A]) as K[ev.B]
//│ fun conv: forall 'L 'A. (x: K['L], ev: Eq['L, S['A]]) -> K[S['A]]

conv(KS(KZ()), Refl())
//│ K[S[Z]]
//│ res
//│     = KS {}

:e
conv(KZ(), Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.890: 	conv(KZ(), Refl())
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?A]`
//│ ║  l.779: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.880: 	fun conv[L, A](x: K[L], ev: Eq[L, S[A]]): K[S[A]] =
//│ ╙──       	                                  ^^^^
//│ K[S['A]] | error
//│ res
//│     = KZ {}

fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] =
  let y: K[S[ev.B.P]] = x : K[ev.B]
  if y is KS(m) then m : K[y.T.P] else error
//│ fun extr: forall 'L 'H. (x: K['L], ev: Eq['L, S['H]]) -> K['H]

fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] = get(x : K[ev.B])
//│ fun extr: forall 'L 'H. (x: K['L], ev: Eq['L, S['H]]) -> K['H]

extr(KS(KZ()), Refl())
//│ K[Z]
//│ res
//│     = KZ {}

:e
extr(KZ(), Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.918: 	extr(KZ(), Refl())
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?H]`
//│ ║  l.779: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.909: 	fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] = get(x : K[ev.B])
//│ ╙──       	                                  ^^^^
//│ K['H] | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

abstract class K[type T]: (KZ | KS[?]) {
  fun m: Eq[T, S['A]] -> Int
  fun m(ev) = if ev is Refl() then 0
  fun n: T -> T
  fun n(x) = x
}
class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?] | KZ {
//│   fun m: forall 'A. Eq[T, S['A]] -> Int
//│   fun n: T -> T
//│ }
//│ class KZ() extends K {
//│   fun m: forall 'A0. Eq['T, S['A0]] -> Int
//│   fun n: 'T -> 'T
//│ }
//│ class KS[A](ev: K[A]) extends K {
//│   fun m: forall 'A1. Eq['T0, S['A1]] -> Int
//│   fun n: 'T0 -> 'T0
//│ }
//│ where
//│   'T0 := S[A]
//│   'T := Z

KS(KZ()).n(new S : S[Z])
KZ().n(new Z)
//│ Z
//│ res
//│     = S {}
//│ res
//│     = Z {}

:e
KS(KZ()).n(new Z)
KZ().n(new S : S[Z])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.966: 	KS(KZ()).n(new Z)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Z` is not an instance of `S[?A]`
//│ ║  l.966: 	KS(KZ()).n(new Z)
//│ ║         	               ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.940: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ║         	                                     ^^^^
//│ ╟── Note: type parameter T is defined at:
//│ ║  l.933: 	abstract class K[type T]: (KZ | KS[?]) {
//│ ╙──       	                      ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.967: 	KZ().n(new S : S[Z])
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `S[Z]` is not an instance of `Z`
//│ ║  l.967: 	KZ().n(new S : S[Z])
//│ ║         	               ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.939: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: type parameter T is defined at:
//│ ║  l.933: 	abstract class K[type T]: (KZ | KS[?]) {
//│ ╙──       	                      ^
//│ Z | error
//│ res
//│     = Z {}
//│ res
//│     = S {}

KS(KZ()).m(Refl())
//│ Int
//│ res
//│     = 0

:e
KZ().m(Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1004: 	KZ().m(Refl())
//│ ║          	^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S['A]`
//│ ║  l.939: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.934: 	  fun m: Eq[T, S['A]] -> Int
//│ ╙──       	               ^^^^^
//│ Int | error
//│ res
//│     = 0

class C[type A]()
//│ class C[A]()

fun test(k) =
  let f(x) = let c = C() in [k(c), c]
  f
//│ fun test: forall 'A 'A0 'a. (C[in 'A out 'A | 'A0] -> 'a) -> (forall 'A1. anything -> ['a, C['A1]])
//│   where
//│     'A1 :> 'A
//│         <: 'A0

class C[A, in B, out C]() { fun f: [A, B] -> [A, C] = f }
//│ class C[A, B, C]() {
//│   fun f: (A, B) -> [A, C]
//│ }

fun test(k) =
  let f(x) = let c = C() in [k(c), c]
  f
//│ fun test: forall 'A 'A0 'a. (C[in 'A out 'A | 'A0, anything, nothing] -> 'a) -> (forall 'A1. anything -> ['a, C['A1, anything, nothing]])
//│   where
//│     'A1 :> 'A
//│         <: 'A0








