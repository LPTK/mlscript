:NewDefs
:DontDistributeForalls

class Z 
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }

abstract class K[type T]: KS[?]
class KS[A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?]
//│ class KS[A](ev: K[A]) extends K

:d
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(e1, e2) else 0
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))))), NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0))))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int)))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0))))))))
//│ | Completing fun fr: (K['L], K['L]) -> Int
//│ | | Type params 
//│ | | Params 
//│ | | Typing type Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 1. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))
//│ | | | | 1. type Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L))))))
//│ | | | | | 1. type AppliedType(TypeName(K),List('L))
//│ | | | | | | 1. type 'L
//│ | | | | | | => 'L51'
//│ | | | | | => K['L51']
//│ | | | | | 1. type AppliedType(TypeName(K),List('L))
//│ | | | | | | 1. type 'L
//│ | | | | | | => 'L51'
//│ | | | | | => K['L51']
//│ | | | | => (K['L51'], K['L51'],)
//│ | | | | 1. type TypeName(Int)
//│ | | | | => Int
//│ | | | => ((K['L51'], K['L51'],) -> Int)
//│ | | => ((K['L51'], K['L51'],) -> Int) ——— 'L51'
//│ | | Inferred poly constr: ((K['L51'], K['L51'],) -> Int)  —— where 
//│ | | Type fr polymorphically? true && (0 === 0 || false || false
//│ | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›› <! fr52'
//│ | |   where 
//│ | | 1. C ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›› <! fr52'    (0)
//│ | | | NEW fr52' LB (0)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))))),‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)››) where 
//│ | Completing fun fr = (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | Type params (TypeName(L),L53',TypeParamInfo(None,false,None,None))
//│ | | Params 
//│ | | Type fr polymorphically? true && (0 === 0 || true || false
//│ | | 1. Typing term (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | | 1. Typing pattern [l: K‹L›, r: K‹L›,]
//│ | | | | 1. Typing pattern l : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L53') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L53'
//│ | | | | | | => K[‘L53']
//│ | | | | | => K[‘L53'] ——— 
//│ | | | | 1. : K[‘L53']
//│ | | | | 1. Typing pattern r : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L53') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L53'
//│ | | | | | | => K[‘L53']
//│ | | | | | => K[‘L53'] ——— 
//│ | | | | 1. : K[‘L53']
//│ | | | 1. : (l: K[‘L53'], r: K[‘L53'],)
//│ | | | 1. Typing term {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | | | 1. Typing term if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(l); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))
//│ | | | | | [Desugarer.destructPattern] Result: «l is Var(KS)»
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(r); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e2))))))
//│ | | | | | [Desugarer.destructPattern] Result: «r is Var(KS)»
//│ | | | | | Desugared term: case l of { KS => (([e1,],) => case r of { KS => (([e2,],) => fr(e1, e2,))((KS).unapply(r,),); _ => 0 })((KS).unapply(l,),); _ => 0 }
//│ | | | | | 1. Typing term case l of { KS => (([e1,],) => case r of { KS => (([e2,],) => fr(e1, e2,))((KS).unapply(r,),); _ => 0 })((KS).unapply(l,),); _ => 0 }
//│ | | | | | | 1. Typing term l
//│ | | | | | | 1. : K[‘L53']
//│ | | | | | | CONSTRAIN K[‘L53'] <! Object
//│ | | | | | |   where 
//│ | | | | | | 1. C K[‘L53'] <! Object    (0)
//│ | | | | | | | Assigning T :: T35' := ‘L53' where 
//│ | | | | | | | Set T35_54' ~> T35'
//│ | | | | | | | Assigned Some(‘L53')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L53'..‘L53'}) <! #Object<>    (2)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | Match arm KS: #KS<Object,K> & {KS#A: mut A38_55'..A38_56'} intl {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}
//│ | | | | | | var rfn: l :: K[‘L53'] & #KS<Object,K> & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}
//│ | | | | | | 2. Typing term (([e1,],) => case r of { KS => (([e2,],) => fr(e1, e2,))((KS).unapply(r,),); _ => 0 })((KS).unapply(l,),)
//│ | | | | | | | 2. Typing term ([e1,],) => case r of { KS => (([e2,],) => fr(e1, e2,))((KS).unapply(r,),); _ => 0 }
//│ | | | | | | | | 2. Typing pattern [[e1,],]
//│ | | | | | | | | | 2. Typing pattern [e1,]
//│ | | | | | | | | | | 2. Typing pattern e1
//│ | | | | | | | | | | 2. : e159''
//│ | | | | | | | | | 2. : (e159'',)
//│ | | | | | | | | 2. : ((e159'',),)
//│ | | | | | | | | 2. Typing term case r of { KS => (([e2,],) => fr(e1, e2,))((KS).unapply(r,),); _ => 0 }
//│ | | | | | | | | | 2. Typing term r
//│ | | | | | | | | | 2. : K[‘L53']
//│ | | | | | | | | | CONSTRAIN K[‘L53'] <! Object
//│ | | | | | | | | |   where 
//│ | | | | | | | | | 2. C K[‘L53'] <! Object    (0)
//│ | | | | | | | | | | Assigning T :: T35' := ‘L53' where 
//│ | | | | | | | | | | Set T35_60' ~> T35'
//│ | | | | | | | | | | Assigned Some(‘L53')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L53'..‘L53'}) <! #Object<>    (2)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | Match arm KS: #KS<Object,K> & {KS#A: mut A38_61''..A38_62''} intl {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}
//│ | | | | | | | | | var rfn: r :: K[‘L53'] & #KS<Object,K> & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}
//│ | | | | | | | | | 3. Typing term (([e2,],) => fr(e1, e2,))((KS).unapply(r,),)
//│ | | | | | | | | | | 3. Typing term ([e2,],) => fr(e1, e2,)
//│ | | | | | | | | | | | 3. Typing pattern [[e2,],]
//│ | | | | | | | | | | | | 3. Typing pattern [e2,]
//│ | | | | | | | | | | | | | 3. Typing pattern e2
//│ | | | | | | | | | | | | | 3. : e265'''
//│ | | | | | | | | | | | | 3. : (e265''',)
//│ | | | | | | | | | | | 3. : ((e265''',),)
//│ | | | | | | | | | | | 3. Typing term fr(e1, e2,)
//│ | | | | | | | | | | | | 3. Typing term fr
//│ | | | | | | | | | | | | 3. : ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)››
//│ | | | | | | | | | | | | 3. Typing term e1
//│ | | | | | | | | | | | | 3. : e159''
//│ | | | | | | | | | | | | 3. Typing term e2
//│ | | | | | | | | | | | | 3. : e265'''
//│ | | | | | | | | | | | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›› <! ((e159'', e265''',) -> α66''')
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›› <! ((e159'', e265''',) -> α66''')    (0)
//│ | | | | | | | | | | | | | 3. C ‹∀ 0. ((K['L51'], K['L51'],) -> Int)› <! ((e159'', e265''',) -> α66''')    (2)
//│ | | | | | | | | | | | | | | INST [0]   ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [3] ~>  ((K['L51_67'''], K['L51_67'''],) -> Int)
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 3. C ((K['L51_67'''], K['L51_67'''],) -> Int) <! ((e159'', e265''',) -> α66''')    (4)
//│ | | | | | | | | | | | | | | | 3. C (e159'', e265''',) <! (K['L51_67'''], K['L51_67'''],)    (3)
//│ | | | | | | | | | | | | | | | | 3. C e159'' <! K['L51_67''']    (4)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[-] K['L51_67'''] || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] 'L51_67''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | => 'L51_68''
//│ | | | | | | | | | | | | | | | | | | EXTR[-] 'L51_67''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] 'L51_68'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | => 'L51_68''
//│ | | | | | | | | | | | | | | | | | | => 'L51_69''
//│ | | | | | | | | | | | | | | | | | => K[? :> 'L51_68'' <: 'L51_69'']
//│ | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L51_68''
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L51_69''
//│ | | | | | | | | | | | | | | | | | EXTR RHS  ~>  K[? :> 'L51_68'' <: 'L51_69'']  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ 		'L51_69'' <: 'L51_68''
//│ | | | | | | | | | | | | | | | | | 3. C e159'' <! K[? :> 'L51_68'' <: 'L51_69'']    (7)
//│ | | | | | | | | | | | | | | | | | | NEW e159'' UB (2)
//│ | | | | | | | | | | | | | | | | 3. C e265''' <! K['L51_67''']    (4)
//│ | | | | | | | | | | | | | | | | | NEW e265''' UB (3)
//│ | | | | | | | | | | | | | | | 3. C Int <! α66'''    (3)
//│ | | | | | | | | | | | | | | | | NEW α66''' LB (0)
//│ | | | | | | | | | | | 3. : α66'''
//│ | | | | | | | | | | 3. : ([e265''',] -> α66''')
//│ | | | | | | | | | | 3. Typing term (KS).unapply(r,)
//│ | | | | | | | | | | | 3. Typing term (KS).unapply
//│ | | | | | | | | | | | | 3. Typing term (x,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | | | | 4. Typing pattern [x,]
//│ | | | | | | | | | | | | | | 4. Typing pattern x
//│ | | | | | | | | | | | | | | 4. : x70''''
//│ | | | | | | | | | | | | | 4. : (x70'''',)
//│ | | | | | | | | | | | | | 4. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | | 4. Typing term x : KS
//│ | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | 4. : x70''''
//│ | | | | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | | | | vars=Map(L -> ‘L53') newDefsInfo=Map()
//│ | | | | | | | | | | | | | | | | 4. type TypeName(KS)
//│ | | | | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | | | | CONSTRAIN x70'''' <! #KS<Object,K>
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | 4. C x70'''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | | | | NEW x70'''' UB (0)
//│ | | | | | | | | | | | | | | 4. : #KS<Object,K>
//│ | | | | | | | | | | | | | | 4. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | | | | 4. Typing term (x).#ev
//│ | | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | | 4. : x70''''
//│ | | | | | | | | | | | | | | | | CONSTRAIN x70'''' <! {#ev: #ev71''''}
//│ | | | | | | | | | | | | | | | |   where 
//│ 		x70'''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | | | | 4. C x70'''' <! {#ev: #ev71''''}    (0)
//│ | | | | | | | | | | | | | | | | | NEW x70'''' UB (4)
//│ | | | | | | | | | | | | | | | 4. : #ev71''''
//│ | | | | | | | | | | | | | | 4. : (#ev71'''',)
//│ | | | | | | | | | | | | | 4. : (#ev71'''',)
//│ | | | | | | | | | | | | | Inferred poly constr: (x70'''' -> (#ev71'''',))  —— where 
//│ 		x70'''' <: {#ev: #ev71''''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. : ‹∀ 3. (x70'''' -> (#ev71'''',))›
//│ | | | | | | | | | | | 3. : ‹∀ 3. (x70'''' -> (#ev71'''',))›
//│ | | | | | | | | | | | 3. Typing term r
//│ | | | | | | | | | | | 3. : ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')})
//│ | | | | | | | | | | | CONSTRAIN ‹∀ 3. (x70'''' -> (#ev71'''',))› <! (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}) -> α72''')
//│ | | | | | | | | | | |   where 
//│ 		A38_61'' <: A38_62''
//│ 		x70'''' <: {#ev: #ev71''''} & #KS<Object,K>
//│ | | | | | | | | | | | 3. C ‹∀ 3. (x70'''' -> (#ev71'''',))› <! (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}) -> α72''')    (0)
//│ | | | | | | | | | | | | INST [3]   ‹∀ 3. (x70'''' -> (#ev71'''',))›
//│ | | | | | | | | | | | |   where  
//│ 		x70'''' <: {#ev: #ev71''''} & #KS<Object,K>
//│ | | | | | | | | | | | | TO [3] ~>  (x70_73''' -> (#ev71_74''',))
//│ | | | | | | | | | | | |   where  
//│ 		x70_73''' <: {#ev: #ev71_74'''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. C (x70_73''' -> (#ev71_74''',)) <! (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}) -> α72''')    (2)
//│ | | | | | | | | | | | | | 3. C (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}),) <! (x70_73''',)    (2)
//│ | | | | | | | | | | | | | | 3. C ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}) <! x70_73'''    (3)
//│ | | | | | | | | | | | | | | | NEW x70_73''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}) <! {#ev: #ev71_74'''}    (6)
//│ | | | | | | | | | | | | | | | | Assigning T :: T35' := ‘L53' where 
//│ | | | | | | | | | | | | | | | | Set T35_75' ~> T35'
//│ | | | | | | | | | | | | | | | | Assigned Some(‘L53')
//│ | | | | | | | | | | | | | | | | Assigning A :: A38' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | | | | Set A38_76 ~> A38'
//│ | | | | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | | | | 3. ARGH  DNF(3, #KS<Object,K>{KS#A: mut (A38_61'' | ‘A63''')..(‘A63''' & A38_62''), T: mut ‘L53'..‘L53'})  <!  DNF(3, {#ev: #ev71_74'''})
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut (A38_61'' | ‘A63''')..(‘A63''' & A38_62''), T: mut ‘L53'..‘L53'} <: DNF(3, {#ev: #ev71_74'''})
//│ | | | | | | | | | | | | | | | | | Possible: List({#ev: #ev71_74'''})
//│ | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A38_61'' | ‘A63''')..(‘A63''' & A38_62''), T: mut ‘L53'..‘L53'}  %  List()  <!  List({#ev: #ev71_74'''})  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A38_61'' | ‘A63''')..(‘A63''' & A38_62''), T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  {#ev:#ev71_74'''}
//│ | | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A38_61'' | ‘A63''')..(‘A63''' & A38_62''), T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  |{#ev:#ev71_74'''}
//│ | | | | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A38']) where 
//│ | | | | | | | | | | | | | | | | | | | | | Lookup: Found mut (A38_61'' | ‘A63''')..(‘A63''' & A38_62'')
//│ | | | | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A38_61'' | ‘A63''')..(‘A63''' & A38_62'')]) where Some(
//│ 		A38_61'' <: A38_62'')
//│ | | | | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | | | | 3. C K[(A38_61'' | ‘A63''')..(‘A63''' & A38_62'')] <! #ev71_74'''    (5)
//│ | | | | | | | | | | | | | | | | | | | | | NEW #ev71_74''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_61'' | ‘A63''')..(A38_62'' & ‘A63''')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | 3. C (#ev71_74''',) <! α72'''    (2)
//│ | | | | | | | | | | | | | | NEW α72''' LB (3)
//│ | | | | | | | | | | 3. : α72'''
//│ | | | | | | | | | | CONSTRAIN ([e265''',] -> α66''') <! (α72''' -> α77''')
//│ | | | | | | | | | |   where 
//│ 		A38_61'' <: A38_62''
//│ 		e265''' <: K['L51_67''']
//│ 		α66''' :> Int
//│ 		'L51_67''' :> 'L51_69'' <: 'L51_68''
//│ 		'L51_69'' <: 'L51_68''
//│ 		α72''' :> (#ev71_74''',)
//│ 		#ev71_74''' :> K[(A38_61'' | ‘A63''')..(‘A63''' & A38_62'')]
//│ | | | | | | | | | | 3. C ([e265''',] -> α66''') <! (α72''' -> α77''')    (0)
//│ | | | | | | | | | | | 3. C (α72''',) <! ((e265''',),)    (1)
//│ | | | | | | | | | | | | 3. C α72''' <! (e265''',)    (2)
//│ | | | | | | | | | | | | | NEW α72''' UB (3)
//│ | | | | | | | | | | | | | 3. C (#ev71_74''',) <! (e265''',)    (4)
//│ | | | | | | | | | | | | | | 3. C #ev71_74''' <! e265'''    (4)
//│ | | | | | | | | | | | | | | | NEW #ev71_74''' UB (3)
//│ | | | | | | | | | | | | | | | 3. C K[(A38_61'' | ‘A63''')..(‘A63''' & A38_62'')] <! e265'''    (6)
//│ | | | | | | | | | | | | | | | | NEW e265''' LB (3)
//│ | | | | | | | | | | | | | | | | 3. C K[(A38_61'' | ‘A63''')..(‘A63''' & A38_62'')] <! K['L51_67''']    (8)
//│ | | | | | | | | | | | | | | | | | 3. C (A38_61'' | ‘A63''')..(‘A63''' & A38_62'') <! 'L51_67'''    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C (‘A63''' & A38_62'') <! 'L51_67'''    (9)
//│ | | | | | | | | | | | | | | | | | | | NEW 'L51_67''' LB (3)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A63''' & A38_62'') <! 'L51_68''    (11)
//│ | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | EXTR[+] (‘A63''' & A38_62'') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A63''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[+] A38_62'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | => A38_62''
//│ | | | | | | | | | | | | | | | | | | | | => (⊤(‘A63''') & A38_62'')
//│ | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A63''') & A38_62'')  to 2
//│ | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | 3. C (⊤(‘A63''') & A38_62'') <! 'L51_68''    (13)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L51_68'' LB (2)
//│ | | | | | | | | | | | | | | | | | 3. C 'L51_67''' <! (A38_61'' | ‘A63''')..(‘A63''' & A38_62'')    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C 'L51_67''' <! (A38_61'' | ‘A63''')    (9)
//│ | | | | | | | | | | | | | | | | | | | NEW 'L51_67''' UB (3)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A63''' & A38_62'') <! (A38_61'' | ‘A63''')    (11)
//│ | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L51_69'' <! (A38_61'' | ‘A63''')    (11)
//│ | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] (A38_61'' | ‘A63''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] A38_61'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | => A38_61''
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A63''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | => (A38_61'' | ⊥(‘A63'''))
//│ | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (A38_61'' | ⊥(‘A63'''))  to 2
//│ | | | | | | | | | | | | | | | | | | | |  where 
//│ 		A38_61'' <: A38_62''
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L51_69'' <! (A38_61'' | ⊥(‘A63'''))    (13)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L51_69'' UB (2)
//│ | | | | | | | | | | | 3. C α66''' <! α77'''    (1)
//│ | | | | | | | | | | | | NEW α66''' UB (3)
//│ | | | | | | | | | | | | 3. C Int <! α77'''    (3)
//│ | | | | | | | | | | | | | NEW α77''' LB (0)
//│ | | | | | | | | | 3. : α77'''
//│ | | | | | | | | | CONSTRAIN α77''' <! α64''
//│ | | | | | | | | |   where 
//│ 		α77''' :> Int
//│ | | | | | | | | | 3. C α77''' <! α64''    (0)
//│ | | | | | | | | | | NEW α77''' UB (2)
//│ | | | | | | | | | | 3. C Int <! α64''    (2)
//│ | | | | | | | | | | | NEW α64'' LB (0)
//│ | | | | | | | | | 2. Typing term 0
//│ | | | | | | | | | 2. : #0<Int,Num,Object>
//│ | | | | | | | | | finishing branch: [(#KS<Object,K>,{KS#A: mut A38_61''..A38_62''})] + List((α78'',⊤)) and [α64''] | #0<Int,Num,Object>
//│ | | | | | | | | | finishing case K[‘L53'] <: ((#KS<Object,K> & {KS#A: mut A38_61''..A38_62''}) | (α78'' & ~(#KS<Object,K>)))
//│ | | | | | | | | | CONSTRAIN K[‘L53'] <! ((#KS<Object,K> & {KS#A: mut A38_61''..A38_62''}) | (α78'' & ~(#KS<Object,K>)))
//│ | | | | | | | | |   where 
//│ 		A38_61'' <: A38_62''
//│ | | | | | | | | | 2. C K[‘L53'] <! ((#KS<Object,K> & {KS#A: mut A38_61''..A38_62''}) | (α78'' & ~(#KS<Object,K>)))    (0)
//│ | | | | | | | | | | Assigning T :: T35' := ‘L53' where 
//│ | | | | | | | | | | Set T35_79' ~> T35'
//│ | | | | | | | | | | Assigned Some(‘L53')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L53'..‘L53'}) <! ((#KS<Object,K> & {KS#A: mut A38_61''..A38_62''}) | (α78'' & ~(#KS<Object,K>)))    (2)
//│ | | | | | | | | | | | Assigning A :: A38' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | Set A38_80 ~> A38'
//│ | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'})  <!  DNF(2, #KS<Object,K>{KS#A: mut A38_61''..A38_62''} | α78''∧~(#KS<Object,K>))
//│ | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'} <: DNF(2, #KS<Object,K>{KS#A: mut A38_61''..A38_62''} | α78''∧~(#KS<Object,K>))
//│ | | | | | | | | | | | | Possible: List(#KS<Object,K>{KS#A: mut A38_61''..A38_62''})
//│ | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List((#KS<Object,K> & {KS#A: mut A38_61''..A38_62''}))  %  ⊥
//│ | | | | | | | | | | | | | Case.1
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List(#KS<Object,K>)  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  #KS<Object,K>
//│ | | | | | | | | | | | | | | | class checking #KS<Object,K> List(#KS<Object,K>)
//│ | | | | | | | | | | | | | | | OK  #KS<Object,K>  <:  #KS<Object,K>
//│ | | | | | | | | | | | | | Case.2
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List({KS#A: mut A38_61''..A38_62''})  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  {KS#A:mut A38_61''..A38_62''}
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  |{KS#A:mut A38_61''..A38_62''}
//│ | | | | | | | | | | | | | | | | Looking up field KS#A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | Lookup KS.KS#A : Some(mut A38'..A38') where 
//│ | | | | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | | | | Fresh[0] KS.KS#A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | | | | 2. C ⊥..⊤ <! A38_62''    (2)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! A38_62''    (4)
//│ | | | | | | | | | | | | | | | | | | NEW A38_62'' LB (0)
//│ | | | | | | | | | | | | | | | | 2. C A38_61'' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | | | | 2. C A38_61'' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | | | | NEW A38_61'' UB (0)
//│ | | | | | | | | 2. : (α64'' | #0<Int,Num,Object>)
//│ | | | | | | | 2. : ([e159'',] -> (α64'' | #0<Int,Num,Object>))
//│ | | | | | | | 2. Typing term (KS).unapply(l,)
//│ | | | | | | | | 2. Typing term (KS).unapply
//│ | | | | | | | | | 2. Typing term (x::2,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | 3. Typing pattern [x::2,]
//│ | | | | | | | | | | | 3. Typing pattern x::2
//│ | | | | | | | | | | | 3. : x81'''
//│ | | | | | | | | | | 3. : (x81''',)
//│ | | | | | | | | | | 3. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | 3. Typing term x : KS
//│ | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | 3. : x81'''
//│ | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | vars=Map(L -> ‘L53') newDefsInfo=Map()
//│ | | | | | | | | | | | | | 3. type TypeName(KS)
//│ | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | CONSTRAIN x81''' <! #KS<Object,K>
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C x81''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | NEW x81''' UB (0)
//│ | | | | | | | | | | | 3. : #KS<Object,K>
//│ | | | | | | | | | | | 3. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | 3. Typing term (x).#ev
//│ | | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | | 3. : x81'''
//│ | | | | | | | | | | | | | CONSTRAIN x81''' <! {#ev: #ev82'''}
//│ | | | | | | | | | | | | |   where 
//│ 		x81''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | 3. C x81''' <! {#ev: #ev82'''}    (0)
//│ | | | | | | | | | | | | | | NEW x81''' UB (3)
//│ | | | | | | | | | | | | 3. : #ev82'''
//│ | | | | | | | | | | | 3. : (#ev82''',)
//│ | | | | | | | | | | 3. : (#ev82''',)
//│ | | | | | | | | | | Inferred poly constr: (x81''' -> (#ev82''',))  —— where 
//│ 		x81''' <: {#ev: #ev82'''} & #KS<Object,K>
//│ | | | | | | | | | 2. : ‹∀ 2. (x81''' -> (#ev82''',))›
//│ | | | | | | | | 2. : ‹∀ 2. (x81''' -> (#ev82''',))›
//│ | | | | | | | | 2. Typing term l
//│ | | | | | | | | 2. : ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')})
//│ | | | | | | | | CONSTRAIN ‹∀ 2. (x81''' -> (#ev82''',))› <! (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}) -> α83'')
//│ | | | | | | | |   where 
//│ 		A38_55' <: A38_56'
//│ 		x81''' <: {#ev: #ev82'''} & #KS<Object,K>
//│ | | | | | | | | 2. C ‹∀ 2. (x81''' -> (#ev82''',))› <! (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}) -> α83'')    (0)
//│ | | | | | | | | | INST [2]   ‹∀ 2. (x81''' -> (#ev82''',))›
//│ | | | | | | | | |   where  
//│ 		x81''' <: {#ev: #ev82'''} & #KS<Object,K>
//│ | | | | | | | | | TO [2] ~>  (x81_84'' -> (#ev82_85'',))
//│ | | | | | | | | |   where  
//│ 		x81_84'' <: {#ev: #ev82_85''} & #KS<Object,K>
//│ | | | | | | | | | 2. C (x81_84'' -> (#ev82_85'',)) <! (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}) -> α83'')    (2)
//│ | | | | | | | | | | 2. C (((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}),) <! (x81_84'',)    (2)
//│ | | | | | | | | | | | 2. C ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}) <! x81_84''    (3)
//│ | | | | | | | | | | | | NEW x81_84'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}) <! {#ev: #ev82_85''}    (6)
//│ | | | | | | | | | | | | | Assigning T :: T35' := ‘L53' where 
//│ | | | | | | | | | | | | | Set T35_86' ~> T35'
//│ | | | | | | | | | | | | | Assigned Some(‘L53')
//│ | | | | | | | | | | | | | Assigning A :: A38' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | Set A38_87 ~> A38'
//│ | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | 2. ARGH  DNF(2, #KS<Object,K>{KS#A: mut (A38_55' | ‘A57'')..(‘A57'' & A38_56'), T: mut ‘L53'..‘L53'})  <!  DNF(2, {#ev: #ev82_85''})
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut (A38_55' | ‘A57'')..(‘A57'' & A38_56'), T: mut ‘L53'..‘L53'} <: DNF(2, {#ev: #ev82_85''})
//│ | | | | | | | | | | | | | | Possible: List({#ev: #ev82_85''})
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A38_55' | ‘A57'')..(‘A57'' & A38_56'), T: mut ‘L53'..‘L53'}  %  List()  <!  List({#ev: #ev82_85''})  %  ⊥
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A38_55' | ‘A57'')..(‘A57'' & A38_56'), T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  {#ev:#ev82_85''}
//│ | | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A38_55' | ‘A57'')..(‘A57'' & A38_56'), T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  |{#ev:#ev82_85''}
//│ | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A38']) where 
//│ | | | | | | | | | | | | | | | | | | Lookup: Found mut (A38_55' | ‘A57'')..(‘A57'' & A38_56')
//│ | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A38_55' | ‘A57'')..(‘A57'' & A38_56')]) where Some(
//│ 		A38_55' <: A38_56')
//│ | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | 2. C K[(A38_55' | ‘A57'')..(‘A57'' & A38_56')] <! #ev82_85''    (5)
//│ | | | | | | | | | | | | | | | | | | NEW #ev82_85'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L53'] & #KS<Object,K>) & {KS#A: mut (A38_55' | ‘A57'')..(A38_56' & ‘A57'')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | 2. C (#ev82_85'',) <! α83''    (2)
//│ | | | | | | | | | | | NEW α83'' LB (2)
//│ | | | | | | | 2. : α83''
//│ | | | | | | | CONSTRAIN ([e159'',] -> (α64'' | #0<Int,Num,Object>)) <! (α83'' -> α88'')
//│ | | | | | | |   where 
//│ 		A38_55' <: A38_56'
//│ 		e159'' <: K[? :> 'L51_68'' <: 'L51_69'']
//│ 		A38_61'' <: ⊥ & A38_62''
//│ 		A38_62'' :> ⊤
//│ 		α64'' :> Int
//│ 		'L51_68'' :> (⊤(‘A63''') & A38_62'')
//│ 		'L51_69'' <: (A38_61'' | ⊥(‘A63''')) & 'L51_68''
//│ 		α83'' :> (#ev82_85'',)
//│ 		#ev82_85'' :> K[(A38_55' | ‘A57'')..(‘A57'' & A38_56')]
//│ | | | | | | | 2. C ([e159'',] -> (α64'' | #0<Int,Num,Object>)) <! (α83'' -> α88'')    (0)
//│ | | | | | | | | 2. C (α83'',) <! ((e159'',),)    (1)
//│ | | | | | | | | | 2. C α83'' <! (e159'',)    (2)
//│ | | | | | | | | | | NEW α83'' UB (2)
//│ | | | | | | | | | | 2. C (#ev82_85'',) <! (e159'',)    (4)
//│ | | | | | | | | | | | 2. C #ev82_85'' <! e159''    (4)
//│ | | | | | | | | | | | | NEW #ev82_85'' UB (2)
//│ | | | | | | | | | | | | 2. C K[(A38_55' | ‘A57'')..(‘A57'' & A38_56')] <! e159''    (6)
//│ | | | | | | | | | | | | | NEW e159'' LB (2)
//│ | | | | | | | | | | | | | 2. C K[(A38_55' | ‘A57'')..(‘A57'' & A38_56')] <! K[? :> 'L51_68'' <: 'L51_69'']    (8)
//│ | | | | | | | | | | | | | | 2. C 'L51_68'' <! (A38_55' | ‘A57'')..(‘A57'' & A38_56')    (7)
//│ | | | | | | | | | | | | | | | 2. C 'L51_68'' <! (A38_55' | ‘A57'')    (9)
//│ | | | | | | | | | | | | | | | | NEW 'L51_68'' UB (2)
//│ | | | | | | | | | | | | | | | | 2. C (⊤(‘A63''') & A38_62'') <! (A38_55' | ‘A57'')    (11)
//│ | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧⊤(‘A63''')∧A38_62'')  <!  DNF(2, A38_55' | {}∧‘A57'')
//│ | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | 2. C A38_62'' <! ((A38_55' | ‘A57'') | ~(⊤(‘A63''')))    (13)
//│ | | | | | | | | | | | | | | | | | | | NEW A38_62'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | 2. C ⊤ <! ((A38_55' | ‘A57'') | ~(⊤(‘A63''')))    (15)
//│ | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, )  <!  DNF(2, A38_55' | {}∧‘A57'' | ~(⊤(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(2, A38_55' | {}∧‘A57'' | ~(⊤(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | Possible: List(A38_55', {}∧‘A57'', ~(⊤(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(A38_55', ‘A57'', ~(⊤(‘A63''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(‘A57'', ~(⊤(‘A63''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(~(⊤(‘A63''')))  %  ‘A57''
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List(⊤(‘A63'''))  <!  List()  %  ‘A57''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A63''')  %  List()  <!  List()  %  ‘A57''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A63''') & ~(‘A57'')) <! A38_55'    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (⊤(‘A63''') & ~(‘A57'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ⊤(‘A63''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘A57'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A57'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A57'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊥(‘A57''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => (⊤(‘A63''') & ~(⊥(‘A57'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A63''') & ~(⊥(‘A57'')))  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A63''') & ~(⊥(‘A57''))) <! A38_55'    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A38_55' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A63''') & ~(⊥(‘A57''))) <! A38_56'    (16)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A38_56' LB (0)
//│ | | | | | | | | | | | | | | 2. C (A38_55' | ‘A57'')..(‘A57'' & A38_56') <! 'L51_69''    (7)
//│ | | | | | | | | | | | | | | | 2. C (‘A57'' & A38_56') <! 'L51_69''    (9)
//│ | | | | | | | | | | | | | | | | NEW 'L51_69'' LB (2)
//│ | | | | | | | | | | | | | | | | 2. C (‘A57'' & A38_56') <! (A38_61'' | ⊥(‘A63'''))    (11)
//│ | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧‘A57''∧A38_56')  <!  DNF(2, A38_61'' | {}∧⊥(‘A63'''))
//│ | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | 2. C A38_56' <! ((A38_61'' | ⊥(‘A63''')) | ~(‘A57''))    (13)
//│ | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] ((A38_61'' | ⊥(‘A63''')) | ~(‘A57'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] (A38_61'' | ⊥(‘A63''')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] A38_61'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ⊥ || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A38_62'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ((A38_55' | ‘A57'') | ~(⊤(‘A63'''))) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] (A38_55' | ‘A57'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A38_55' || 1 .. 1024  1 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | => A38_55'
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A57'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A57'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | => (A38_55' | ⊥(‘A57''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(⊤(‘A63''')) || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A63'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | => ((A38_55' | ⊥(‘A57'')) | ~(⊤(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | | => A38_90'
//│ | | | | | | | | | | | | | | | | | | | | | => A38_89'
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ⊥(‘A63''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | => (A38_89' | ⊥(‘A63'''))
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(‘A57'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A57'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A57'')
//│ | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A57''))
//│ | | | | | | | | | | | | | | | | | | | => ((A38_89' | ⊥(‘A63''')) | ~(⊤(‘A57'')))
//│ | | | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | | | Reconstraining A38_89'
//│ | | | | | | | | | | | | | | | | | | | | Reconstraining A38_90'
//│ | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  ((A38_89' | ⊥(‘A63''')) | ~(⊤(‘A57'')))  to 1
//│ | | | | | | | | | | | | | | | | | | |  where 
//│ 		A38_55' :> (⊤(‘A63''') & ~(⊥(‘A57''))) <: A38_56'
//│ 		A38_56' :> (⊤(‘A63''') & ~(⊥(‘A57'')))
//│ 		A38_89' <: ⊥ & A38_90'
//│ 		A38_90' <: ((A38_55' | ⊥(‘A57'')) | ~(⊤(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | 2. C A38_56' <! ((A38_89' | ⊥(‘A63''')) | ~(⊤(‘A57'')))    (15)
//│ | | | | | | | | | | | | | | | | | | | | NEW A38_56' UB (1)
//│ | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A63''') & ~(⊥(‘A57''))) <! ((A38_89' | ⊥(‘A63''')) | ~(⊤(‘A57'')))    (18)
//│ | | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, {}∧⊤(‘A63''')∧~(⊥(‘A57'')))  <!  DNF(1, A38_89' | {}∧⊥(‘A63''') | ~(⊤(‘A57'')))
//│ | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | DNF finished with same type at both sides
//│ | | | | | | | | | | | | | | | | 2. C (‘A57'' & A38_56') <! 'L51_68''    (11)
//│ | | | | | | | | | | | | | | | | | NEW 'L51_68'' LB (2)
//│ | | | | | | | | | | | | | | | | | 2. C (‘A57'' & A38_56') <! (A38_55' | ‘A57'')    (13)
//│ | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | 2. C (α64'' | #0<Int,Num,Object>) <! α88''    (1)
//│ | | | | | | | | | NEW α88'' LB (2)
//│ | | | | | | 2. : α88''
//│ | | | | | | CONSTRAIN α88'' <! α58'
//│ | | | | | |   where 
//│ 		α64'' :> Int
//│ 		α88'' :> (α64'' | #0<Int,Num,Object>)
//│ | | | | | | 2. C α88'' <! α58'    (0)
//│ | | | | | | | NEW α88'' UB (1)
//│ | | | | | | | 2. C (α64'' | #0<Int,Num,Object>) <! α58'    (2)
//│ | | | | | | | | wrong level: 2
//│ | | | | | | | | EXTR[+] (α64'' | #0<Int,Num,Object>) || 1 .. 1024  2 false
//│ | | | | | | | | | EXTR[+] α64'' || 1 .. 1024  2 false
//│ | | | | | | | | | | EXTR[+] Int || 1 .. 1024  0 true
//│ | | | | | | | | | | => Int
//│ | | | | | | | | | => α64_91'
//│ | | | | | | | | | EXTR[+] #0<Int,Num,Object> || 1 .. 1024  0 true
//│ | | | | | | | | | => #0<Int,Num,Object>
//│ | | | | | | | | => (α64_91' | #0<Int,Num,Object>)
//│ | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | Reconstraining α64_91'
//│ | | | | | | | | EXTR LHS  ~>  (α64_91' | #0<Int,Num,Object>)  to 1
//│ | | | | | | | |  where 
//│ 		α64_91' :> Int
//│ | | | | | | | | 2. C (α64_91' | #0<Int,Num,Object>) <! α58'    (4)
//│ | | | | | | | | | NEW α58' LB (1)
//│ | | | | | | 1. Typing term 0
//│ | | | | | | 1. : #0<Int,Num,Object>
//│ | | | | | | finishing branch: [(#KS<Object,K>,{KS#A: mut A38_55'..A38_56'})] + List((α92',⊤)) and [α58'] | #0<Int,Num,Object>
//│ | | | | | | finishing case K[‘L53'] <: ((#KS<Object,K> & {KS#A: mut A38_55'..A38_56'}) | (α92' & ~(#KS<Object,K>)))
//│ | | | | | | CONSTRAIN K[‘L53'] <! ((#KS<Object,K> & {KS#A: mut A38_55'..A38_56'}) | (α92' & ~(#KS<Object,K>)))
//│ | | | | | |   where 
//│ 		A38_55' :> (⊤(‘A63''') & ~(⊥(‘A57''))) <: A38_56'
//│ 		A38_56' :> (⊤(‘A63''') & ~(⊥(‘A57''))) <: ((A38_89' | ⊥(‘A63''')) | ~(⊤(‘A57'')))
//│ 		A38_89' <: ⊥ & A38_90'
//│ 		A38_90' <: ((A38_55' | ⊥(‘A57'')) | ~(⊤(‘A63''')))
//│ | | | | | | 1. C K[‘L53'] <! ((#KS<Object,K> & {KS#A: mut A38_55'..A38_56'}) | (α92' & ~(#KS<Object,K>)))    (0)
//│ | | | | | | | Assigning T :: T35' := ‘L53' where 
//│ | | | | | | | Set T35_93' ~> T35'
//│ | | | | | | | Assigned Some(‘L53')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L53'..‘L53'}) <! ((#KS<Object,K> & {KS#A: mut A38_55'..A38_56'}) | (α92' & ~(#KS<Object,K>)))    (2)
//│ | | | | | | | | Assigning A :: A38' := ? :> ⊥ <: ⊤
//│ | | | | | | | | Set A38_94 ~> A38'
//│ | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'})  <!  DNF(1, #KS<Object,K>{KS#A: mut A38_55'..A38_56'} | α92'∧~(#KS<Object,K>))
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'} <: DNF(1, #KS<Object,K>{KS#A: mut A38_55'..A38_56'} | α92'∧~(#KS<Object,K>))
//│ | | | | | | | | | Possible: List(#KS<Object,K>{KS#A: mut A38_55'..A38_56'})
//│ | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List((#KS<Object,K> & {KS#A: mut A38_55'..A38_56'}))  %  ⊥
//│ | | | | | | | | | | Case.1
//│ | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List(#KS<Object,K>)  %  ⊥
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  #KS<Object,K>
//│ | | | | | | | | | | | | class checking #KS<Object,K> List(#KS<Object,K>)
//│ | | | | | | | | | | | | OK  #KS<Object,K>  <:  #KS<Object,K>
//│ | | | | | | | | | | Case.2
//│ | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List({KS#A: mut A38_55'..A38_56'})  %  ⊥
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  {KS#A:mut A38_55'..A38_56'}
//│ | | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L53'..‘L53'}  %  List()  <!  List()  %  |{KS#A:mut A38_55'..A38_56'}
//│ | | | | | | | | | | | | | Looking up field KS#A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | Lookup KS.KS#A : Some(mut A38'..A38') where 
//│ | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | Fresh[0] KS.KS#A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | 1. C ⊥..⊤ <! A38_56'    (2)
//│ | | | | | | | | | | | | | | 1. C ⊤ <! A38_56'    (4)
//│ | | | | | | | | | | | | | | | NEW A38_56' LB (0)
//│ | | | | | | | | | | | | | | | 1. C ⊤ <! ((A38_89' | ⊥(‘A63''')) | ~(⊤(‘A57'')))    (6)
//│ | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, )  <!  DNF(1, A38_89' | {}∧⊥(‘A63''') | ~(⊤(‘A57'')))
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(1, A38_89' | {}∧⊥(‘A63''') | ~(⊤(‘A57'')))
//│ | | | | | | | | | | | | | | | | | Possible: List(A38_89', {}∧⊥(‘A63'''), ~(⊤(‘A57'')))
//│ | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(A38_89', ⊥(‘A63'''), ~(⊤(‘A57'')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(⊥(‘A63'''), ~(⊤(‘A57'')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(~(⊤(‘A57'')))  %  ⊥(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List(⊤(‘A57''))  <!  List()  %  ⊥(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A57'')  %  List()  <!  List()  %  ⊥(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | | | 1. C (⊤(‘A57'') & ~(⊥(‘A63'''))) <! A38_89'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW A38_89' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | 1. C (⊤(‘A57'') & ~(⊥(‘A63'''))) <! ⊥    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A57'')∧~(⊥(‘A63''')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A57'') <: DNF(0, {}∧⊥(‘A63'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A63'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A57'')  %  List()  <!  List(⊥(‘A63'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A57'')  %  List()  <!  List()  %  ⊥(‘A63''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A57'')) List(⊥(‘A63'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A57'') & ~(⊥(‘A63'''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A57'') & ~(⊥(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A57'') & ~(⊥(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A57'')∧~(⊥(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A57'') & ~(⊥(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! (α58' | #0<Int,Num,Object>)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α58' :> (α64_91' | #0<Int,Num,Object>)
//│ 		α64_91' :> Int
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 1. C #error<> <! (α58' | #0<Int,Num,Object>)    (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.21: 	  if l is KS(e1) and r is KS(e2) then fr(e1, e2) else 0
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~??A0` does not match type `nothing`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | | | | | | | | | | | | | | | | 1. C (⊤(‘A57'') & ~(⊥(‘A63'''))) <! A38_90'    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | NEW A38_90' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 1. C (⊤(‘A57'') & ~(⊥(‘A63'''))) <! ((A38_55' | ⊥(‘A57'')) | ~(⊤(‘A63''')))    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A57'')∧~(⊥(‘A63''')))  <!  DNF(1, A38_55' | {}∧⊥(‘A57'') | ~(⊤(‘A63''')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | DNF finished with same type at both sides
//│ | | | | | | | | | | | | | 1. C A38_55' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | 1. C A38_55' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | NEW A38_55' UB (0)
//│ | | | | | | | | | | | | | | | 1. C (⊤(‘A63''') & ~(⊥(‘A57''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A63''')∧~(⊥(‘A57'')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A63''') <: DNF(0, {}∧⊥(‘A57''))
//│ | | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A57''))
//│ | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A63''')  %  List()  <!  List(⊥(‘A57''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A63''')  %  List()  <!  List()  %  ⊥(‘A57'')
//│ | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A63''')) List(⊥(‘A57''))
//│ | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A63''') & ~(⊥(‘A57''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A63''') & ~(⊥(‘A57'')))
//│ | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A63''') & ~(⊥(‘A57'')))
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A63''')∧~(⊥(‘A57'')))
//│ | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A63''') & ~(⊥(‘A57'')))
//│ | | | | | 1. : (α58' | #0<Int,Num,Object>)
//│ | | | | 1. : (α58' | #0<Int,Num,Object>)
//│ | | | 1. : (α58' | #0<Int,Num,Object>)
//│ | | 1. : ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))
//│ | | CONSTRAIN ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>)) <! fr99'
//│ | |   where 
//│ 		α58' :> (α64_91' | #0<Int,Num,Object>)
//│ 		α64_91' :> Int
//│ | | 1. C ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>)) <! fr99'    (0)
//│ | | | NEW fr99' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0)))))))),((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))) where 
//│ 		α58' :> (α64_91' | #0<Int,Num,Object>)
//│ 		α64_91' :> Int
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))› <! ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)››
//│ |   where 
//│ 		α58' :> (α64_91' | #0<Int,Num,Object>)
//│ 		α64_91' :> Int
//│ | 0. C ‹∀ 0. ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))› <! ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)››    (0)
//│ | | BUMP TO LEVEL 1  -->  ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›
//│ | | where 
//│ | | 1. C ‹∀ 0. ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))› <! ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›    (2)
//│ | | | New skolem: 'L51' ~> ‘L100''
//│ | | | BUMP TO LEVEL 2  -->  ((K[‘L100''], K[‘L100''],) -> Int)
//│ | | | where 
//│ | | | 2. C ‹∀ 0. ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))› <! ((K[‘L100''], K[‘L100''],) -> Int)    (4)
//│ | | | | INST [0]   ‹∀ 0. ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))›
//│ | | | |   where  
//│ 		α58' :> (α64_91' | #0<Int,Num,Object>)
//│ 		α64_91' :> Int
//│ | | | | TO [2] ~>  ((l: K[L53_101''], r: K[L53_101''],) -> (α58_102'' | #0<Int,Num,Object>))
//│ | | | |   where  
//│ 		α58_102'' :> (α64_103'' | #0<Int,Num,Object>)
//│ 		α64_103'' :> Int
//│ | | | | 2. C ((l: K[L53_101''], r: K[L53_101''],) -> (α58_102'' | #0<Int,Num,Object>)) <! ((K[‘L100''], K[‘L100''],) -> Int)    (6)
//│ | | | | | 2. C (K[‘L100''], K[‘L100''],) <! (l: K[L53_101''], r: K[L53_101''],)    (4)
//│ | | | | | | 2. C K[‘L100''] <! K[L53_101'']    (5)
//│ | | | | | | | 2. C ‘L100'' <! L53_101''    (6)
//│ | | | | | | | | NEW L53_101'' LB (2)
//│ | | | | | | | 2. C L53_101'' <! ‘L100''    (6)
//│ | | | | | | | | NEW L53_101'' UB (2)
//│ | | | | | | | | 2. C ‘L100'' <! ‘L100''    (9)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 2. C K[‘L100''] <! K[L53_101'']    (5)
//│ | | | | | | | Cached!
//│ | | | | | 2. C (α58_102'' | #0<Int,Num,Object>) <! Int    (4)
//│ | | | | | | 2. C α58_102'' <! Int    (7)
//│ | | | | | | | NEW α58_102'' UB (0)
//│ | | | | | | | 2. C (α64_103'' | #0<Int,Num,Object>) <! Int    (10)
//│ | | | | | | | | 2. C α64_103'' <! Int    (13)
//│ | | | | | | | | | NEW α64_103'' UB (0)
//│ | | | | | | | | | 2. C Int <! Int    (16)
//│ | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | 2. C #0<Int,Num,Object> <! Int    (13)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 2. C #0<Int,Num,Object> <! Int    (7)
//│ | | | | | | | Already a subtype by <:<
//│ | | | UNSTASHING...
//│ | | UNSTASHING...
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›› <! ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)››
//│ |   where 
//│ | 0. C ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›› <! ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)››    (0)
//│ | | Already a subtype by <:<
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun fr: ‹∀ 0. ((l: K[‘L53'], r: K[‘L53'],) -> (α58' | #0<Int,Num,Object>))› where 
//│ |		α58' :> (α64_91' | #0<Int,Num,Object>)
//│ |		α64_91' :> Int
//│ fun fr: ‹∀ 0. ‹∀ 0. ((K['L51'], K['L51'],) -> Int)›› where 
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

:e
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(l, e2) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.760: 	  if l is KS(e1) and r is KS(e2) then fr(l, e2) else 0
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `S[in A & ?A out ?A0 | A] | L | ~??A`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.758: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	           ^^
//│ ╟── from type variable:
//│ ║  l.758: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	                  ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

// FIXME
:e
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(e1, r) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.781: 	  if l is KS(e1) and r is KS(e2) then fr(e1, r) else 0
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~L` is not an instance of type `S`
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ║        	                                ^^^^
//│ ╟── Note: type parameter T is defined at:
//│ ║  l.13: 	abstract class K[type T]: KS[?]
//│ ╙──      	                      ^
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

fun fk: (K['L], K['L]) -> Int
fun fk[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fk((e1 : K[e1.T]), (e2 : K[e2.T])) else 0
//│ fun fk: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fk: forall 'L0. (K['L0], K['L0]) -> Int

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then 
    let xw: K[eb.T] = ea : K[ea.T]; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0

:re
fk((error : K[S[S[nothing]]]), (error : K[S[S[nothing]]]))
//│ Int
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.815: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `S[nothing]` does not match type `nothing`
//│ ║  l.815: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ║         	                ^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.815: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ╙──       	                                            ^^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

// * with alt

abstract class K[type T]: KZ | KS[?]
class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?] | KZ
//│ class KZ() extends K
//│ class KS[A](ev: K[A]) extends K

fun get[A](x: K[S[A]]): K[A] = if x is KS(m) then m : K[x.T.P] else error
//│ fun get: forall 'A. (x: K[S['A]]) -> K['A]

fun fk: (K['L], K['L]) -> Int
fun fk[L](l: K[L], r: K[L]): Int =
  if l is KS(ep) and r is KS(eq) then 1 + fk(ep, eq) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.844: 	  if l is KS(ep) and r is KS(eq) then 1 + fk(ep, eq) else 0
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~??A0` does not match type `nothing`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.834: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ fun fk: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fk: forall 'L0. (K['L0], K['L0]) -> Int

fk(KS(KS(KZ())), KS(KS(KZ())))
//│ Int
//│ res
//│     = 2

:e
fk(KS(KS(KZ())), KS(KZ()))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.862: 	fk(KS(KS(KZ())), KS(KZ()))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?A]`
//│ ║  l.833: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.834: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ║         	                                     ^^^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.834: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ Int | error
//│ res
//│     = 1

fun fi[L](x: K[L]): K[L] = if x is 
    KZ() then KZ() : K[x.T]
    KS(ea) then KS(ea) : K[x.T]
//│ fun fi: forall 'L. (x: K['L]) -> K['L]

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[ea.T] = ea ; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0

fun fz[L](l: KS[L], r: KS[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[eb.T] = ea : K[ea.T] ; 0
  else 0
//│ fun fz: forall 'L. (l: KS['L], r: KS['L]) -> 0

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt = ea : K[eb.T] ; 0
  else error
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.897: 	  if l is KS(ea) and r is KS(eb) then
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.898: 	    let zt = ea : K[eb.T] ; 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.899: 	  else error
//│ ║         	^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Z & ~??A0` does not match type `nothing`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.834: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> (0 | error)

fun fz[L](l: K[L], r: K[L]): K[L] =
  if l is KS(ea) and r is KS(eb) 
    then (KS(eb) : K[r.T]) : K[l.T]
    else error
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> K['L]

abstract class Eq[type A, type B]: Refl[A]
class Refl[A]() extends Eq[A, A]
//│ abstract class Eq[A, B]: Refl[A]
//│ class Refl[A]() extends Eq

fun conv[L, A](x: K[L], ev: Eq[L, S[A]]): K[S[A]] =
  if ev is Refl() then (x as K[ev.A]) as K[ev.B]
//│ fun conv: forall 'L 'A. (x: K['L], ev: Eq['L, S['A]]) -> K[S['A]]

conv(KS(KZ()), Refl())
//│ K[S[Z]]
//│ res
//│     = KS {}

:e
conv(KZ(), Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.935: 	conv(KZ(), Refl())
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?A]`
//│ ║  l.833: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.925: 	fun conv[L, A](x: K[L], ev: Eq[L, S[A]]): K[S[A]] =
//│ ╙──       	                                  ^^^^
//│ K[S['A]] | error
//│ res
//│     = KZ {}

fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] =
  let y: K[S[ev.B.P]] = x : K[ev.B]
  if y is KS(m) then m : K[y.T.P] else error
//│ fun extr: forall 'L 'H. (x: K['L], ev: Eq['L, S['H]]) -> K['H]

fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] = get(x : K[ev.B])
//│ fun extr: forall 'L 'H. (x: K['L], ev: Eq['L, S['H]]) -> K['H]

extr(KS(KZ()), Refl())
//│ K[Z]
//│ res
//│     = KZ {}

:e
extr(KZ(), Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.963: 	extr(KZ(), Refl())
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?H]`
//│ ║  l.833: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.954: 	fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] = get(x : K[ev.B])
//│ ╙──       	                                  ^^^^
//│ K['H] | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

abstract class K[type T]: (KZ | KS[?]) {
  fun m: Eq[T, S['A]] -> Int
  fun m(ev) = if ev is Refl() then 0
  fun n: T -> T
  fun n(x) = x
}
class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?] | KZ {
//│   fun m: forall 'A. Eq[T, S['A]] -> Int
//│   fun n: T -> T
//│ }
//│ class KZ() extends K {
//│   fun m: forall 'A0. Eq['T, S['A0]] -> Int
//│   fun n: 'T -> 'T
//│ }
//│ class KS[A](ev: K[A]) extends K {
//│   fun m: forall 'A1. Eq['T0, S['A1]] -> Int
//│   fun n: 'T0 -> 'T0
//│ }
//│ where
//│   'T0 := S[A]
//│   'T := Z

KS(KZ()).n(new S : S[Z])
KZ().n(new Z)
//│ Z
//│ res
//│     = S {}
//│ res
//│     = Z {}

:e
KS(KZ()).n(new Z)
KZ().n(new S : S[Z])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1011: 	KS(KZ()).n(new Z)
//│ ║          	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Z` is not an instance of `S[?A]`
//│ ║  l.1011: 	KS(KZ()).n(new Z)
//│ ║          	               ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.985: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ║         	                                     ^^^^
//│ ╟── Note: type parameter T is defined at:
//│ ║  l.978: 	abstract class K[type T]: (KZ | KS[?]) {
//│ ╙──       	                      ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1012: 	KZ().n(new S : S[Z])
//│ ║          	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `S[Z]` is not an instance of `Z`
//│ ║  l.1012: 	KZ().n(new S : S[Z])
//│ ║          	               ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.984: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: type parameter T is defined at:
//│ ║  l.978: 	abstract class K[type T]: (KZ | KS[?]) {
//│ ╙──       	                      ^
//│ Z | error
//│ res
//│     = Z {}
//│ res
//│     = S {}

KS(KZ()).m(Refl())
//│ Int
//│ res
//│     = 0

:e
KZ().m(Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1049: 	KZ().m(Refl())
//│ ║          	^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S['A]`
//│ ║  l.984: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.979: 	  fun m: Eq[T, S['A]] -> Int
//│ ╙──       	               ^^^^^
//│ Int | error
//│ res
//│     = 0

class C[type A]()
//│ class C[A]()

fun test(k) =
  let f(x) = let c = C() in [k(c), c]
  f
//│ fun test: forall 'A 'A0 'a. (C[in 'A out 'A | 'A0] -> 'a) -> (forall 'A1. anything -> ['a, C['A1]])
//│   where
//│     'A1 :> 'A
//│         <: 'A0

class C[A, in B, out C]() { fun f: [A, B] -> [A, C] = f }
//│ class C[A, B, C]() {
//│   fun f: (A, B) -> [A, C]
//│ }

fun test(k) =
  let f(x) = let c = C() in [k(c), c]
  f
//│ fun test: forall 'A 'A0 'a. (C[in 'A out 'A | 'A0, anything, nothing] -> 'a) -> (forall 'A1. anything -> ['a, C['A1, anything, nothing]])
//│   where
//│     'A1 :> 'A
//│         <: 'A0


