:NewDefs

// natural numbers for index //

class Z
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }

// sized list //

abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
class Nil[T] extends Vec[Z, T]
class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.18: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `L` is not an instance of type `S`
//│ ║  l.18: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	           ^
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.18: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `S[?]` does not match type `L`
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ║        	                                                  ^
//│ ╟── Note: constraint arises from type parameter:
//│ ║  l.18: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ╙──      	           ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ abstract class Vec[L, T]: Cons[in S[in anything out nothing] out S[?], T] | Nil[T]
//│ class Nil[T] extends Vec {
//│   constructor()
//│ }
//│ class Cons[L, T](h: T, t: Vec[L, T]) extends Vec

// functions //

fun head[T](xs: Vec[S['l], T]): T =
    if xs is Cons(h, t) then h : xs.T else error
//│ fun head: forall 'l 'T. (xs: Vec[S['l], 'T]) -> 'T

fun tail[L, T](xs: Vec[S[L], T]): Vec[L, T] =
    if xs is Cons(h, t) then t : Vec[xs.L.P, xs.T] else error
//│ fun tail: forall 'L 'T. (xs: Vec[S['L], 'T]) -> Vec['L, 'T]

fun len: Vec['l, 'a] -> Int
fun len(xs: Vec['l, 'a]) = if xs is
    Nil then 0
    Cons(h, t) then 1 + len(t : Vec[xs.L.P, xs.T])
//│ fun len: forall 'l 'P 'a. (xs: Vec['l, 'a]) -> Int
//│ fun len: forall 'a0 'l0. Vec['l0, 'a0] -> Int
//│ where
//│   'l <: {P :> S[?] & ??L | 'P <: 'P & (S[in anything out nothing] | ??L0)} | ~(S[in S[in anything out nothing] | ??L out S[?] & ??L0] & {P :> S[in anything out nothing] | ??L <: S[?] & ??L0})

fun map: ('A -> 'B, Vec['L, 'A]) -> Vec['L, 'B]
fun map[B](f, xs: Vec['L, 'A]) = if xs is
    Nil then new Nil : Vec[xs.L, B]
    Cons(h, t) then Cons(f(h), map(f, t)) : Vec[xs.L, B]
//│ fun map: forall 'T 'B 'L. ((??T & 'T) -> 'B, xs: Vec['L, 'T]) -> Vec[in S[in S[in anything out nothing] | ??L out S[?] & ??L0] | 'L out 'L & (S[in S[in anything out nothing] | ??L out S[?] & ??L0] | Z), 'B]
//│ fun map: forall 'A 'B0 'L0. ('A -> 'B0, Vec['L0, 'A]) -> Vec['L0, 'B0]
//│ where
//│   'L <: S[in S[in anything out nothing] out S[?]] & {P :> S[?] <: S[in anything out nothing]} | S[in anything out nothing] & ~{P :> S[?] | ??L0 <: S[in anything out nothing] & ??L} | ~(S[in S[in anything out nothing] | ??L0 out S[?] & ??L] & {P :> S[in anything out nothing] | ??L0 <: S[?] & ??L})

fun zip: (Vec['L, 'A], Vec['L, 'B]) -> Vec['L, ['A, 'B]]
fun zip[L, A, B](xs: Vec[L, A], ys: Vec[L, B]) = 
    if xs is Nil and ys is Nil then new Nil : Vec[xs.L, [A, B]]
    else if xs is Cons(x, tx) and ys is Cons(y, ty) then 
        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
    else error
//│ fun zip: forall 'L 'A 'B. (xs: Vec['L, 'A], ys: Vec['L, 'B]) -> Vec[in S[in S[in anything out nothing] | ??L out S[?] & ??L0] | 'L out 'L & (S[in S[in anything out nothing] | ??L out S[?] & ??L0] | Z), ['A, 'B]]
//│ fun zip: forall 'L0 'A0 'B0. (Vec['L0, 'A0], Vec['L0, 'B0]) -> Vec['L0, ['A0, 'B0]]

fun sum: Vec['l, Int] -> Int
fun sum(xs) = if xs is
    Nil then 0
    Cons(h, t) then h + sum(t)
//│ fun sum: (Cons[in anything out nothing, in Int | ~??T out Int & ~??T0] | Nil[in anything out nothing]) -> Int
//│ fun sum: forall 'l. Vec['l, Int] -> Int

// construct lisp style list lol
// fun toList: (Vec['l, 'a]) -> (['a, 'xs] as 'xs)
fun toList: (((Vec['l, 'a]) -> 'xs) where ['a, 'xs] | [] : 'xs)
fun toList(xs) = if xs is
    Nil then []
    Cons(h, t) then [h, toList(t)]
//│ fun toList: forall 'T. (Cons[in anything out nothing, in 'T out nothing] | Nil[in anything out nothing]) -> Array[forall 'xs. 'xs | ??T & 'T]
//│ fun toList: forall 'l 'a 'xs0. Vec['l, 'a] -> 'xs0
//│ where
//│   'xs0 :> Array['a | 'xs0]
//│   'xs :> Array['xs | ??T & 'T]

:e
head(new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.102: 	head(new Nil)
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S['l]`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.47: 	fun head[T](xs: Vec[S['l], T]): T =
//│ ╙──      	                    ^^^^^
//│ error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
tail(new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.118: 	tail(new Nil)
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?L]`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.51: 	fun tail[L, T](xs: Vec[S[L], T]): Vec[L, T] =
//│ ╙──      	                       ^^^^
//│ Vec['L, 'T] | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

head(Cons(1, Cons(2, new Nil)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.133: 	head(Cons(1, Cons(2, new Nil)))
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `S`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ ╔══[ERROR] Type error in application
//│ ║  l.133: 	head(Cons(1, Cons(2, new Nil)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `P` leaks out of its scope
//│ ║  l.6: 	class S[type P]
//│ ║       	             ^
//│ ╟── into type `S[in anything out nothing]`
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ error
//│ res
//│     = 1

tail(Cons(1, Cons(2, new Nil)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.158: 	tail(Cons(1, Cons(2, new Nil)))
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `S`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ ╔══[ERROR] Type error in application
//│ ║  l.158: 	tail(Cons(1, Cons(2, new Nil)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `P` leaks out of its scope
//│ ║  l.6: 	class S[type P]
//│ ║       	             ^
//│ ╟── into type `S[in anything out nothing]`
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ error
//│ res
//│     = Cons {}

len(new Nil)
//│ Int
//│ res
//│     = 0

len(Cons(1, Cons(2, new Nil)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.188: 	len(Cons(1, Cons(2, new Nil)))
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `S`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ ╔══[ERROR] Type error in application
//│ ║  l.188: 	len(Cons(1, Cons(2, new Nil)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `P` leaks out of its scope
//│ ║  l.6: 	class S[type P]
//│ ║       	             ^
//│ ╟── into type `S[in anything out nothing]`
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ error
//│ res
//│     = 2

:e
zip(Cons(1, new Nil), new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.214: 	zip(Cons(1, new Nil), new Nil)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `S`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

zip(Cons(1, new Nil), Cons(2, new Nil))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.229: 	zip(Cons(1, new Nil), Cons(2, new Nil))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `S`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ Vec[S['L], ['A, 'B]] | error
//│   where
//│     'B :> 2
//│     'A :> 1
//│     'L :> S[?] | Z
//│        <: nothing
//│ res
//│     = Cons {}

let vec1 = Cons(1, Cons(2, Cons(3, new Nil)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.249: 	let vec1 = Cons(1, Cons(2, Cons(3, new Nil)))
//│ ║         	                   ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `S`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ ╔══[ERROR] Type error in application
//│ ║  l.249: 	let vec1 = Cons(1, Cons(2, Cons(3, new Nil)))
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `P` leaks out of its scope
//│ ║  l.6: 	class S[type P]
//│ ║       	             ^
//│ ╟── into type `S[in anything out nothing]`
//│ ║  l.16: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ let vec1: error
//│ vec1
//│      = Cons {}

vec1 : Vec['l, Int]
//│ Vec['l, Int]
//│ res
//│     = Cons {}

:e
vec1 : Vec[Z, Int]
//│ Vec[Z, Int]
//│ res
//│     = Cons {}
//│ TEST CASE FAILURE: There was an unexpected lack of type error

map(x => x * 2, vec1)
//│ Vec['L, 'B]
//│   where
//│     'B :> Int
//│ res
//│     = Cons {}

sum(vec1)
//│ Int
//│ res
//│     = 6

toList(vec1)
//│ forall 'xs. 'xs
//│   where
//│     'xs :> Array['xs]
//│ res
//│     = [ 1, [ 2, [ 3, [] ] ] ]
