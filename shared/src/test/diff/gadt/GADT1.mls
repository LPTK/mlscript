:NewDefs

// natural numbers for index //

class Z
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }

// sized list //

abstract class Vec[type L, type T]: Nil[T] | Cons[?, T]
class Nil[T] extends Vec[Z, T]
class Cons[H, T](val h: T, val t: Vec[H, T]) extends Vec[S[H], T]
//│ abstract class Vec[L, T]: Cons[?, T] | Nil[T]
//│ class Nil[T] extends Vec {
//│   constructor()
//│ }
//│ class Cons[H, T](h: T, t: Vec[H, T]) extends Vec

// functions //

fun head[T](xs: Vec[S['l], T]): T =
    if xs is Cons(h, t) then h : xs.T else error
//│ fun head: forall 'l 'T. (xs: Vec[S['l], 'T]) -> 'T

fun tail[L, T](xs: Vec[S[L], T]): Vec[L, T] =
    if xs is Cons(h, t) then t : Vec[xs.L.P, xs.T] else error
//│ fun tail: forall 'L 'T. (xs: Vec[S['L], 'T]) -> Vec['L, 'T]

fun len: Vec['l, 'a] -> Int
fun len(xs: Vec['l, 'a]) = if xs is
    Nil then 0
    Cons(h, t) then 1 + len(t : Vec[xs.L.P, xs.T])
//│ fun len: forall 'l 'P 'a. (xs: Vec['l, 'a]) -> Int
//│ fun len: forall 'l0 'a0. Vec['l0, 'a0] -> Int
//│ where
//│   'l <: {P :> 'P | ??H <: ??H0 & 'P} | ~S[in ??H0 out ??H]

fun map: ('A -> 'B, Vec['L, 'A]) -> Vec['L, 'B]
fun map[B](f, xs: Vec['L, 'A]) = if xs is
    Nil then new Nil : Vec[xs.L, B]
    Cons(h, t) then Cons(f(h), map(f, t)) : Vec[xs.L, B]
//│ fun map: forall 'T 'B 'L 'H. ((??T & 'T) -> 'B, xs: Vec['L, 'T]) -> Vec[in S[in ??H out ??H0] | 'L out 'L & (S[in ??H out ??H0] | Z), 'B]
//│ fun map: forall 'A 'B0 'L0. ('A -> 'B0, Vec['L0, 'A]) -> Vec['L0, 'B0]
//│ where
//│   'L <: S[in 'H | ??H0 out ??H & 'H] | S[?] & ~{P :> ??H <: ??H0} | ~S[in ??H out ??H0]

// FIXME
fun zip: (Vec['L, 'A], Vec['L, 'B]) -> Vec['L, ['A, 'B]]
fun zip[L, A, B](xs: Vec[L, A], ys: Vec[L, B]) = 
    if xs is Nil and ys is Nil then new Nil : Vec[xs.L, [A, B]]
    else if xs is Cons(x, tx) and ys is Cons(y, ty) then 
        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
    else error
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.56: 	    if xs is Nil and ys is Nil then new Nil : Vec[xs.L, [A, B]]
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	    else if xs is Cons(x, tx) and ys is Cons(y, ty) then 
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.59: 	    else error
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── expression of type `??H & ~??H0` does not match type `nothing`
//│ ╟── Note: type parameter H is defined at:
//│ ║  l.18: 	class Cons[H, T](val h: T, val t: Vec[H, T]) extends Vec[S[H], T]
//│ ╙──      	           ^
//│ fun zip: forall 'L 'A 'B. (xs: Vec['L, 'A], ys: Vec['L, 'B]) -> Vec[in S[in ??H out ??H0] | 'L out 'L & (S[in ??H out ??H0] | Z), ['A, 'B]]
//│ fun zip: forall 'L0 'A0 'B0. (Vec['L0, 'A0], Vec['L0, 'B0]) -> Vec['L0, ['A0, 'B0]]

fun sum: Vec['l, Int] -> Int
fun sum(xs) = if xs is
    Nil then 0
    Cons(h, t) then h + sum(t)
//│ fun sum: (Cons[?, in Int & ~??T out Int | ~??T0] | Nil[?]) -> Int
//│ fun sum: forall 'l. Vec['l, Int] -> Int

// construct lisp style list lol
// fun toList: (Vec['l, 'a]) -> (['a, 'xs] as 'xs)
fun toList: (((Vec['l, 'a]) -> 'xs) where ['a, 'xs] | [] : 'xs)
fun toList(xs) = if xs is
    Nil then []
    Cons(h, t) then [h, toList(t)]
//│ fun toList: forall 'T. (Cons[?, out 'T] | Nil[?]) -> Array[forall 'xs. 'xs | ??T & 'T]
//│ fun toList: forall 'l 'a 'xs0. Vec['l, 'a] -> 'xs0
//│ where
//│   'xs0 :> Array['a | 'xs0]
//│   'xs :> Array['xs | ??T & 'T]

:e
head(new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.96: 	head(new Nil)
//│ ║        	^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S['l]`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.27: 	fun head[T](xs: Vec[S['l], T]): T =
//│ ╙──      	                    ^^^^^
//│ error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
tail(new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.112: 	tail(new Nil)
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?L]`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.31: 	fun tail[L, T](xs: Vec[S[L], T]): Vec[L, T] =
//│ ╙──      	                       ^^^^
//│ Vec['L, 'T] | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

head(Cons(1, Cons(2, new Nil)))
//│ 1 | 2
//│ res
//│     = 1

tail(Cons(1, Cons(2, new Nil)))
//│ Vec[S[Z], 'T]
//│   where
//│     'T :> 1 | 2
//│ res
//│     = Cons {}

len(new Nil)
//│ Int
//│ res
//│     = 0

len(Cons(1, Cons(2, new Nil)))
//│ Int
//│ res
//│     = 2

:e
zip(Cons(1, new Nil), new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.150: 	zip(Cons(1, new Nil), new Nil)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?H]`
//│ ║  l.17: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.18: 	class Cons[H, T](val h: T, val t: Vec[H, T]) extends Vec[S[H], T]
//│ ║        	                                                         ^^^^
//│ ╟── from type variable:
//│ ║  l.54: 	fun zip: (Vec['L, 'A], Vec['L, 'B]) -> Vec['L, ['A, 'B]]
//│ ╙──      	                           ^^
//│ Vec[out S[Z] | Z, ['A, 'B]] | error
//│   where
//│     'A :> 1
//│ res
//│ Runtime error:
//│   Error: an error was thrown

zip(Cons(1, new Nil), Cons(2, new Nil))
//│ Vec[S[Z], ['A, 'B]]
//│   where
//│     'B :> 2
//│     'A :> 1
//│ res
//│     = Cons {}

let vec1 = Cons(1, Cons(2, Cons(3, new Nil)))
//│ let vec1: Cons[S[S[Z]], 'T]
//│   where
//│     'T :> 1 | 2 | 3
//│ vec1
//│      = Cons {}

vec1 : Vec['l, Int]
//│ Vec[S[S[S[Z]]], Int]
//│ res
//│     = Cons {}

:e
vec1 : Vec[Z, Int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.191: 	vec1 : Vec[Z, Int]
//│ ║         	^^^^
//│ ╟── type `S[?H]` is not an instance of `Z`
//│ ║  l.18: 	class Cons[H, T](val h: T, val t: Vec[H, T]) extends Vec[S[H], T]
//│ ║        	                                                         ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.191: 	vec1 : Vec[Z, Int]
//│ ╙──       	           ^
//│ Vec[Z, Int]
//│ res
//│     = Cons {}

map(x => x * 2, vec1)
//│ Vec[S[S[S[Z]]], 'B]
//│   where
//│     'B :> Int
//│ res
//│     = Cons {}

sum(vec1)
//│ Int
//│ res
//│     = 6

toList(vec1)
//│ forall 'xs. 'xs
//│   where
//│     'xs :> Array[Int | 'xs]
//│ res
//│     = [ 1, [ 2, [ 3, [] ] ] ]
