:NewDefs

class Foo[type T](val x: T)
//│ class Foo[T](x: T)

fun foo(f: Foo[?]) = 0
//│ fun foo: (f: Foo[?]) -> 0

foo(Foo(1))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.9: 	foo(Foo(1))
//│ ║       	^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `nothing`
//│ ║  l.9: 	foo(Foo(1))
//│ ║       	        ^
//│ ╟── Note: constraint arises from wildcard:
//│ ║  l.6: 	fun foo(f: Foo[?]) = 0
//│ ╙──     	               ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ 0 | error
//│ res
//│     = 0

fun foo(f: Foo[?]) = f.x
//│ fun foo: (f: Foo[?]) -> anything

foo(Foo(1))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.27: 	foo(Foo(1))
//│ ║        	^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `nothing`
//│ ║  l.27: 	foo(Foo(1))
//│ ║        	        ^
//│ ╟── Note: constraint arises from wildcard:
//│ ║  l.24: 	fun foo(f: Foo[?]) = f.x
//│ ╙──      	               ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ anything
//│ res
//│     = 1

fun foo(f: Foo[?]) = f.x as f.T
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.42: 	fun foo(f: Foo[?]) = f.x as f.T
//│ ║        	                     ^^^
//│ ╟── field selection of type `anything` does not match type `nothing`
//│ ╟── Note: constraint arises from type selection:
//│ ║  l.42: 	fun foo(f: Foo[?]) = f.x as f.T
//│ ╙──      	                             ^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ fun foo: (f: Foo[?]) -> anything

abstract class Bar[type A]: MkBarInt | MkBarBool | MkBarFoo[?]
class MkBarInt() extends Bar[Int]
class MkBarBool() extends Bar[Bool]
class MkBarFoo[A](ev: A) extends Bar[Foo[A]]
//│ abstract class Bar[A]: MkBarBool | MkBarFoo[?] | MkBarInt
//│ class MkBarInt() extends Bar
//│ class MkBarBool() extends Bar
//│ class MkBarFoo[A](ev: A) extends Bar

fun bar(b: Bar[?]) = if b is
    MkBarInt then 1
    MkBarBool then 2
    MkBarFoo then 3
//│ fun bar: (b: Bar[?]) -> (1 | 2 | 3)

bar(MkBarInt())
bar(MkBarFoo(Foo(1)))
//│ 1 | 2 | 3
//│ res
//│     = 1
//│ res
//│     = 3
