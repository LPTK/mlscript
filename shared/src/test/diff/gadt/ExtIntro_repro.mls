:NewDefs
:DontDistributeForalls

:NoJS



class Z 
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }



(x: S) => x as S[?]
//│ (x: S[?]) -> S[?]


class Foo[type A](val foo: Foo[A])
//│ class Foo[A](foo: Foo[A])


(x: Foo[?]) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x as Foo
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

:e
(x: Foo) => x.foo as x.A
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.43: 	(x: Foo) => x.foo as x.A
//│ ║        	            ^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	                           ^^^^^^
//│ (x: Foo[?]) -> ??A

:e
(x: Foo[?]) => x.foo as x.A
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── type `Foo[?]` does not match type `nothing`
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ║        	                           ^^^^^^
//│ ╟── but it flows into field selection with expected type `nothing`
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── Note: constraint arises from type selection:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ╙──      	                         ^^
//│ (x: Foo[?]) -> anything

:e
(x: Foo) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.69: 	(x: Foo) => if x is
//│ ║        	               ^^^^
//│ ║  l.70: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.71: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	               ^
//│ (x: Foo[?]) -> (error | ??A & ??A0)

:e
(x: Foo[?]) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.85: 	(x: Foo[?]) => if x is
//│ ║        	                  ^^^^
//│ ║  l.86: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.87: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╙── expression of type `Foo[in ??A out ??A0 & ?A] & ~??A` does not match type `nothing`
//│ (x: Foo[?]) -> ??A



fun fz(l) =
  if l is Foo(ea) and 0 is 0 then
    ea : Foo[ea.A]
//│ fun fz: forall 'A 'A0. Foo[in 'A out 'A0] -> Foo[in 'A & 'A0 | ??A out ??A0 & 'A0]











// abstract class K[type T]: KZ | KS[?]
abstract class K[type T]: KS[?]
// class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?]
//│ class KS[A](ev: K[A]) extends K

:d

fun fz(l) =
  if l is KS(ea) then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A0 out 'A] -> K[in S[?] | 'A0 & 'A | ??A out ??A0 & 'A & S[?]]


// :d
fun fz(l) =
  if l is KS(ea) then
    () => ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> () -> K[in S[in anything out nothing] | 'A out S[?] & ??A & 'A0]
//│   where
//│     'A <: 'A0
//│     'A0 <: S[in anything out nothing] & ??A0 | 'A | ~??A

// :d
fun fz(l) =
  if l is KS(ea) and 0 is 0 then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A0 out 'A] -> K[in S[in anything out nothing] | 'A0 & 'A out S[?] & ??A & 'A]



fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[ea.T] = ea ; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0


// fun fr: (K['L], K['L]) -> Int

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.157: 	fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `L | ~??A`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ fun fr: forall 'L. (l: K['L]) -> (K['L] | error)

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[S['X]]
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

// :d
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K['X]
//│ fun fr: forall 'L 'X. (l: K['L]) -> K[in ??A & 'X out 'X | ??A0]




fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then [(e1 as K['X]), e2 as K['X]] else 0
//│ fun fr: forall 'X 'L 'X0. (l: K['L], r: K['L]) -> (0 | [K[in ??A & 'X0 out 'X0 | ??A0], K[in ??A1 & 'X out 'X | ??A2]])



// MIN

fun sig: (K['L], K['L]) -> Int
//│ fun sig: forall 'L. (K['L], K['L]) -> Int

:d
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))
//│ | Completing fun fr = (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | Type params (TypeName(L),L538',TypeParamInfo(None,false,None,None))
//│ | | Params 
//│ | | Type fr polymorphically? true && (0 === 0 || false || false
//│ | | 1. Typing term (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | 1. Typing pattern [l: K‹L›, r: K‹L›,]
//│ | | | | 1. Typing pattern l : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L538') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L538'
//│ | | | | | | => K[‘L538']
//│ | | | | | => K[‘L538'] ——— 
//│ | | | | 1. : K[‘L538']
//│ | | | | 1. Typing pattern r : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L538') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L538'
//│ | | | | | | => K[‘L538']
//│ | | | | | => K[‘L538'] ——— 
//│ | | | | 1. : K[‘L538']
//│ | | | 1. : (l: K[‘L538'], r: K[‘L538'],)
//│ | | | 1. Typing term {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | | 1. Typing term if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(l); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))
//│ | | | | | [Desugarer.destructPattern] Result: «l is Var(KS)»
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(r); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e2))))))
//│ | | | | | [Desugarer.destructPattern] Result: «r is Var(KS)»
//│ | | | | | Desugared term: case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | 1. Typing term case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | | 1. Typing term l
//│ | | | | | | 1. : K[‘L538']
//│ | | | | | | CONSTRAIN K[‘L538'] <! Object
//│ | | | | | |   where 
//│ | | | | | | 1. C K[‘L538'] <! Object    (0)
//│ | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | Set T157_539' ~> T157'
//│ | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L538'..‘L538'}) <! #Object<>    (2)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | Match arm KS: #KS<Object,K> & {A: mut A160_540'..A160_541'} intl {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}
//│ | | | | | | var rfn: l :: K[‘L538'] & #KS<Object,K> & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}
//│ | | | | | | 2. Typing term let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | 2. Typing term (KS).unapply(l,)
//│ | | | | | | | | 2. Typing term (KS).unapply
//│ | | | | | | | | | 2. Typing term (x::14,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | 3. Typing pattern [x::14,]
//│ | | | | | | | | | | | 3. Typing pattern x::14
//│ | | | | | | | | | | | 3. : x544'''
//│ | | | | | | | | | | 3. : (x544''',)
//│ | | | | | | | | | | 3. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | 3. Typing term x : KS
//│ | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | 3. : x544'''
//│ | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | vars=Map(L -> ‘L538') newDefsInfo=Map()
//│ | | | | | | | | | | | | | 3. type TypeName(KS)
//│ | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | CONSTRAIN x544''' <! #KS<Object,K>
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C x544''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | NEW x544''' UB (0)
//│ | | | | | | | | | | | 3. : #KS<Object,K>
//│ | | | | | | | | | | | 3. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | 3. Typing term (x).#ev
//│ | | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | | 3. : x544'''
//│ | | | | | | | | | | | | | CONSTRAIN x544''' <! {#ev: #ev545'''}
//│ | | | | | | | | | | | | |   where 
//│ 		x544''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | 3. C x544''' <! {#ev: #ev545'''}    (0)
//│ | | | | | | | | | | | | | | NEW x544''' UB (3)
//│ | | | | | | | | | | | | 3. : #ev545'''
//│ | | | | | | | | | | | 3. : (#ev545''',)
//│ | | | | | | | | | | 3. : (#ev545''',)
//│ | | | | | | | | | | Inferred poly constr: (x544''' -> (#ev545''',))  —— where 
//│ 		x544''' <: {#ev: #ev545'''} & #KS<Object,K>
//│ | | | | | | | | | 2. : ‹∀ 2. (x544''' -> (#ev545''',))›
//│ | | | | | | | | 2. : ‹∀ 2. (x544''' -> (#ev545''',))›
//│ | | | | | | | | 2. Typing term l
//│ | | | | | | | | 2. : ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')})
//│ | | | | | | | | CONSTRAIN ‹∀ 2. (x544''' -> (#ev545''',))› <! (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}) -> α546'')
//│ | | | | | | | |   where 
//│ 		A160_540' <: A160_541'
//│ 		x544''' <: {#ev: #ev545'''} & #KS<Object,K>
//│ | | | | | | | | 2. C ‹∀ 2. (x544''' -> (#ev545''',))› <! (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}) -> α546'')    (0)
//│ | | | | | | | | | INST [2]   ‹∀ 2. (x544''' -> (#ev545''',))›
//│ | | | | | | | | |   where  
//│ 		x544''' <: {#ev: #ev545'''} & #KS<Object,K>
//│ | | | | | | | | | TO [2] ~>  (x544_547'' -> (#ev545_548'',))
//│ | | | | | | | | |   where  
//│ 		x544_547'' <: {#ev: #ev545_548''} & #KS<Object,K>
//│ | | | | | | | | | 2. C (x544_547'' -> (#ev545_548'',)) <! (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}) -> α546'')    (2)
//│ | | | | | | | | | | 2. C (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}),) <! (x544_547'',)    (2)
//│ | | | | | | | | | | | 2. C ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}) <! x544_547''    (3)
//│ | | | | | | | | | | | | NEW x544_547'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}) <! {#ev: #ev545_548''}    (6)
//│ | | | | | | | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | | | | | | | Set T157_549' ~> T157'
//│ | | | | | | | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | Set A160_550 ~> A160'
//│ | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | 2. ARGH  DNF(2, #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_540' | ‘A542'')..(‘A542'' & A160_541')})  <!  DNF(2, {#ev: #ev545_548''})
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_540' | ‘A542'')..(‘A542'' & A160_541')} <: DNF(2, {#ev: #ev545_548''})
//│ | | | | | | | | | | | | | | Possible: List({#ev: #ev545_548''})
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_540' | ‘A542'')..(‘A542'' & A160_541')}  %  List()  <!  List({#ev: #ev545_548''})  %  ⊥
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_540' | ‘A542'')..(‘A542'' & A160_541')}  %  List()  <!  List()  %  {#ev:#ev545_548''}
//│ | | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_540' | ‘A542'')..(‘A542'' & A160_541')}  %  List()  <!  List()  %  |{#ev:#ev545_548''}
//│ | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A160']) where 
//│ | | | | | | | | | | | | | | | | | | Lookup: Found mut (A160_540' | ‘A542'')..(‘A542'' & A160_541')
//│ | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A160_540' | ‘A542'')..(‘A542'' & A160_541')]) where Some(
//│ 		A160_540' <: A160_541')
//│ | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | 2. C K[(A160_540' | ‘A542'')..(‘A542'' & A160_541')] <! #ev545_548''    (5)
//│ | | | | | | | | | | | | | | | | | | NEW #ev545_548'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_540' | ‘A542'')..(A160_541' & ‘A542'')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | 2. C (#ev545_548'',) <! α546''    (2)
//│ | | | | | | | | | | | NEW α546'' LB (2)
//│ | | | | | | | 2. : α546''
//│ | | | | | | | 2. Typing term let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | 2. Typing term ($unapp).0
//│ | | | | | | | | | 2. Typing term $unapp
//│ | | | | | | | | | 2. : α546''
//│ | | | | | | | | | CONSTRAIN α546'' <! {0: α551''}
//│ | | | | | | | | |   where 
//│ 		A160_540' <: A160_541'
//│ 		α546'' :> (#ev545_548'',)
//│ 		#ev545_548'' :> K[(A160_540' | ‘A542'')..(‘A542'' & A160_541')]
//│ | | | | | | | | | 2. C α546'' <! {0: α551''}    (0)
//│ | | | | | | | | | | NEW α546'' UB (2)
//│ | | | | | | | | | | 2. C (#ev545_548'',) <! {0: α551''}    (2)
//│ | | | | | | | | | | | 2. C {0: #ev545_548''} <! {0: α551''}    (4)
//│ | | | | | | | | | | | | 2. C #ev545_548'' <! α551''    (3)
//│ | | | | | | | | | | | | | NEW #ev545_548'' UB (2)
//│ | | | | | | | | | | | | | 2. C K[(A160_540' | ‘A542'')..(‘A542'' & A160_541')] <! α551''    (5)
//│ | | | | | | | | | | | | | | NEW α551'' LB (2)
//│ | | | | | | | | 2. : α551''
//│ | | | | | | | | 2. Typing term case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | | 2. Typing term r
//│ | | | | | | | | | 2. : K[‘L538']
//│ | | | | | | | | | CONSTRAIN K[‘L538'] <! Object
//│ | | | | | | | | |   where 
//│ | | | | | | | | | 2. C K[‘L538'] <! Object    (0)
//│ | | | | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | | | | Set T157_552' ~> T157'
//│ | | | | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L538'..‘L538'}) <! #Object<>    (2)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | Match arm KS: #KS<Object,K> & {A: mut A160_553''..A160_554''} intl {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}
//│ | | | | | | | | | var rfn: r :: K[‘L538'] & #KS<Object,K> & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}
//│ | | | | | | | | | 3. Typing term let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | 3. Typing term (KS).unapply(r,)
//│ | | | | | | | | | | | 3. Typing term (KS).unapply
//│ | | | | | | | | | | | | 3. Typing term (x::15,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | | | | 4. Typing pattern [x::15,]
//│ | | | | | | | | | | | | | | 4. Typing pattern x::15
//│ | | | | | | | | | | | | | | 4. : x557''''
//│ | | | | | | | | | | | | | 4. : (x557'''',)
//│ | | | | | | | | | | | | | 4. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | | 4. Typing term x : KS
//│ | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | 4. : x557''''
//│ | | | | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | | | | vars=Map(L -> ‘L538') newDefsInfo=Map()
//│ | | | | | | | | | | | | | | | | 4. type TypeName(KS)
//│ | | | | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | | | | CONSTRAIN x557'''' <! #KS<Object,K>
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | 4. C x557'''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | | | | NEW x557'''' UB (0)
//│ | | | | | | | | | | | | | | 4. : #KS<Object,K>
//│ | | | | | | | | | | | | | | 4. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | | | | 4. Typing term (x).#ev
//│ | | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | | 4. : x557''''
//│ | | | | | | | | | | | | | | | | CONSTRAIN x557'''' <! {#ev: #ev558''''}
//│ | | | | | | | | | | | | | | | |   where 
//│ 		x557'''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | | | | 4. C x557'''' <! {#ev: #ev558''''}    (0)
//│ | | | | | | | | | | | | | | | | | NEW x557'''' UB (4)
//│ | | | | | | | | | | | | | | | 4. : #ev558''''
//│ | | | | | | | | | | | | | | 4. : (#ev558'''',)
//│ | | | | | | | | | | | | | 4. : (#ev558'''',)
//│ | | | | | | | | | | | | | Inferred poly constr: (x557'''' -> (#ev558'''',))  —— where 
//│ 		x557'''' <: {#ev: #ev558''''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. : ‹∀ 3. (x557'''' -> (#ev558'''',))›
//│ | | | | | | | | | | | 3. : ‹∀ 3. (x557'''' -> (#ev558'''',))›
//│ | | | | | | | | | | | 3. Typing term r
//│ | | | | | | | | | | | 3. : ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')})
//│ | | | | | | | | | | | CONSTRAIN ‹∀ 3. (x557'''' -> (#ev558'''',))› <! (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}) -> α559''')
//│ | | | | | | | | | | |   where 
//│ 		A160_553'' <: A160_554''
//│ 		x557'''' <: {#ev: #ev558''''} & #KS<Object,K>
//│ | | | | | | | | | | | 3. C ‹∀ 3. (x557'''' -> (#ev558'''',))› <! (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}) -> α559''')    (0)
//│ | | | | | | | | | | | | INST [3]   ‹∀ 3. (x557'''' -> (#ev558'''',))›
//│ | | | | | | | | | | | |   where  
//│ 		x557'''' <: {#ev: #ev558''''} & #KS<Object,K>
//│ | | | | | | | | | | | | TO [3] ~>  (x557_560''' -> (#ev558_561''',))
//│ | | | | | | | | | | | |   where  
//│ 		x557_560''' <: {#ev: #ev558_561'''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. C (x557_560''' -> (#ev558_561''',)) <! (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}) -> α559''')    (2)
//│ | | | | | | | | | | | | | 3. C (((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}),) <! (x557_560''',)    (2)
//│ | | | | | | | | | | | | | | 3. C ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}) <! x557_560'''    (3)
//│ | | | | | | | | | | | | | | | NEW x557_560''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}) <! {#ev: #ev558_561'''}    (6)
//│ | | | | | | | | | | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | | | | | | | | | | Set T157_562' ~> T157'
//│ | | | | | | | | | | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | | | | Set A160_563 ~> A160'
//│ | | | | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | | | | 3. ARGH  DNF(3, #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_553'' | ‘A555''')..(‘A555''' & A160_554'')})  <!  DNF(3, {#ev: #ev558_561'''})
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_553'' | ‘A555''')..(‘A555''' & A160_554'')} <: DNF(3, {#ev: #ev558_561'''})
//│ | | | | | | | | | | | | | | | | | Possible: List({#ev: #ev558_561'''})
//│ | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_553'' | ‘A555''')..(‘A555''' & A160_554'')}  %  List()  <!  List({#ev: #ev558_561'''})  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_553'' | ‘A555''')..(‘A555''' & A160_554'')}  %  List()  <!  List()  %  {#ev:#ev558_561'''}
//│ | | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut (A160_553'' | ‘A555''')..(‘A555''' & A160_554'')}  %  List()  <!  List()  %  |{#ev:#ev558_561'''}
//│ | | | | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A160']) where 
//│ | | | | | | | | | | | | | | | | | | | | | Lookup: Found mut (A160_553'' | ‘A555''')..(‘A555''' & A160_554'')
//│ | | | | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A160_553'' | ‘A555''')..(‘A555''' & A160_554'')]) where Some(
//│ 		A160_553'' <: A160_554'')
//│ | | | | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | | | | 3. C K[(A160_553'' | ‘A555''')..(‘A555''' & A160_554'')] <! #ev558_561'''    (5)
//│ | | | | | | | | | | | | | | | | | | | | | NEW #ev558_561''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L538'] & #KS<Object,K>) & {A: mut (A160_553'' | ‘A555''')..(A160_554'' & ‘A555''')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | 3. C (#ev558_561''',) <! α559'''    (2)
//│ | | | | | | | | | | | | | | NEW α559''' LB (3)
//│ | | | | | | | | | | 3. : α559'''
//│ | | | | | | | | | | 3. Typing term let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | | 3. Typing term ($unapp).0
//│ | | | | | | | | | | | | 3. Typing term $unapp
//│ | | | | | | | | | | | | 3. : α559'''
//│ | | | | | | | | | | | | CONSTRAIN α559''' <! {0: α564'''}
//│ | | | | | | | | | | | |   where 
//│ 		A160_553'' <: A160_554''
//│ 		α559''' :> (#ev558_561''',)
//│ 		#ev558_561''' :> K[(A160_553'' | ‘A555''')..(‘A555''' & A160_554'')]
//│ | | | | | | | | | | | | 3. C α559''' <! {0: α564'''}    (0)
//│ | | | | | | | | | | | | | NEW α559''' UB (3)
//│ | | | | | | | | | | | | | 3. C (#ev558_561''',) <! {0: α564'''}    (2)
//│ | | | | | | | | | | | | | | 3. C {0: #ev558_561'''} <! {0: α564'''}    (4)
//│ | | | | | | | | | | | | | | | 3. C #ev558_561''' <! α564'''    (3)
//│ | | | | | | | | | | | | | | | | NEW #ev558_561''' UB (3)
//│ | | | | | | | | | | | | | | | | 3. C K[(A160_553'' | ‘A555''')..(‘A555''' & A160_554'')] <! α564'''    (5)
//│ | | | | | | | | | | | | | | | | | NEW α564''' LB (3)
//│ | | | | | | | | | | | 3. : α564'''
//│ | | | | | | | | | | | 3. Typing term sig(e1, e2,)
//│ | | | | | | | | | | | | 3. Typing term sig
//│ | | | | | | | | | | | | 3. : ‹∀ 0. ‹∀ 0. ((K['L533'], K['L533'],) -> Int)››
//│ | | | | | | | | | | | | 3. Typing term e1
//│ | | | | | | | | | | | | 3. : α551''
//│ | | | | | | | | | | | | 3. Typing term e2
//│ | | | | | | | | | | | | 3. : α564'''
//│ | | | | | | | | | | | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L533'], K['L533'],) -> Int)›› <! ((α551'', α564''',) -> α565''')
//│ | | | | | | | | | | | |   where 
//│ 		A160_540' <: A160_541'
//│ 		α551'' :> K[(A160_540' | ‘A542'')..(‘A542'' & A160_541')]
//│ 		A160_553'' <: A160_554''
//│ 		α564''' :> K[(A160_553'' | ‘A555''')..(‘A555''' & A160_554'')]
//│ | | | | | | | | | | | | 3. C ‹∀ 0. ‹∀ 0. ((K['L533'], K['L533'],) -> Int)›› <! ((α551'', α564''',) -> α565''')    (0)
//│ | | | | | | | | | | | | | 3. C ‹∀ 0. ((K['L533'], K['L533'],) -> Int)› <! ((α551'', α564''',) -> α565''')    (2)
//│ | | | | | | | | | | | | | | INST [0]   ‹∀ 0. ((K['L533'], K['L533'],) -> Int)›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [3] ~>  ((K['L533_566'''], K['L533_566'''],) -> Int)
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 3. C ((K['L533_566'''], K['L533_566'''],) -> Int) <! ((α551'', α564''',) -> α565''')    (4)
//│ | | | | | | | | | | | | | | | 3. C (α551'', α564''',) <! (K['L533_566'''], K['L533_566'''],)    (3)
//│ | | | | | | | | | | | | | | | | 3. C α551'' <! K['L533_566''']    (4)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[-] K['L533_566'''] || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] 'L533_566''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[+] 'L533_566''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | => 'L533_567''
//│ | | | | | | | | | | | | | | | | | | => 'L533_567''
//│ | | | | | | | | | | | | | | | | | | EXTR[-] 'L533_566''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] 'L533_566''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] 'L533_567'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | => 'L533_567''
//│ | | | | | | | | | | | | | | | | | | | => 'L533_568''
//│ | | | | | | | | | | | | | | | | | | => 'L533_568''
//│ | | | | | | | | | | | | | | | | | => K[? :> 'L533_567'' <: 'L533_568'']
//│ | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L533_567''
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L533_568''
//│ | | | | | | | | | | | | | | | | | EXTR RHS  ~>  K[? :> 'L533_567'' <: 'L533_568'']  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ 		'L533_568'' <: 'L533_567''
//│ | | | | | | | | | | | | | | | | | 3. C α551'' <! K[? :> 'L533_567'' <: 'L533_568'']    (4)
//│ | | | | | | | | | | | | | | | | | | NEW α551'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C K[(A160_540' | ‘A542'')..(‘A542'' & A160_541')] <! K[? :> 'L533_567'' <: 'L533_568'']    (7)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L533_567'' <! (A160_540' | ‘A542'')..(‘A542'' & A160_541')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L533_567'' <! (A160_540' | ‘A542'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L533_567'' <! (A160_540' | ‘A542'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L533_567'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | 3. C (A160_540' | ‘A542'')..(‘A542'' & A160_541') <! 'L533_568''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A542'' & A160_541') <! 'L533_568''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A542'' & A160_541') <! 'L533_568''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L533_568'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A542'' & A160_541') <! 'L533_567''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L533_567'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A542'' & A160_541') <! (A160_540' | ‘A542'')    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 3. C α564''' <! K['L533_566''']    (4)
//│ | | | | | | | | | | | | | | | | | NEW α564''' UB (3)
//│ | | | | | | | | | | | | | | | | | 3. C K[(A160_553'' | ‘A555''')..(‘A555''' & A160_554'')] <! K['L533_566''']    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C (A160_553'' | ‘A555''')..(‘A555''' & A160_554'') <! 'L533_566'''    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A555''' & A160_554'') <! 'L533_566'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A555''' & A160_554'') <! 'L533_566'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L533_566''' LB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A555''' & A160_554'') <! 'L533_567''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (A160_554'' & ‘A555''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] A160_554'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A160_554''
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A555''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A555''')
//│ | | | | | | | | | | | | | | | | | | | | | | => (A160_554'' & ⊤(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (A160_554'' & ⊤(‘A555'''))  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (A160_554'' & ⊤(‘A555''')) <! 'L533_567''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L533_567'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (A160_554'' & ⊤(‘A555''')) <! (A160_540' | ‘A542'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧⊤(‘A555''')∧A160_554'')  <!  DNF(2, A160_540' | {}∧‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A160_554'' <! ((A160_540' | ‘A542'') | ~(⊤(‘A555''')))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_554'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C 'L533_566''' <! (A160_553'' | ‘A555''')..(‘A555''' & A160_554'')    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L533_566''' <! (A160_553'' | ‘A555''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L533_566''' <! (A160_553'' | ‘A555''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L533_566''' UB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A555''' & A160_554'') <! (A160_553'' | ‘A555''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L533_568'' <! (A160_553'' | ‘A555''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] (‘A555''' | A160_553'') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A555''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A555''')
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A160_553'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A160_553''
//│ | | | | | | | | | | | | | | | | | | | | | | => (⊥(‘A555''') | A160_553'')
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (⊥(‘A555''') | A160_553'')  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		A160_540' <: A160_541'
//│ 		A160_553'' <: A160_554''
//│ 		A160_554'' <: ((A160_540' | ‘A542'') | ~(⊤(‘A555''')))
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C 'L533_568'' <! (⊥(‘A555''') | A160_553'')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L533_568'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A542'' & A160_541') <! (⊥(‘A555''') | A160_553'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘A542''∧A160_541')  <!  DNF(2, {}∧⊥(‘A555''') | A160_553'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A160_541' <! ((⊥(‘A555''') | A160_553'') | ~(‘A542''))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A542'' & A160_541') & ~(⊥(‘A555'''))) <! A160_553''    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_553'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A542'' & A160_541') & ~(⊥(‘A555'''))) <! A160_554''    (16)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_554'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A542'' & A160_541') & ~(⊥(‘A555'''))) <! ((A160_540' | ‘A542'') | ~(⊤(‘A555''')))    (18)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | 3. C Int <! α565'''    (3)
//│ | | | | | | | | | | | | | | | | NEW α565''' LB (0)
//│ | | | | | | | | | | | 3. : α565'''
//│ | | | | | | | | | | 3. : α565'''
//│ | | | | | | | | | 3. : α565'''
//│ | | | | | | | | | CONSTRAIN α565''' <! α556''
//│ | | | | | | | | |   where 
//│ 		α565''' :> Int
//│ | | | | | | | | | 3. C α565''' <! α556''    (0)
//│ | | | | | | | | | | NEW α565''' UB (2)
//│ | | | | | | | | | | 3. C Int <! α556''    (2)
//│ | | | | | | | | | | | NEW α556'' LB (0)
//│ | | | | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A160_553''..A160_554''})] + List() and [α556''] | ⊥
//│ | | | | | | | | | finishing case K[‘L538'] <: (#KS<Object,K> & {A: mut A160_553''..A160_554''})
//│ | | | | | | | | | CONSTRAIN K[‘L538'] <! (#KS<Object,K> & {A: mut A160_553''..A160_554''})
//│ | | | | | | | | |   where 
//│ 		A160_540' <: A160_541'
//│ 		A160_553'' :> ((‘A542'' & A160_541') & ~(⊥(‘A555'''))) <: A160_554''
//│ 		A160_554'' :> ((‘A542'' & A160_541') & ~(⊥(‘A555'''))) <: ((A160_540' | ‘A542'') | ~(⊤(‘A555''')))
//│ | | | | | | | | | 2. C K[‘L538'] <! (#KS<Object,K> & {A: mut A160_553''..A160_554''})    (0)
//│ | | | | | | | | | | 2. C K[‘L538'] <! #KS<Object,K>    (2)
//│ | | | | | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | | | | | Set T157_569' ~> T157'
//│ | | | | | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L538'..‘L538'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | Set A160_570 ~> A160'
//│ | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | | | | 2. C K[‘L538'] <! {A: mut A160_553''..A160_554''}    (2)
//│ | | | | | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | | | | | Set T157_571' ~> T157'
//│ | | | | | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | Set A160_572 ~> A160'
//│ | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤})  <!  DNF(2, {A: mut A160_553''..A160_554''})
//│ | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤} <: DNF(2, {A: mut A160_553''..A160_554''})
//│ | | | | | | | | | | | | Possible: List({A: mut A160_553''..A160_554''})
//│ | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤}  %  List()  <!  List({A: mut A160_553''..A160_554''})  %  ⊥
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A160_553''..A160_554''}
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A160_553''..A160_554''}
//│ | | | | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | Lookup KS.A : Some(mut A160'..A160') where 
//│ | | | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | | | 2. C ⊥..⊤ <! A160_554''    (2)
//│ | | | | | | | | | | | | | | | | 2. C ⊤ <! A160_554''    (4)
//│ | | | | | | | | | | | | | | | | | NEW A160_554'' LB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! ((A160_540' | ‘A542'') | ~(⊤(‘A555''')))    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, )  <!  DNF(2, A160_540' | {}∧‘A542'' | ~(⊤(‘A555''')))
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(2, A160_540' | {}∧‘A542'' | ~(⊤(‘A555''')))
//│ | | | | | | | | | | | | | | | | | | | Possible: List(A160_540', {}∧‘A542'', ~(⊤(‘A555''')))
//│ | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(A160_540', ‘A542'', ~(⊤(‘A555''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(‘A542'', ~(⊤(‘A555''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(~(⊤(‘A555''')))  %  ‘A542''
//│ | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List(⊤(‘A555'''))  <!  List()  %  ‘A542''
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A555''')  %  List()  <!  List()  %  ‘A542''
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A555''') & ~(‘A542'')) <! A160_540'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (⊤(‘A555''') & ~(‘A542'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ⊤(‘A555''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A555''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘A542'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A542'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊥(‘A542''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | => (⊤(‘A555''') & ~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A555''') & ~(⊥(‘A542'')))  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A555''') & ~(⊥(‘A542''))) <! A160_540'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_540' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A555''') & ~(⊥(‘A542''))) <! A160_541'    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_541' LB (0)
//│ | | | | | | | | | | | | | | | 2. C A160_553'' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | | | 2. C A160_553'' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | | | NEW A160_553'' UB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ((‘A542'' & A160_541') & ~(⊥(‘A555'''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧‘A542''∧A160_541'∧~(⊥(‘A555''')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | 2. C A160_541' <! ~((‘A542'' & ~(⊥(‘A555'''))))    (8)
//│ | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] (~(‘A542'') | ⊥(‘A555''')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(‘A542'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A542'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A542''))
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ⊥(‘A555''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A555''')
//│ | | | | | | | | | | | | | | | | | | | | => (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (~(⊤(‘A542'')) | ⊥(‘A555'''))  to 1
//│ | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | 2. C A160_541' <! (~(⊤(‘A542'')) | ⊥(‘A555'''))    (8)
//│ | | | | | | | | | | | | | | | | | | | | | NEW A160_541' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A555''') & ~(⊥(‘A542''))) <! (~(⊤(‘A542'')) | ⊥(‘A555'''))    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, {}∧⊤(‘A555''')∧~(⊥(‘A542'')))  <!  DNF(0, ~(⊤(‘A542'')) | {}∧⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A555''') <: DNF(0, ~(⊤(‘A542'')) | {}∧⊥(‘A542''))
//│ | | | | | | | | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A542'')), {}∧⊥(‘A542''))
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A555''')  %  List()  <!  List(~(⊤(‘A542'')), ⊥(‘A542''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A555''')  %  List(⊤(‘A542''))  <!  List(⊥(‘A542''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A542'')∧⊤(‘A555''')  %  List()  <!  List(⊥(‘A542''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A542'')∧⊤(‘A555''')  %  List()  <!  List()  %  ⊥(‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A542''), ⊤(‘A555''')) List(⊥(‘A542''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A555''') & ~(⊥(‘A542''))) <: (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[-] (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A542'')) | {}∧⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A542''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊥(‘A555''') | ~(⊤(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A555''') & ~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A555''') & ~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A555''')∧~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A555''') & ~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α556''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α556'' :> Int
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C #error<> <! α556''    (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW α556'' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.194: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `??A1 | ~??A2`
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | 2. : α556''
//│ | | | | | | | 2. : α556''
//│ | | | | | | 2. : α556''
//│ | | | | | | CONSTRAIN α556'' <! α543'
//│ | | | | | |   where 
//│ 		α556'' :> #error<> | Int
//│ | | | | | | 2. C α556'' <! α543'    (0)
//│ | | | | | | | NEW α556'' UB (1)
//│ | | | | | | | 2. C #error<> <! α543'    (2)
//│ | | | | | | | | NEW α543' LB (0)
//│ | | | | | | | 2. C Int <! α543'    (2)
//│ | | | | | | | | NEW α543' LB (0)
//│ | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A160_540'..A160_541'})] + List() and [α543'] | ⊥
//│ | | | | | | finishing case K[‘L538'] <: (#KS<Object,K> & {A: mut A160_540'..A160_541'})
//│ | | | | | | CONSTRAIN K[‘L538'] <! (#KS<Object,K> & {A: mut A160_540'..A160_541'})
//│ | | | | | |   where 
//│ 		A160_540' :> (⊤(‘A555''') & ~(⊥(‘A542''))) <: A160_541'
//│ 		A160_541' :> (⊤(‘A555''') & ~(⊥(‘A542''))) <: (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | 1. C K[‘L538'] <! (#KS<Object,K> & {A: mut A160_540'..A160_541'})    (0)
//│ | | | | | | | 1. C K[‘L538'] <! #KS<Object,K>    (2)
//│ | | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | | Set T157_577' ~> T157'
//│ | | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L538'..‘L538'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | Set A160_578 ~> A160'
//│ | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | 1. C K[‘L538'] <! {A: mut A160_540'..A160_541'}    (2)
//│ | | | | | | | | Assigning T :: T157' := ‘L538' where 
//│ | | | | | | | | Set T157_579' ~> T157'
//│ | | | | | | | | Assigned Some(‘L538')
//│ | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | Set A160_580 ~> A160'
//│ | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤})  <!  DNF(1, {A: mut A160_540'..A160_541'})
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤} <: DNF(1, {A: mut A160_540'..A160_541'})
//│ | | | | | | | | | Possible: List({A: mut A160_540'..A160_541'})
//│ | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤}  %  List()  <!  List({A: mut A160_540'..A160_541'})  %  ⊥
//│ | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A160_540'..A160_541'}
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L538'..‘L538', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A160_540'..A160_541'}
//│ | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | Lookup KS.A : Some(mut A160'..A160') where 
//│ | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | 1. C ⊥..⊤ <! A160_541'    (2)
//│ | | | | | | | | | | | | | 1. C ⊤ <! A160_541'    (4)
//│ | | | | | | | | | | | | | | NEW A160_541' LB (0)
//│ | | | | | | | | | | | | | | 1. C ⊤ <! (~(⊤(‘A542'')) | ⊥(‘A555'''))    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, )  <!  DNF(0, ~(⊤(‘A542'')) | {}∧⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(0, ~(⊤(‘A542'')) | {}∧⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A542'')), {}∧⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(~(⊤(‘A542'')), ⊥(‘A555'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List(⊤(‘A542''))  <!  List(⊥(‘A555'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A542'')  %  List()  <!  List(⊥(‘A555'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A542'')  %  List()  <!  List()  %  ⊥(‘A555''')
//│ | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A542'')) List(⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[-] (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | norm[-] (~(⊤(‘A542'')) | ⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A542'')) | {}∧⊥(‘A555'''))
//│ | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A542''))
//│ | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A542'')
//│ | | | | | | | | | | | | | | | | | | | | | ~> (⊥(‘A555''') | ~(⊤(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α543'
//│ | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α543' :> Int | #error<>
//│ | | | | | | | | | | | | | | | | | | | | 1. C #error<> <! α543'    (0)
//│ | | | | | | | | | | | | | | | | | | | | | NEW α543' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.194: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `??A | ~??A0`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | | | | | 1. C A160_540' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | 1. C A160_540' <! ⊥    (4)
//│ | | | | | | | | | | | | | | NEW A160_540' UB (0)
//│ | | | | | | | | | | | | | | 1. C (⊤(‘A555''') & ~(⊥(‘A542''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A555''')∧~(⊥(‘A542'')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A555''') <: DNF(0, {}∧⊥(‘A542''))
//│ | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A542''))
//│ | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A555''')  %  List()  <!  List(⊥(‘A542''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A555''')  %  List()  <!  List()  %  ⊥(‘A542'')
//│ | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A555''')) List(⊥(‘A542''))
//│ | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A555''') & ~(⊥(‘A542''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A555''') & ~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A555''') & ~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A555''')∧~(⊥(‘A542'')))
//│ | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A555''') & ~(⊥(‘A542'')))
//│ | | | | | 1. : α543'
//│ | | | | 1. : α543'
//│ | | | 1. : α543'
//│ | | 1. : ((l: K[‘L538'], r: K[‘L538'],) -> α543')
//│ | | CONSTRAIN ((l: K[‘L538'], r: K[‘L538'],) -> α543') <! fr581'
//│ | |   where 
//│ 		α543' :> #error<> | Int | #error<>
//│ | | 1. C ((l: K[‘L538'], r: K[‘L538'],) -> α543') <! fr581'    (0)
//│ | | | NEW fr581' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None)))))),((l: K[‘L538'], r: K[‘L538'],) -> α543')) where 
//│ 		α543' :> #error<> | Int | #error<>
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun fr: ‹∀ 0. ((l: K[‘L538'], r: K[‘L538'],) -> α543')› where 
//│ |		α543' :> #error<> | Int | #error<>
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> (Int | error)




// :e
// fun fr[L](l: K[L], r: K[L]) =
//   if l is KS(e1) and r is KS(e2) then [e1, e2] : [K[L], K[L]] else 0










// * TODO investigate: 'L0 :> ??A <: ??A0 bad bounds?
// :d
:e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K['X])
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.851: 	fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K['X])
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `nothing`
//│ fun fr: forall 'L. (l: K['L]) -> (forall 'X. error | () -> K['X])
//│   where
//│     'X :> ??A
//│        <: ??A0

// Doesn't happen here:
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K['X])
//│ fun fr: forall 'X 'L. (l: K['L]) -> K[in ??A & 'X out 'X | ??A0]

// ~~Doesn't happen~~ happens here:
:e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K[l.A])
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.867: 	fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K[l.A])
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `nothing`
//│ fun fr: forall 'L. (l: K['L]) -> (error | () -> K[in ??A out ??A0])




// :d
:e
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[S['X]])
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[l.A])
//│ fun fr: forall 'L. (l: K['L]) -> K[in ??A out ??A0]



