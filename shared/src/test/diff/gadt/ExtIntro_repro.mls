:NewDefs
:DontDistributeForalls

:NoJS



class Z 
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }



(x: S) => x as S[?]
//│ (x: S[?]) -> S[?]


class Foo[type A](val foo: Foo[A])
//│ class Foo[A](foo: Foo[A])


(x: Foo[?]) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x as Foo
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

:e
(x: Foo) => x.foo as x.A
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.43: 	(x: Foo) => x.foo as x.A
//│ ║        	            ^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	                           ^^^^^^
//│ (x: Foo[?]) -> ??A

:e
(x: Foo[?]) => x.foo as x.A
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── type `Foo[?]` does not match type `nothing`
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ║        	                           ^^^^^^
//│ ╟── but it flows into field selection with expected type `nothing`
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── Note: constraint arises from type selection:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ╙──      	                         ^^
//│ (x: Foo[?]) -> anything

:e
(x: Foo) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.69: 	(x: Foo) => if x is
//│ ║        	               ^^^^
//│ ║  l.70: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.71: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	               ^
//│ (x: Foo[?]) -> (error | ??A & ??A0)

:e
(x: Foo[?]) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.85: 	(x: Foo[?]) => if x is
//│ ║        	                  ^^^^
//│ ║  l.86: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.87: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╙── expression of type `Foo[in ??A out ??A0 & ?A] & ~??A` does not match type `nothing`
//│ (x: Foo[?]) -> ??A



fun fz(l) =
  if l is Foo(ea) and 0 is 0 then
    ea : Foo[ea.A]
//│ fun fz: forall 'A 'A0. Foo[in 'A out 'A0] -> Foo[in 'A & 'A0 | ??A out ??A0 & 'A0]











// abstract class K[type T]: KZ | KS[?]
abstract class K[type T]: KS[?]
// class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?]
//│ class KS[A](ev: K[A]) extends K

:d

fun fz(l) =
  if l is KS(ea) then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A0 out 'A] -> K[in S[?] | 'A0 & 'A | ??A out ??A0 & 'A & S[?]]


// :d
fun fz(l) =
  if l is KS(ea) then
    () => ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> () -> K[in S[in anything out nothing] | 'A | ??A out S[?] & ??A0 & 'A0]
//│   where
//│     'A <: 'A0
//│     'A0 <: 'A | ??A | ~??A0

// :d
fun fz(l) =
  if l is KS(ea) and 0 is 0 then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> K[in S[in anything out nothing] | 'A & 'A0 | ??A out S[?] & ??A0 & 'A0]



fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[ea.T] = ea ; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0


// fun fr: (K['L], K['L]) -> Int

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.157: 	fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `L | ~??A`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ fun fr: forall 'L. (l: K['L]) -> (K['L] | error)

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[S['X]]
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

// :d
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K['X]
//│ fun fr: forall 'L 'X. (l: K['L]) -> K[in ??A & 'X out 'X | ??A0]




fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then [(e1 as K['X]), e2 as K['X]] else 0
//│ fun fr: forall 'X 'X0 'L. (l: K['L], r: K['L]) -> (0 | [K[in ??A & 'X out 'X | ??A0], K[in ??A1 & 'X0 out 'X0 | ??A2]])



// MIN

fun sig: (K['L], K['L]) -> Int
//│ fun sig: forall 'L. (K['L], K['L]) -> Int

:d
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))
//│ | Completing fun fr = (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | Type params (TypeName(L),L539',TypeParamInfo(None,false,None,None))
//│ | | Params 
//│ | | Type fr polymorphically? true && (0 === 0 || false || false
//│ | | 1. Typing term (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | 1. Typing pattern [l: K‹L›, r: K‹L›,]
//│ | | | | 1. Typing pattern l : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L539') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L539'
//│ | | | | | | => K[‘L539']
//│ | | | | | => K[‘L539'] ——— 
//│ | | | | 1. : K[‘L539']
//│ | | | | 1. Typing pattern r : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L539') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L539'
//│ | | | | | | => K[‘L539']
//│ | | | | | => K[‘L539'] ——— 
//│ | | | | 1. : K[‘L539']
//│ | | | 1. : (l: K[‘L539'], r: K[‘L539'],)
//│ | | | 1. Typing term {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | | 1. Typing term if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(l); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))
//│ | | | | | [Desugarer.destructPattern] Result: «l is Var(KS)»
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(r); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e2))))))
//│ | | | | | [Desugarer.destructPattern] Result: «r is Var(KS)»
//│ | | | | | Desugared term: case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | 1. Typing term case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | | 1. Typing term l
//│ | | | | | | 1. : K[‘L539']
//│ | | | | | | CONSTRAIN K[‘L539'] <! Object
//│ | | | | | |   where 
//│ | | | | | | 1. C K[‘L539'] <! Object    (0)
//│ | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | Set T157_540' ~> T157'
//│ | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L539'..‘L539'}) <! #Object<>    (2)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | Match arm KS: #KS<Object,K> & {A: mut A160_541'..A160_542'} intl {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}
//│ | | | | | | var rfn: l :: K[‘L539'] & #KS<Object,K> & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}
//│ | | | | | | 2. Typing term let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | 2. Typing term (KS).unapply(l,)
//│ | | | | | | | | 2. Typing term (KS).unapply
//│ | | | | | | | | | 2. Typing term (x::14,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | 3. Typing pattern [x::14,]
//│ | | | | | | | | | | | 3. Typing pattern x::14
//│ | | | | | | | | | | | 3. : x545'''
//│ | | | | | | | | | | 3. : (x545''',)
//│ | | | | | | | | | | 3. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | 3. Typing term x : KS
//│ | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | 3. : x545'''
//│ | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | vars=Map(L -> ‘L539') newDefsInfo=Map()
//│ | | | | | | | | | | | | | 3. type TypeName(KS)
//│ | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | CONSTRAIN x545''' <! #KS<Object,K>
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C x545''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | NEW x545''' UB (0)
//│ | | | | | | | | | | | 3. : #KS<Object,K>
//│ | | | | | | | | | | | 3. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | 3. Typing term (x).#ev
//│ | | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | | 3. : x545'''
//│ | | | | | | | | | | | | | CONSTRAIN x545''' <! {#ev: #ev546'''}
//│ | | | | | | | | | | | | |   where 
//│ 		x545''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | 3. C x545''' <! {#ev: #ev546'''}    (0)
//│ | | | | | | | | | | | | | | NEW x545''' UB (3)
//│ | | | | | | | | | | | | 3. : #ev546'''
//│ | | | | | | | | | | | 3. : (#ev546''',)
//│ | | | | | | | | | | 3. : (#ev546''',)
//│ | | | | | | | | | | Inferred poly constr: (x545''' -> (#ev546''',))  —— where 
//│ 		x545''' <: {#ev: #ev546'''} & #KS<Object,K>
//│ | | | | | | | | | 2. : ‹∀ 2. (x545''' -> (#ev546''',))›
//│ | | | | | | | | 2. : ‹∀ 2. (x545''' -> (#ev546''',))›
//│ | | | | | | | | 2. Typing term l
//│ | | | | | | | | 2. : ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')})
//│ | | | | | | | | CONSTRAIN ‹∀ 2. (x545''' -> (#ev546''',))› <! (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}) -> α547'')
//│ | | | | | | | |   where 
//│ 		A160_541' <: A160_542'
//│ 		x545''' <: {#ev: #ev546'''} & #KS<Object,K>
//│ | | | | | | | | 2. C ‹∀ 2. (x545''' -> (#ev546''',))› <! (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}) -> α547'')    (0)
//│ | | | | | | | | | INST [2]   ‹∀ 2. (x545''' -> (#ev546''',))›
//│ | | | | | | | | |   where  
//│ 		x545''' <: {#ev: #ev546'''} & #KS<Object,K>
//│ | | | | | | | | | TO [2] ~>  (x545_548'' -> (#ev546_549'',))
//│ | | | | | | | | |   where  
//│ 		x545_548'' <: {#ev: #ev546_549''} & #KS<Object,K>
//│ | | | | | | | | | 2. C (x545_548'' -> (#ev546_549'',)) <! (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}) -> α547'')    (2)
//│ | | | | | | | | | | 2. C (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}),) <! (x545_548'',)    (2)
//│ | | | | | | | | | | | 2. C ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}) <! x545_548''    (3)
//│ | | | | | | | | | | | | NEW x545_548'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}) <! {#ev: #ev546_549''}    (6)
//│ | | | | | | | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | | | | | | | Set T157_550' ~> T157'
//│ | | | | | | | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | Set A160_551 ~> A160'
//│ | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | 2. ARGH  DNF(2, #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_541' | ‘A543'')..(‘A543'' & A160_542')})  <!  DNF(2, {#ev: #ev546_549''})
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_541' | ‘A543'')..(‘A543'' & A160_542')} <: DNF(2, {#ev: #ev546_549''})
//│ | | | | | | | | | | | | | | Possible: List({#ev: #ev546_549''})
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_541' | ‘A543'')..(‘A543'' & A160_542')}  %  List()  <!  List({#ev: #ev546_549''})  %  ⊥
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_541' | ‘A543'')..(‘A543'' & A160_542')}  %  List()  <!  List()  %  {#ev:#ev546_549''}
//│ | | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_541' | ‘A543'')..(‘A543'' & A160_542')}  %  List()  <!  List()  %  |{#ev:#ev546_549''}
//│ | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A160']) where 
//│ | | | | | | | | | | | | | | | | | | Lookup: Found mut (A160_541' | ‘A543'')..(‘A543'' & A160_542')
//│ | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A160_541' | ‘A543'')..(‘A543'' & A160_542')]) where Some(
//│ 		A160_541' <: A160_542')
//│ | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | 2. C K[(A160_541' | ‘A543'')..(‘A543'' & A160_542')] <! #ev546_549''    (5)
//│ | | | | | | | | | | | | | | | | | | NEW #ev546_549'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_541' | ‘A543'')..(A160_542' & ‘A543'')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | 2. C (#ev546_549'',) <! α547''    (2)
//│ | | | | | | | | | | | NEW α547'' LB (2)
//│ | | | | | | | 2. : α547''
//│ | | | | | | | 2. Typing term let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | 2. Typing term ($unapp).0
//│ | | | | | | | | | 2. Typing term $unapp
//│ | | | | | | | | | 2. : α547''
//│ | | | | | | | | | CONSTRAIN α547'' <! {0: α552''}
//│ | | | | | | | | |   where 
//│ 		A160_541' <: A160_542'
//│ 		α547'' :> (#ev546_549'',)
//│ 		#ev546_549'' :> K[(A160_541' | ‘A543'')..(‘A543'' & A160_542')]
//│ | | | | | | | | | 2. C α547'' <! {0: α552''}    (0)
//│ | | | | | | | | | | NEW α547'' UB (2)
//│ | | | | | | | | | | 2. C (#ev546_549'',) <! {0: α552''}    (2)
//│ | | | | | | | | | | | 2. C {0: #ev546_549''} <! {0: α552''}    (4)
//│ | | | | | | | | | | | | 2. C #ev546_549'' <! α552''    (3)
//│ | | | | | | | | | | | | | NEW #ev546_549'' UB (2)
//│ | | | | | | | | | | | | | 2. C K[(A160_541' | ‘A543'')..(‘A543'' & A160_542')] <! α552''    (5)
//│ | | | | | | | | | | | | | | NEW α552'' LB (2)
//│ | | | | | | | | 2. : α552''
//│ | | | | | | | | 2. Typing term case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | | 2. Typing term r
//│ | | | | | | | | | 2. : K[‘L539']
//│ | | | | | | | | | CONSTRAIN K[‘L539'] <! Object
//│ | | | | | | | | |   where 
//│ | | | | | | | | | 2. C K[‘L539'] <! Object    (0)
//│ | | | | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | | | | Set T157_553' ~> T157'
//│ | | | | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L539'..‘L539'}) <! #Object<>    (2)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | Match arm KS: #KS<Object,K> & {A: mut A160_554''..A160_555''} intl {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}
//│ | | | | | | | | | var rfn: r :: K[‘L539'] & #KS<Object,K> & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}
//│ | | | | | | | | | 3. Typing term let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | 3. Typing term (KS).unapply(r,)
//│ | | | | | | | | | | | 3. Typing term (KS).unapply
//│ | | | | | | | | | | | | 3. Typing term (x::15,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | | | | 4. Typing pattern [x::15,]
//│ | | | | | | | | | | | | | | 4. Typing pattern x::15
//│ | | | | | | | | | | | | | | 4. : x558''''
//│ | | | | | | | | | | | | | 4. : (x558'''',)
//│ | | | | | | | | | | | | | 4. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | | 4. Typing term x : KS
//│ | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | 4. : x558''''
//│ | | | | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | | | | vars=Map(L -> ‘L539') newDefsInfo=Map()
//│ | | | | | | | | | | | | | | | | 4. type TypeName(KS)
//│ | | | | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | | | | CONSTRAIN x558'''' <! #KS<Object,K>
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | 4. C x558'''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | | | | NEW x558'''' UB (0)
//│ | | | | | | | | | | | | | | 4. : #KS<Object,K>
//│ | | | | | | | | | | | | | | 4. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | | | | 4. Typing term (x).#ev
//│ | | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | | 4. : x558''''
//│ | | | | | | | | | | | | | | | | CONSTRAIN x558'''' <! {#ev: #ev559''''}
//│ | | | | | | | | | | | | | | | |   where 
//│ 		x558'''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | | | | 4. C x558'''' <! {#ev: #ev559''''}    (0)
//│ | | | | | | | | | | | | | | | | | NEW x558'''' UB (4)
//│ | | | | | | | | | | | | | | | 4. : #ev559''''
//│ | | | | | | | | | | | | | | 4. : (#ev559'''',)
//│ | | | | | | | | | | | | | 4. : (#ev559'''',)
//│ | | | | | | | | | | | | | Inferred poly constr: (x558'''' -> (#ev559'''',))  —— where 
//│ 		x558'''' <: {#ev: #ev559''''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. : ‹∀ 3. (x558'''' -> (#ev559'''',))›
//│ | | | | | | | | | | | 3. : ‹∀ 3. (x558'''' -> (#ev559'''',))›
//│ | | | | | | | | | | | 3. Typing term r
//│ | | | | | | | | | | | 3. : ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')})
//│ | | | | | | | | | | | CONSTRAIN ‹∀ 3. (x558'''' -> (#ev559'''',))› <! (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}) -> α560''')
//│ | | | | | | | | | | |   where 
//│ 		A160_554'' <: A160_555''
//│ 		x558'''' <: {#ev: #ev559''''} & #KS<Object,K>
//│ | | | | | | | | | | | 3. C ‹∀ 3. (x558'''' -> (#ev559'''',))› <! (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}) -> α560''')    (0)
//│ | | | | | | | | | | | | INST [3]   ‹∀ 3. (x558'''' -> (#ev559'''',))›
//│ | | | | | | | | | | | |   where  
//│ 		x558'''' <: {#ev: #ev559''''} & #KS<Object,K>
//│ | | | | | | | | | | | | TO [3] ~>  (x558_561''' -> (#ev559_562''',))
//│ | | | | | | | | | | | |   where  
//│ 		x558_561''' <: {#ev: #ev559_562'''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. C (x558_561''' -> (#ev559_562''',)) <! (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}) -> α560''')    (2)
//│ | | | | | | | | | | | | | 3. C (((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}),) <! (x558_561''',)    (2)
//│ | | | | | | | | | | | | | | 3. C ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}) <! x558_561'''    (3)
//│ | | | | | | | | | | | | | | | NEW x558_561''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}) <! {#ev: #ev559_562'''}    (6)
//│ | | | | | | | | | | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | | | | | | | | | | Set T157_563' ~> T157'
//│ | | | | | | | | | | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | | | | Set A160_564 ~> A160'
//│ | | | | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | | | | 3. ARGH  DNF(3, #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_554'' | ‘A556''')..(‘A556''' & A160_555'')})  <!  DNF(3, {#ev: #ev559_562'''})
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_554'' | ‘A556''')..(‘A556''' & A160_555'')} <: DNF(3, {#ev: #ev559_562'''})
//│ | | | | | | | | | | | | | | | | | Possible: List({#ev: #ev559_562'''})
//│ | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_554'' | ‘A556''')..(‘A556''' & A160_555'')}  %  List()  <!  List({#ev: #ev559_562'''})  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_554'' | ‘A556''')..(‘A556''' & A160_555'')}  %  List()  <!  List()  %  {#ev:#ev559_562'''}
//│ | | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut (A160_554'' | ‘A556''')..(‘A556''' & A160_555'')}  %  List()  <!  List()  %  |{#ev:#ev559_562'''}
//│ | | | | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A160']) where 
//│ | | | | | | | | | | | | | | | | | | | | | Lookup: Found mut (A160_554'' | ‘A556''')..(‘A556''' & A160_555'')
//│ | | | | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A160_554'' | ‘A556''')..(‘A556''' & A160_555'')]) where Some(
//│ 		A160_554'' <: A160_555'')
//│ | | | | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | | | | 3. C K[(A160_554'' | ‘A556''')..(‘A556''' & A160_555'')] <! #ev559_562'''    (5)
//│ | | | | | | | | | | | | | | | | | | | | | NEW #ev559_562''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L539'] & #KS<Object,K>) & {A: mut (A160_554'' | ‘A556''')..(A160_555'' & ‘A556''')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | 3. C (#ev559_562''',) <! α560'''    (2)
//│ | | | | | | | | | | | | | | NEW α560''' LB (3)
//│ | | | | | | | | | | 3. : α560'''
//│ | | | | | | | | | | 3. Typing term let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | | 3. Typing term ($unapp).0
//│ | | | | | | | | | | | | 3. Typing term $unapp
//│ | | | | | | | | | | | | 3. : α560'''
//│ | | | | | | | | | | | | CONSTRAIN α560''' <! {0: α565'''}
//│ | | | | | | | | | | | |   where 
//│ 		A160_554'' <: A160_555''
//│ 		α560''' :> (#ev559_562''',)
//│ 		#ev559_562''' :> K[(A160_554'' | ‘A556''')..(‘A556''' & A160_555'')]
//│ | | | | | | | | | | | | 3. C α560''' <! {0: α565'''}    (0)
//│ | | | | | | | | | | | | | NEW α560''' UB (3)
//│ | | | | | | | | | | | | | 3. C (#ev559_562''',) <! {0: α565'''}    (2)
//│ | | | | | | | | | | | | | | 3. C {0: #ev559_562'''} <! {0: α565'''}    (4)
//│ | | | | | | | | | | | | | | | 3. C #ev559_562''' <! α565'''    (3)
//│ | | | | | | | | | | | | | | | | NEW #ev559_562''' UB (3)
//│ | | | | | | | | | | | | | | | | 3. C K[(A160_554'' | ‘A556''')..(‘A556''' & A160_555'')] <! α565'''    (5)
//│ | | | | | | | | | | | | | | | | | NEW α565''' LB (3)
//│ | | | | | | | | | | | 3. : α565'''
//│ | | | | | | | | | | | 3. Typing term sig(e1, e2,)
//│ | | | | | | | | | | | | 3. Typing term sig
//│ | | | | | | | | | | | | 3. : ‹∀ 0. ‹∀ 0. ((K['L534'], K['L534'],) -> Int)››
//│ | | | | | | | | | | | | 3. Typing term e1
//│ | | | | | | | | | | | | 3. : α552''
//│ | | | | | | | | | | | | 3. Typing term e2
//│ | | | | | | | | | | | | 3. : α565'''
//│ | | | | | | | | | | | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L534'], K['L534'],) -> Int)›› <! ((α552'', α565''',) -> α566''')
//│ | | | | | | | | | | | |   where 
//│ 		A160_541' <: A160_542'
//│ 		α552'' :> K[(A160_541' | ‘A543'')..(‘A543'' & A160_542')]
//│ 		A160_554'' <: A160_555''
//│ 		α565''' :> K[(A160_554'' | ‘A556''')..(‘A556''' & A160_555'')]
//│ | | | | | | | | | | | | 3. C ‹∀ 0. ‹∀ 0. ((K['L534'], K['L534'],) -> Int)›› <! ((α552'', α565''',) -> α566''')    (0)
//│ | | | | | | | | | | | | | 3. C ‹∀ 0. ((K['L534'], K['L534'],) -> Int)› <! ((α552'', α565''',) -> α566''')    (2)
//│ | | | | | | | | | | | | | | INST [0]   ‹∀ 0. ((K['L534'], K['L534'],) -> Int)›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [3] ~>  ((K['L534_567'''], K['L534_567'''],) -> Int)
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 3. C ((K['L534_567'''], K['L534_567'''],) -> Int) <! ((α552'', α565''',) -> α566''')    (4)
//│ | | | | | | | | | | | | | | | 3. C (α552'', α565''',) <! (K['L534_567'''], K['L534_567'''],)    (3)
//│ | | | | | | | | | | | | | | | | 3. C α552'' <! K['L534_567''']    (4)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[-] K['L534_567'''] || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] 'L534_567''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[+] 'L534_567''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | => 'L534_568''
//│ | | | | | | | | | | | | | | | | | | => 'L534_568''
//│ | | | | | | | | | | | | | | | | | | EXTR[-] 'L534_567''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] 'L534_567''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] 'L534_568'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | => 'L534_568''
//│ | | | | | | | | | | | | | | | | | | | => 'L534_569''
//│ | | | | | | | | | | | | | | | | | | => 'L534_569''
//│ | | | | | | | | | | | | | | | | | => K[? :> 'L534_568'' <: 'L534_569'']
//│ | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L534_568''
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L534_569''
//│ | | | | | | | | | | | | | | | | | EXTR RHS  ~>  K[? :> 'L534_568'' <: 'L534_569'']  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ 		'L534_569'' <: 'L534_568''
//│ | | | | | | | | | | | | | | | | | 3. C α552'' <! K[? :> 'L534_568'' <: 'L534_569'']    (4)
//│ | | | | | | | | | | | | | | | | | | NEW α552'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C K[(A160_541' | ‘A543'')..(‘A543'' & A160_542')] <! K[? :> 'L534_568'' <: 'L534_569'']    (7)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L534_568'' <! (A160_541' | ‘A543'')..(‘A543'' & A160_542')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L534_568'' <! (A160_541' | ‘A543'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L534_568'' <! (A160_541' | ‘A543'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L534_568'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | 3. C (A160_541' | ‘A543'')..(‘A543'' & A160_542') <! 'L534_569''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A543'' & A160_542') <! 'L534_569''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A543'' & A160_542') <! 'L534_569''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L534_569'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A543'' & A160_542') <! 'L534_568''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L534_568'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A543'' & A160_542') <! (A160_541' | ‘A543'')    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 3. C α565''' <! K['L534_567''']    (4)
//│ | | | | | | | | | | | | | | | | | NEW α565''' UB (3)
//│ | | | | | | | | | | | | | | | | | 3. C K[(A160_554'' | ‘A556''')..(‘A556''' & A160_555'')] <! K['L534_567''']    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C (A160_554'' | ‘A556''')..(‘A556''' & A160_555'') <! 'L534_567'''    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A556''' & A160_555'') <! 'L534_567'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A556''' & A160_555'') <! 'L534_567'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L534_567''' LB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A556''' & A160_555'') <! 'L534_568''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (A160_555'' & ‘A556''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] A160_555'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A160_555''
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A556''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A556''')
//│ | | | | | | | | | | | | | | | | | | | | | | => (A160_555'' & ⊤(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (A160_555'' & ⊤(‘A556'''))  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (A160_555'' & ⊤(‘A556''')) <! 'L534_568''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L534_568'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (A160_555'' & ⊤(‘A556''')) <! (A160_541' | ‘A543'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧⊤(‘A556''')∧A160_555'')  <!  DNF(2, A160_541' | {}∧‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A160_555'' <! ((A160_541' | ‘A543'') | ~(⊤(‘A556''')))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_555'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C 'L534_567''' <! (A160_554'' | ‘A556''')..(‘A556''' & A160_555'')    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L534_567''' <! (A160_554'' | ‘A556''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L534_567''' <! (A160_554'' | ‘A556''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L534_567''' UB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A556''' & A160_555'') <! (A160_554'' | ‘A556''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L534_569'' <! (A160_554'' | ‘A556''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] (‘A556''' | A160_554'') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A556''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A556''')
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A160_554'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A160_554''
//│ | | | | | | | | | | | | | | | | | | | | | | => (⊥(‘A556''') | A160_554'')
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (⊥(‘A556''') | A160_554'')  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		A160_541' <: A160_542'
//│ 		A160_554'' <: A160_555''
//│ 		A160_555'' <: ((A160_541' | ‘A543'') | ~(⊤(‘A556''')))
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C 'L534_569'' <! (⊥(‘A556''') | A160_554'')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L534_569'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A543'' & A160_542') <! (⊥(‘A556''') | A160_554'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘A543''∧A160_542')  <!  DNF(2, {}∧⊥(‘A556''') | A160_554'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A160_542' <! ((⊥(‘A556''') | A160_554'') | ~(‘A543''))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A543'' & A160_542') & ~(⊥(‘A556'''))) <! A160_554''    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_554'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A543'' & A160_542') & ~(⊥(‘A556'''))) <! A160_555''    (16)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_555'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A543'' & A160_542') & ~(⊥(‘A556'''))) <! ((A160_541' | ‘A543'') | ~(⊤(‘A556''')))    (18)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | 3. C Int <! α566'''    (3)
//│ | | | | | | | | | | | | | | | | NEW α566''' LB (0)
//│ | | | | | | | | | | | 3. : α566'''
//│ | | | | | | | | | | 3. : α566'''
//│ | | | | | | | | | 3. : α566'''
//│ | | | | | | | | | CONSTRAIN α566''' <! α557''
//│ | | | | | | | | |   where 
//│ 		α566''' :> Int
//│ | | | | | | | | | 3. C α566''' <! α557''    (0)
//│ | | | | | | | | | | NEW α566''' UB (2)
//│ | | | | | | | | | | 3. C Int <! α557''    (2)
//│ | | | | | | | | | | | NEW α557'' LB (0)
//│ | | | | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A160_554''..A160_555''})] + List() and [α557''] | ⊥
//│ | | | | | | | | | finishing case K[‘L539'] <: (#KS<Object,K> & {A: mut A160_554''..A160_555''})
//│ | | | | | | | | | CONSTRAIN K[‘L539'] <! (#KS<Object,K> & {A: mut A160_554''..A160_555''})
//│ | | | | | | | | |   where 
//│ 		A160_541' <: A160_542'
//│ 		A160_554'' :> ((‘A543'' & A160_542') & ~(⊥(‘A556'''))) <: A160_555''
//│ 		A160_555'' :> ((‘A543'' & A160_542') & ~(⊥(‘A556'''))) <: ((A160_541' | ‘A543'') | ~(⊤(‘A556''')))
//│ | | | | | | | | | 2. C K[‘L539'] <! (#KS<Object,K> & {A: mut A160_554''..A160_555''})    (0)
//│ | | | | | | | | | | 2. C K[‘L539'] <! #KS<Object,K>    (2)
//│ | | | | | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | | | | | Set T157_570' ~> T157'
//│ | | | | | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L539'..‘L539'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | Set A160_571 ~> A160'
//│ | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | | | | 2. C K[‘L539'] <! {A: mut A160_554''..A160_555''}    (2)
//│ | | | | | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | | | | | Set T157_572' ~> T157'
//│ | | | | | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | Set A160_573 ~> A160'
//│ | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤})  <!  DNF(2, {A: mut A160_554''..A160_555''})
//│ | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤} <: DNF(2, {A: mut A160_554''..A160_555''})
//│ | | | | | | | | | | | | Possible: List({A: mut A160_554''..A160_555''})
//│ | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤}  %  List()  <!  List({A: mut A160_554''..A160_555''})  %  ⊥
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A160_554''..A160_555''}
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A160_554''..A160_555''}
//│ | | | | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | Lookup KS.A : Some(mut A160'..A160') where 
//│ | | | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | | | 2. C ⊥..⊤ <! A160_555''    (2)
//│ | | | | | | | | | | | | | | | | 2. C ⊤ <! A160_555''    (4)
//│ | | | | | | | | | | | | | | | | | NEW A160_555'' LB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! ((A160_541' | ‘A543'') | ~(⊤(‘A556''')))    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, )  <!  DNF(2, A160_541' | {}∧‘A543'' | ~(⊤(‘A556''')))
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(2, A160_541' | {}∧‘A543'' | ~(⊤(‘A556''')))
//│ | | | | | | | | | | | | | | | | | | | Possible: List(A160_541', {}∧‘A543'', ~(⊤(‘A556''')))
//│ | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(A160_541', ‘A543'', ~(⊤(‘A556''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(‘A543'', ~(⊤(‘A556''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(~(⊤(‘A556''')))  %  ‘A543''
//│ | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List(⊤(‘A556'''))  <!  List()  %  ‘A543''
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A556''')  %  List()  <!  List()  %  ‘A543''
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A556''') & ~(‘A543'')) <! A160_541'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (⊤(‘A556''') & ~(‘A543'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ⊤(‘A556''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A556''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘A543'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A543'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊥(‘A543''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | => (⊤(‘A556''') & ~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A556''') & ~(⊥(‘A543'')))  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A556''') & ~(⊥(‘A543''))) <! A160_541'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_541' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A556''') & ~(⊥(‘A543''))) <! A160_542'    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_542' LB (0)
//│ | | | | | | | | | | | | | | | 2. C A160_554'' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | | | 2. C A160_554'' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | | | NEW A160_554'' UB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ((‘A543'' & A160_542') & ~(⊥(‘A556'''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧‘A543''∧A160_542'∧~(⊥(‘A556''')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | 2. C A160_542' <! ~((‘A543'' & ~(⊥(‘A556'''))))    (8)
//│ | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] (~(‘A543'') | ⊥(‘A556''')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(‘A543'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A543'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A543''))
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ⊥(‘A556''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A556''')
//│ | | | | | | | | | | | | | | | | | | | | => (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (~(⊤(‘A543'')) | ⊥(‘A556'''))  to 1
//│ | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | 2. C A160_542' <! (~(⊤(‘A543'')) | ⊥(‘A556'''))    (8)
//│ | | | | | | | | | | | | | | | | | | | | | NEW A160_542' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A556''') & ~(⊥(‘A543''))) <! (~(⊤(‘A543'')) | ⊥(‘A556'''))    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, {}∧⊤(‘A556''')∧~(⊥(‘A543'')))  <!  DNF(0, ~(⊤(‘A543'')) | {}∧⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A556''') <: DNF(0, ~(⊤(‘A543'')) | {}∧⊥(‘A543''))
//│ | | | | | | | | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A543'')), {}∧⊥(‘A543''))
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A556''')  %  List()  <!  List(~(⊤(‘A543'')), ⊥(‘A543''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A556''')  %  List(⊤(‘A543''))  <!  List(⊥(‘A543''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A543'')∧⊤(‘A556''')  %  List()  <!  List(⊥(‘A543''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A543'')∧⊤(‘A556''')  %  List()  <!  List()  %  ⊥(‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A543''), ⊤(‘A556''')) List(⊥(‘A543''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A556''') & ~(⊥(‘A543''))) <: (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[-] (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A543'')) | {}∧⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A543''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊥(‘A556''') | ~(⊤(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A556''') & ~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A556''') & ~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A556''')∧~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A556''') & ~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α557''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α557'' :> Int
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C #error<> <! α557''    (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW α557'' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.194: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `??A1 | ~??A2`
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | 2. : α557''
//│ | | | | | | | 2. : α557''
//│ | | | | | | 2. : α557''
//│ | | | | | | CONSTRAIN α557'' <! α544'
//│ | | | | | |   where 
//│ 		α557'' :> #error<> | Int
//│ | | | | | | 2. C α557'' <! α544'    (0)
//│ | | | | | | | NEW α557'' UB (1)
//│ | | | | | | | 2. C #error<> <! α544'    (2)
//│ | | | | | | | | NEW α544' LB (0)
//│ | | | | | | | 2. C Int <! α544'    (2)
//│ | | | | | | | | NEW α544' LB (0)
//│ | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A160_541'..A160_542'})] + List() and [α544'] | ⊥
//│ | | | | | | finishing case K[‘L539'] <: (#KS<Object,K> & {A: mut A160_541'..A160_542'})
//│ | | | | | | CONSTRAIN K[‘L539'] <! (#KS<Object,K> & {A: mut A160_541'..A160_542'})
//│ | | | | | |   where 
//│ 		A160_541' :> (⊤(‘A556''') & ~(⊥(‘A543''))) <: A160_542'
//│ 		A160_542' :> (⊤(‘A556''') & ~(⊥(‘A543''))) <: (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | 1. C K[‘L539'] <! (#KS<Object,K> & {A: mut A160_541'..A160_542'})    (0)
//│ | | | | | | | 1. C K[‘L539'] <! #KS<Object,K>    (2)
//│ | | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | | Set T157_578' ~> T157'
//│ | | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L539'..‘L539'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | Set A160_579 ~> A160'
//│ | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | 1. C K[‘L539'] <! {A: mut A160_541'..A160_542'}    (2)
//│ | | | | | | | | Assigning T :: T157' := ‘L539' where 
//│ | | | | | | | | Set T157_580' ~> T157'
//│ | | | | | | | | Assigned Some(‘L539')
//│ | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | Set A160_581 ~> A160'
//│ | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤})  <!  DNF(1, {A: mut A160_541'..A160_542'})
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤} <: DNF(1, {A: mut A160_541'..A160_542'})
//│ | | | | | | | | | Possible: List({A: mut A160_541'..A160_542'})
//│ | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤}  %  List()  <!  List({A: mut A160_541'..A160_542'})  %  ⊥
//│ | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A160_541'..A160_542'}
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L539'..‘L539', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A160_541'..A160_542'}
//│ | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | Lookup KS.A : Some(mut A160'..A160') where 
//│ | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | 1. C ⊥..⊤ <! A160_542'    (2)
//│ | | | | | | | | | | | | | 1. C ⊤ <! A160_542'    (4)
//│ | | | | | | | | | | | | | | NEW A160_542' LB (0)
//│ | | | | | | | | | | | | | | 1. C ⊤ <! (~(⊤(‘A543'')) | ⊥(‘A556'''))    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, )  <!  DNF(0, ~(⊤(‘A543'')) | {}∧⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(0, ~(⊤(‘A543'')) | {}∧⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A543'')), {}∧⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(~(⊤(‘A543'')), ⊥(‘A556'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List(⊤(‘A543''))  <!  List(⊥(‘A556'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A543'')  %  List()  <!  List(⊥(‘A556'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A543'')  %  List()  <!  List()  %  ⊥(‘A556''')
//│ | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A543'')) List(⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[-] (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | norm[-] (~(⊤(‘A543'')) | ⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A543'')) | {}∧⊥(‘A556'''))
//│ | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A543''))
//│ | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A543'')
//│ | | | | | | | | | | | | | | | | | | | | | ~> (⊥(‘A556''') | ~(⊤(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α544'
//│ | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α544' :> Int | #error<>
//│ | | | | | | | | | | | | | | | | | | | | 1. C #error<> <! α544'    (0)
//│ | | | | | | | | | | | | | | | | | | | | | NEW α544' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.194: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `??A | ~??A0`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | | | | | 1. C A160_541' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | 1. C A160_541' <! ⊥    (4)
//│ | | | | | | | | | | | | | | NEW A160_541' UB (0)
//│ | | | | | | | | | | | | | | 1. C (⊤(‘A556''') & ~(⊥(‘A543''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A556''')∧~(⊥(‘A543'')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A556''') <: DNF(0, {}∧⊥(‘A543''))
//│ | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A543''))
//│ | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A556''')  %  List()  <!  List(⊥(‘A543''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A556''')  %  List()  <!  List()  %  ⊥(‘A543'')
//│ | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A556''')) List(⊥(‘A543''))
//│ | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A556''') & ~(⊥(‘A543''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A556''') & ~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A556''') & ~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A556''')∧~(⊥(‘A543'')))
//│ | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A556''') & ~(⊥(‘A543'')))
//│ | | | | | 1. : α544'
//│ | | | | 1. : α544'
//│ | | | 1. : α544'
//│ | | 1. : ((l: K[‘L539'], r: K[‘L539'],) -> α544')
//│ | | CONSTRAIN ((l: K[‘L539'], r: K[‘L539'],) -> α544') <! fr582'
//│ | |   where 
//│ 		α544' :> #error<> | Int | #error<>
//│ | | 1. C ((l: K[‘L539'], r: K[‘L539'],) -> α544') <! fr582'    (0)
//│ | | | NEW fr582' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None)))))),((l: K[‘L539'], r: K[‘L539'],) -> α544')) where 
//│ 		α544' :> #error<> | Int | #error<>
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun fr: ‹∀ 0. ((l: K[‘L539'], r: K[‘L539'],) -> α544')› where 
//│ |		α544' :> #error<> | Int | #error<>
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> (Int | error)




// :e
// fun fr[L](l: K[L], r: K[L]) =
//   if l is KS(e1) and r is KS(e2) then [e1, e2] : [K[L], K[L]] else 0










// * TODO investigate: 'L0 :> ??A <: ??A0 bad bounds?
// :d
:e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K['X])
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.851: 	fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K['X])
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `nothing`
//│ fun fr: forall 'L. (l: K['L]) -> (forall 'X. error | () -> K['X])
//│   where
//│     'X :> ??A
//│        <: ??A0

// Doesn't happen here:
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K['X])
//│ fun fr: forall 'L 'X. (l: K['L]) -> K[in ??A & 'X out 'X | ??A0]

// ~~Doesn't happen~~ happens here:
:e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K[l.A])
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.867: 	fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K[l.A])
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `nothing`
//│ fun fr: forall 'L. (l: K['L]) -> (error | () -> K[in ??A out ??A0])




// :d
:e
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[S['X]])
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[l.A])
//│ fun fr: forall 'L. (l: K['L]) -> K[in ??A out ??A0]



