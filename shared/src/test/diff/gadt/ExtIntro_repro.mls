:NewDefs
:DontDistributeForalls

:NoJS



class Z 
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }



(x: S) => x as S[?]
//│ (x: S[?]) -> S[?]


class Foo[type A](val foo: Foo[A])
//│ class Foo[A](foo: Foo[A])


(x: Foo[?]) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x as Foo
//│ (x: Foo[?]) -> Foo[?]

(x: Foo[?]) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

(x: Foo) => x.foo as Foo[?]
//│ (x: Foo[?]) -> Foo[?]

:e
(x: Foo) => x.foo as x.A
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.43: 	(x: Foo) => x.foo as x.A
//│ ║        	            ^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	                           ^^^^^^
//│ (x: Foo[?]) -> ??A

:e
(x: Foo[?]) => x.foo as x.A
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── type `Foo[?]` does not match type `nothing`
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ║        	                           ^^^^^^
//│ ╟── but it flows into field selection with expected type `nothing`
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ║        	               ^^^^^
//│ ╟── Note: constraint arises from type selection:
//│ ║  l.53: 	(x: Foo[?]) => x.foo as x.A
//│ ╙──      	                         ^^
//│ (x: Foo[?]) -> anything

:e
(x: Foo) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.69: 	(x: Foo) => if x is
//│ ║        	               ^^^^
//│ ║  l.70: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.71: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.23: 	class Foo[type A](val foo: Foo[A])
//│ ╙──      	               ^
//│ (x: Foo[?]) -> (error | ??A & ??A0)

:e
(x: Foo[?]) => if x is
  Foo then
    x.foo as x.A
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.85: 	(x: Foo[?]) => if x is
//│ ║        	                  ^^^^
//│ ║  l.86: 	  Foo then
//│ ║        	^^^^^^^^^^
//│ ║  l.87: 	    x.foo as x.A
//│ ║        	^^^^^^^^^
//│ ╙── expression of type `Foo[in ??A out ??A0 & ?A] & ~??A` does not match type `nothing`
//│ (x: Foo[?]) -> ??A



fun fz(l) =
  if l is Foo(ea) and 0 is 0 then
    ea : Foo[ea.A]
//│ fun fz: forall 'A 'A0. Foo[in 'A out 'A0] -> Foo[in 'A & 'A0 | ??A out ??A0 & 'A0]











// abstract class K[type T]: KZ | KS[?]
abstract class K[type T]: KS[?]
// class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?]
//│ class KS[A](ev: K[A]) extends K

:d

fun fz(l) =
  if l is KS(ea) then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A0 out 'A] -> K[in S[?] | 'A0 & 'A | ??A out ??A0 & 'A & S[?]]


// :d
fun fz(l) =
  if l is KS(ea) then
    () => ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> () -> K[in S[in anything out nothing] | 'A & 'A0 out S[?] & ??A & 'A0]

// :d
fun fz(l) =
  if l is KS(ea) and 0 is 0 then
    ea : K[ea.T]
//│ fun fz: forall 'A 'A0. KS[in 'A out 'A0] -> K[in S[in anything out nothing] | 'A & 'A0 out S[?] & ??A & 'A0]



fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[ea.T] = ea ; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0


// fun fr: (K['L], K['L]) -> Int

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.154: 	fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[L]
//│ ║         	                        ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `L | ~??A`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ fun fr: forall 'L. (l: K['L]) -> (K['L] | error)

:e
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K[S['X]]
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

// :d
fun fr[L](l: K[L]) = if l is KS(e1) then e1 as K['X]
//│ fun fr: forall 'L 'X. (l: K['L]) -> K[in ??A & 'X out 'X | ??A0]




fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then [(e1 as K['X]), e2 as K['X]] else 0
//│ fun fr: forall 'L 'X 'X0. (l: K['L], r: K['L]) -> (0 | [K[in ??A & 'X out 'X | ??A0], K[in ??A1 & 'X0 out 'X0 | ??A2]])



// MIN

fun sig: (K['L], K['L]) -> Int
//│ fun sig: forall 'L. (K['L], K['L]) -> Int

:d
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None))))))
//│ | Completing fun fr = (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | Type params (TypeName(L),L535',TypeParamInfo(None,false,None,None))
//│ | | Params 
//│ | | Type fr polymorphically? true && (0 === 0 || false || false
//│ | | 1. Typing term (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | 1. Typing pattern [l: K‹L›, r: K‹L›,]
//│ | | | | 1. Typing pattern l : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L535') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L535'
//│ | | | | | | => K[‘L535']
//│ | | | | | => K[‘L535'] ——— 
//│ | | | | 1. : K[‘L535']
//│ | | | | 1. Typing pattern r : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L535') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L535'
//│ | | | | | | => K[‘L535']
//│ | | | | | => K[‘L535'] ——— 
//│ | | | | 1. : K[‘L535']
//│ | | | 1. : (l: K[‘L535'], r: K[‘L535'],)
//│ | | | 1. Typing term {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)}
//│ | | | | 1. Typing term if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then sig(e1, e2,)
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(l); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))
//│ | | | | | [Desugarer.destructPattern] Result: «l is Var(KS)»
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(r); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e2))))))
//│ | | | | | [Desugarer.destructPattern] Result: «r is Var(KS)»
//│ | | | | | Desugared term: case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | 1. Typing term case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) } }
//│ | | | | | | 1. Typing term l
//│ | | | | | | 1. : K[‘L535']
//│ | | | | | | CONSTRAIN K[‘L535'] <! Object
//│ | | | | | |   where 
//│ | | | | | | 1. C K[‘L535'] <! Object    (0)
//│ | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | Set T157_536' ~> T157'
//│ | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L535'..‘L535'}) <! #Object<>    (2)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | Match arm KS: #KS<Object,K> & {A: mut A160_537'..A160_538'} intl {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}
//│ | | | | | | var rfn: l :: K[‘L535'] & #KS<Object,K> & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}
//│ | | | | | | 2. Typing term let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | 2. Typing term (KS).unapply(l,)
//│ | | | | | | | | 2. Typing term (KS).unapply
//│ | | | | | | | | | 2. Typing term (x::14,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | 3. Typing pattern [x::14,]
//│ | | | | | | | | | | | 3. Typing pattern x::14
//│ | | | | | | | | | | | 3. : x541'''
//│ | | | | | | | | | | 3. : (x541''',)
//│ | | | | | | | | | | 3. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | 3. Typing term x : KS
//│ | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | 3. : x541'''
//│ | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | vars=Map(L -> ‘L535') newDefsInfo=Map()
//│ | | | | | | | | | | | | | 3. type TypeName(KS)
//│ | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | CONSTRAIN x541''' <! #KS<Object,K>
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C x541''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | NEW x541''' UB (0)
//│ | | | | | | | | | | | 3. : #KS<Object,K>
//│ | | | | | | | | | | | 3. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | 3. Typing term (x).#ev
//│ | | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | | 3. : x541'''
//│ | | | | | | | | | | | | | CONSTRAIN x541''' <! {#ev: #ev542'''}
//│ | | | | | | | | | | | | |   where 
//│ 		x541''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | 3. C x541''' <! {#ev: #ev542'''}    (0)
//│ | | | | | | | | | | | | | | NEW x541''' UB (3)
//│ | | | | | | | | | | | | 3. : #ev542'''
//│ | | | | | | | | | | | 3. : (#ev542''',)
//│ | | | | | | | | | | 3. : (#ev542''',)
//│ | | | | | | | | | | Inferred poly constr: (x541''' -> (#ev542''',))  —— where 
//│ 		x541''' <: {#ev: #ev542'''} & #KS<Object,K>
//│ | | | | | | | | | 2. : ‹∀ 2. (x541''' -> (#ev542''',))›
//│ | | | | | | | | 2. : ‹∀ 2. (x541''' -> (#ev542''',))›
//│ | | | | | | | | 2. Typing term l
//│ | | | | | | | | 2. : ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')})
//│ | | | | | | | | CONSTRAIN ‹∀ 2. (x541''' -> (#ev542''',))› <! (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}) -> α543'')
//│ | | | | | | | |   where 
//│ 		A160_537' <: A160_538'
//│ 		x541''' <: {#ev: #ev542'''} & #KS<Object,K>
//│ | | | | | | | | 2. C ‹∀ 2. (x541''' -> (#ev542''',))› <! (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}) -> α543'')    (0)
//│ | | | | | | | | | INST [2]   ‹∀ 2. (x541''' -> (#ev542''',))›
//│ | | | | | | | | |   where  
//│ 		x541''' <: {#ev: #ev542'''} & #KS<Object,K>
//│ | | | | | | | | | TO [2] ~>  (x541_544'' -> (#ev542_545'',))
//│ | | | | | | | | |   where  
//│ 		x541_544'' <: {#ev: #ev542_545''} & #KS<Object,K>
//│ | | | | | | | | | 2. C (x541_544'' -> (#ev542_545'',)) <! (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}) -> α543'')    (2)
//│ | | | | | | | | | | 2. C (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}),) <! (x541_544'',)    (2)
//│ | | | | | | | | | | | 2. C ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}) <! x541_544''    (3)
//│ | | | | | | | | | | | | NEW x541_544'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}) <! {#ev: #ev542_545''}    (6)
//│ | | | | | | | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | | | | | | | Set T157_546' ~> T157'
//│ | | | | | | | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | Set A160_547 ~> A160'
//│ | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | 2. ARGH  DNF(2, #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_537' | ‘A539'')..(‘A539'' & A160_538')})  <!  DNF(2, {#ev: #ev542_545''})
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_537' | ‘A539'')..(‘A539'' & A160_538')} <: DNF(2, {#ev: #ev542_545''})
//│ | | | | | | | | | | | | | | Possible: List({#ev: #ev542_545''})
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_537' | ‘A539'')..(‘A539'' & A160_538')}  %  List()  <!  List({#ev: #ev542_545''})  %  ⊥
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_537' | ‘A539'')..(‘A539'' & A160_538')}  %  List()  <!  List()  %  {#ev:#ev542_545''}
//│ | | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_537' | ‘A539'')..(‘A539'' & A160_538')}  %  List()  <!  List()  %  |{#ev:#ev542_545''}
//│ | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A160']) where 
//│ | | | | | | | | | | | | | | | | | | Lookup: Found mut (A160_537' | ‘A539'')..(‘A539'' & A160_538')
//│ | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A160_537' | ‘A539'')..(‘A539'' & A160_538')]) where Some(
//│ 		A160_537' <: A160_538')
//│ | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | 2. C K[(A160_537' | ‘A539'')..(‘A539'' & A160_538')] <! #ev542_545''    (5)
//│ | | | | | | | | | | | | | | | | | | NEW #ev542_545'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_537' | ‘A539'')..(A160_538' & ‘A539'')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | 2. C (#ev542_545'',) <! α543''    (2)
//│ | | | | | | | | | | | NEW α543'' LB (2)
//│ | | | | | | | 2. : α543''
//│ | | | | | | | 2. Typing term let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | 2. Typing term ($unapp).0
//│ | | | | | | | | | 2. Typing term $unapp
//│ | | | | | | | | | 2. : α543''
//│ | | | | | | | | | CONSTRAIN α543'' <! {0: α548''}
//│ | | | | | | | | |   where 
//│ 		A160_537' <: A160_538'
//│ 		α543'' :> (#ev542_545'',)
//│ 		#ev542_545'' :> K[(A160_537' | ‘A539'')..(‘A539'' & A160_538')]
//│ | | | | | | | | | 2. C α543'' <! {0: α548''}    (0)
//│ | | | | | | | | | | NEW α543'' UB (2)
//│ | | | | | | | | | | 2. C (#ev542_545'',) <! {0: α548''}    (2)
//│ | | | | | | | | | | | 2. C {0: #ev542_545''} <! {0: α548''}    (4)
//│ | | | | | | | | | | | | 2. C #ev542_545'' <! α548''    (3)
//│ | | | | | | | | | | | | | NEW #ev542_545'' UB (2)
//│ | | | | | | | | | | | | | 2. C K[(A160_537' | ‘A539'')..(‘A539'' & A160_538')] <! α548''    (5)
//│ | | | | | | | | | | | | | | NEW α548'' LB (2)
//│ | | | | | | | | 2. : α548''
//│ | | | | | | | | 2. Typing term case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,) }
//│ | | | | | | | | | 2. Typing term r
//│ | | | | | | | | | 2. : K[‘L535']
//│ | | | | | | | | | CONSTRAIN K[‘L535'] <! Object
//│ | | | | | | | | |   where 
//│ | | | | | | | | | 2. C K[‘L535'] <! Object    (0)
//│ | | | | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | | | | Set T157_549' ~> T157'
//│ | | | | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L535'..‘L535'}) <! #Object<>    (2)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | Match arm KS: #KS<Object,K> & {A: mut A160_550''..A160_551''} intl {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}
//│ | | | | | | | | | var rfn: r :: K[‘L535'] & #KS<Object,K> & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}
//│ | | | | | | | | | 3. Typing term let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | 3. Typing term (KS).unapply(r,)
//│ | | | | | | | | | | | 3. Typing term (KS).unapply
//│ | | | | | | | | | | | | 3. Typing term (x::15,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | | | | 4. Typing pattern [x::15,]
//│ | | | | | | | | | | | | | | 4. Typing pattern x::15
//│ | | | | | | | | | | | | | | 4. : x554''''
//│ | | | | | | | | | | | | | 4. : (x554'''',)
//│ | | | | | | | | | | | | | 4. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | | 4. Typing term x : KS
//│ | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | 4. : x554''''
//│ | | | | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | | | | vars=Map(L -> ‘L535') newDefsInfo=Map()
//│ | | | | | | | | | | | | | | | | 4. type TypeName(KS)
//│ | | | | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | | | | CONSTRAIN x554'''' <! #KS<Object,K>
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | 4. C x554'''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | | | | NEW x554'''' UB (0)
//│ | | | | | | | | | | | | | | 4. : #KS<Object,K>
//│ | | | | | | | | | | | | | | 4. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | | | | 4. Typing term (x).#ev
//│ | | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | | 4. : x554''''
//│ | | | | | | | | | | | | | | | | CONSTRAIN x554'''' <! {#ev: #ev555''''}
//│ | | | | | | | | | | | | | | | |   where 
//│ 		x554'''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | | | | 4. C x554'''' <! {#ev: #ev555''''}    (0)
//│ | | | | | | | | | | | | | | | | | NEW x554'''' UB (4)
//│ | | | | | | | | | | | | | | | 4. : #ev555''''
//│ | | | | | | | | | | | | | | 4. : (#ev555'''',)
//│ | | | | | | | | | | | | | 4. : (#ev555'''',)
//│ | | | | | | | | | | | | | Inferred poly constr: (x554'''' -> (#ev555'''',))  —— where 
//│ 		x554'''' <: {#ev: #ev555''''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. : ‹∀ 3. (x554'''' -> (#ev555'''',))›
//│ | | | | | | | | | | | 3. : ‹∀ 3. (x554'''' -> (#ev555'''',))›
//│ | | | | | | | | | | | 3. Typing term r
//│ | | | | | | | | | | | 3. : ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')})
//│ | | | | | | | | | | | CONSTRAIN ‹∀ 3. (x554'''' -> (#ev555'''',))› <! (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}) -> α556''')
//│ | | | | | | | | | | |   where 
//│ 		A160_550'' <: A160_551''
//│ 		x554'''' <: {#ev: #ev555''''} & #KS<Object,K>
//│ | | | | | | | | | | | 3. C ‹∀ 3. (x554'''' -> (#ev555'''',))› <! (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}) -> α556''')    (0)
//│ | | | | | | | | | | | | INST [3]   ‹∀ 3. (x554'''' -> (#ev555'''',))›
//│ | | | | | | | | | | | |   where  
//│ 		x554'''' <: {#ev: #ev555''''} & #KS<Object,K>
//│ | | | | | | | | | | | | TO [3] ~>  (x554_557''' -> (#ev555_558''',))
//│ | | | | | | | | | | | |   where  
//│ 		x554_557''' <: {#ev: #ev555_558'''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. C (x554_557''' -> (#ev555_558''',)) <! (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}) -> α556''')    (2)
//│ | | | | | | | | | | | | | 3. C (((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}),) <! (x554_557''',)    (2)
//│ | | | | | | | | | | | | | | 3. C ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}) <! x554_557'''    (3)
//│ | | | | | | | | | | | | | | | NEW x554_557''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}) <! {#ev: #ev555_558'''}    (6)
//│ | | | | | | | | | | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | | | | | | | | | | Set T157_559' ~> T157'
//│ | | | | | | | | | | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | | | | Set A160_560 ~> A160'
//│ | | | | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | | | | 3. ARGH  DNF(3, #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_550'' | ‘A552''')..(‘A552''' & A160_551'')})  <!  DNF(3, {#ev: #ev555_558'''})
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_550'' | ‘A552''')..(‘A552''' & A160_551'')} <: DNF(3, {#ev: #ev555_558'''})
//│ | | | | | | | | | | | | | | | | | Possible: List({#ev: #ev555_558'''})
//│ | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_550'' | ‘A552''')..(‘A552''' & A160_551'')}  %  List()  <!  List({#ev: #ev555_558'''})  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_550'' | ‘A552''')..(‘A552''' & A160_551'')}  %  List()  <!  List()  %  {#ev:#ev555_558'''}
//│ | | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut (A160_550'' | ‘A552''')..(‘A552''' & A160_551'')}  %  List()  <!  List()  %  |{#ev:#ev555_558'''}
//│ | | | | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A160']) where 
//│ | | | | | | | | | | | | | | | | | | | | | Lookup: Found mut (A160_550'' | ‘A552''')..(‘A552''' & A160_551'')
//│ | | | | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A160_550'' | ‘A552''')..(‘A552''' & A160_551'')]) where Some(
//│ 		A160_550'' <: A160_551'')
//│ | | | | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | | | | 3. C K[(A160_550'' | ‘A552''')..(‘A552''' & A160_551'')] <! #ev555_558'''    (5)
//│ | | | | | | | | | | | | | | | | | | | | | NEW #ev555_558''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L535'] & #KS<Object,K>) & {A: mut (A160_550'' | ‘A552''')..(A160_551'' & ‘A552''')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | 3. C (#ev555_558''',) <! α556'''    (2)
//│ | | | | | | | | | | | | | | NEW α556''' LB (3)
//│ | | | | | | | | | | 3. : α556'''
//│ | | | | | | | | | | 3. Typing term let e2 = ($unapp).0 in sig(e1, e2,)
//│ | | | | | | | | | | | 3. Typing term ($unapp).0
//│ | | | | | | | | | | | | 3. Typing term $unapp
//│ | | | | | | | | | | | | 3. : α556'''
//│ | | | | | | | | | | | | CONSTRAIN α556''' <! {0: α561'''}
//│ | | | | | | | | | | | |   where 
//│ 		A160_550'' <: A160_551''
//│ 		α556''' :> (#ev555_558''',)
//│ 		#ev555_558''' :> K[(A160_550'' | ‘A552''')..(‘A552''' & A160_551'')]
//│ | | | | | | | | | | | | 3. C α556''' <! {0: α561'''}    (0)
//│ | | | | | | | | | | | | | NEW α556''' UB (3)
//│ | | | | | | | | | | | | | 3. C (#ev555_558''',) <! {0: α561'''}    (2)
//│ | | | | | | | | | | | | | | 3. C {0: #ev555_558'''} <! {0: α561'''}    (4)
//│ | | | | | | | | | | | | | | | 3. C #ev555_558''' <! α561'''    (3)
//│ | | | | | | | | | | | | | | | | NEW #ev555_558''' UB (3)
//│ | | | | | | | | | | | | | | | | 3. C K[(A160_550'' | ‘A552''')..(‘A552''' & A160_551'')] <! α561'''    (5)
//│ | | | | | | | | | | | | | | | | | NEW α561''' LB (3)
//│ | | | | | | | | | | | 3. : α561'''
//│ | | | | | | | | | | | 3. Typing term sig(e1, e2,)
//│ | | | | | | | | | | | | 3. Typing term sig
//│ | | | | | | | | | | | | 3. : ‹∀ 0. ‹∀ 0. ((K['L530'], K['L530'],) -> Int)››
//│ | | | | | | | | | | | | 3. Typing term e1
//│ | | | | | | | | | | | | 3. : α548''
//│ | | | | | | | | | | | | 3. Typing term e2
//│ | | | | | | | | | | | | 3. : α561'''
//│ | | | | | | | | | | | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L530'], K['L530'],) -> Int)›› <! ((α548'', α561''',) -> α562''')
//│ | | | | | | | | | | | |   where 
//│ 		A160_537' <: A160_538'
//│ 		α548'' :> K[(A160_537' | ‘A539'')..(‘A539'' & A160_538')]
//│ 		A160_550'' <: A160_551''
//│ 		α561''' :> K[(A160_550'' | ‘A552''')..(‘A552''' & A160_551'')]
//│ | | | | | | | | | | | | 3. C ‹∀ 0. ‹∀ 0. ((K['L530'], K['L530'],) -> Int)›› <! ((α548'', α561''',) -> α562''')    (0)
//│ | | | | | | | | | | | | | 3. C ‹∀ 0. ((K['L530'], K['L530'],) -> Int)› <! ((α548'', α561''',) -> α562''')    (2)
//│ | | | | | | | | | | | | | | INST [0]   ‹∀ 0. ((K['L530'], K['L530'],) -> Int)›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [3] ~>  ((K['L530_563'''], K['L530_563'''],) -> Int)
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 3. C ((K['L530_563'''], K['L530_563'''],) -> Int) <! ((α548'', α561''',) -> α562''')    (4)
//│ | | | | | | | | | | | | | | | 3. C (α548'', α561''',) <! (K['L530_563'''], K['L530_563'''],)    (3)
//│ | | | | | | | | | | | | | | | | 3. C α548'' <! K['L530_563''']    (4)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[-] K['L530_563'''] || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] 'L530_563''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[+] 'L530_563''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | => 'L530_564''
//│ | | | | | | | | | | | | | | | | | | => 'L530_564''
//│ | | | | | | | | | | | | | | | | | | EXTR[-] 'L530_563''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] 'L530_563''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] 'L530_564'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | => 'L530_564''
//│ | | | | | | | | | | | | | | | | | | | => 'L530_565''
//│ | | | | | | | | | | | | | | | | | | => 'L530_565''
//│ | | | | | | | | | | | | | | | | | => K[? :> 'L530_564'' <: 'L530_565'']
//│ | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L530_564''
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L530_565''
//│ | | | | | | | | | | | | | | | | | EXTR RHS  ~>  K[? :> 'L530_564'' <: 'L530_565'']  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ 		'L530_565'' <: 'L530_564''
//│ | | | | | | | | | | | | | | | | | 3. C α548'' <! K[? :> 'L530_564'' <: 'L530_565'']    (4)
//│ | | | | | | | | | | | | | | | | | | NEW α548'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C K[(A160_537' | ‘A539'')..(‘A539'' & A160_538')] <! K[? :> 'L530_564'' <: 'L530_565'']    (7)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L530_564'' <! (A160_537' | ‘A539'')..(‘A539'' & A160_538')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L530_564'' <! (A160_537' | ‘A539'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L530_564'' <! (A160_537' | ‘A539'')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L530_564'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | 3. C (A160_537' | ‘A539'')..(‘A539'' & A160_538') <! 'L530_565''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A539'' & A160_538') <! 'L530_565''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A539'' & A160_538') <! 'L530_565''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L530_565'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A539'' & A160_538') <! 'L530_564''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L530_564'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A539'' & A160_538') <! (A160_537' | ‘A539'')    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 3. C α561''' <! K['L530_563''']    (4)
//│ | | | | | | | | | | | | | | | | | NEW α561''' UB (3)
//│ | | | | | | | | | | | | | | | | | 3. C K[(A160_550'' | ‘A552''')..(‘A552''' & A160_551'')] <! K['L530_563''']    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C (A160_550'' | ‘A552''')..(‘A552''' & A160_551'') <! 'L530_563'''    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A552''' & A160_551'') <! 'L530_563'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A552''' & A160_551'') <! 'L530_563'''    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L530_563''' LB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A552''' & A160_551'') <! 'L530_564''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (A160_551'' & ‘A552''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] A160_551'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A160_551''
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A552''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A552''')
//│ | | | | | | | | | | | | | | | | | | | | | | => (A160_551'' & ⊤(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (A160_551'' & ⊤(‘A552'''))  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (A160_551'' & ⊤(‘A552''')) <! 'L530_564''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L530_564'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (A160_551'' & ⊤(‘A552''')) <! (A160_537' | ‘A539'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧⊤(‘A552''')∧A160_551'')  <!  DNF(2, A160_537' | {}∧‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A160_551'' <! ((A160_537' | ‘A539'') | ~(⊤(‘A552''')))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_551'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C 'L530_563''' <! (A160_550'' | ‘A552''')..(‘A552''' & A160_551'')    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L530_563''' <! (A160_550'' | ‘A552''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L530_563''' <! (A160_550'' | ‘A552''')    (6)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L530_563''' UB (3)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A552''' & A160_551'') <! (A160_550'' | ‘A552''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L530_565'' <! (A160_550'' | ‘A552''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] (‘A552''' | A160_550'') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A552''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A552''')
//│ | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A160_550'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | | => A160_550''
//│ | | | | | | | | | | | | | | | | | | | | | | => (⊥(‘A552''') | A160_550'')
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (⊥(‘A552''') | A160_550'')  to 2
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		A160_537' <: A160_538'
//│ 		A160_550'' <: A160_551''
//│ 		A160_551'' <: ((A160_537' | ‘A539'') | ~(⊤(‘A552''')))
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C 'L530_565'' <! (⊥(‘A552''') | A160_550'')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'L530_565'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A539'' & A160_538') <! (⊥(‘A552''') | A160_550'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘A539''∧A160_538')  <!  DNF(2, {}∧⊥(‘A552''') | A160_550'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C A160_538' <! ((⊥(‘A552''') | A160_550'') | ~(‘A539''))    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A539'' & A160_538') & ~(⊥(‘A552'''))) <! A160_550''    (14)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_550'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A539'' & A160_538') & ~(⊥(‘A552'''))) <! A160_551''    (16)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_551'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C ((‘A539'' & A160_538') & ~(⊥(‘A552'''))) <! ((A160_537' | ‘A539'') | ~(⊤(‘A552''')))    (18)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | 3. C Int <! α562'''    (3)
//│ | | | | | | | | | | | | | | | | NEW α562''' LB (0)
//│ | | | | | | | | | | | 3. : α562'''
//│ | | | | | | | | | | 3. : α562'''
//│ | | | | | | | | | 3. : α562'''
//│ | | | | | | | | | CONSTRAIN α562''' <! α553''
//│ | | | | | | | | |   where 
//│ 		α562''' :> Int
//│ | | | | | | | | | 3. C α562''' <! α553''    (0)
//│ | | | | | | | | | | NEW α562''' UB (2)
//│ | | | | | | | | | | 3. C Int <! α553''    (2)
//│ | | | | | | | | | | | NEW α553'' LB (0)
//│ | | | | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A160_550''..A160_551''})] + List() and [α553''] | ⊥
//│ | | | | | | | | | finishing case K[‘L535'] <: (#KS<Object,K> & {A: mut A160_550''..A160_551''})
//│ | | | | | | | | | CONSTRAIN K[‘L535'] <! (#KS<Object,K> & {A: mut A160_550''..A160_551''})
//│ | | | | | | | | |   where 
//│ 		A160_537' <: A160_538'
//│ 		A160_550'' :> ((‘A539'' & A160_538') & ~(⊥(‘A552'''))) <: A160_551''
//│ 		A160_551'' :> ((‘A539'' & A160_538') & ~(⊥(‘A552'''))) <: ((A160_537' | ‘A539'') | ~(⊤(‘A552''')))
//│ | | | | | | | | | 2. C K[‘L535'] <! (#KS<Object,K> & {A: mut A160_550''..A160_551''})    (0)
//│ | | | | | | | | | | 2. C K[‘L535'] <! #KS<Object,K>    (2)
//│ | | | | | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | | | | | Set T157_566' ~> T157'
//│ | | | | | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L535'..‘L535'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | Set A160_567 ~> A160'
//│ | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | | | | 2. C K[‘L535'] <! {A: mut A160_550''..A160_551''}    (2)
//│ | | | | | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | | | | | Set T157_568' ~> T157'
//│ | | | | | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | Set A160_569 ~> A160'
//│ | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤})  <!  DNF(2, {A: mut A160_550''..A160_551''})
//│ | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤} <: DNF(2, {A: mut A160_550''..A160_551''})
//│ | | | | | | | | | | | | Possible: List({A: mut A160_550''..A160_551''})
//│ | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤}  %  List()  <!  List({A: mut A160_550''..A160_551''})  %  ⊥
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A160_550''..A160_551''}
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A160_550''..A160_551''}
//│ | | | | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | Lookup KS.A : Some(mut A160'..A160') where 
//│ | | | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | | | 2. C ⊥..⊤ <! A160_551''    (2)
//│ | | | | | | | | | | | | | | | | 2. C ⊤ <! A160_551''    (4)
//│ | | | | | | | | | | | | | | | | | NEW A160_551'' LB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! ((A160_537' | ‘A539'') | ~(⊤(‘A552''')))    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, )  <!  DNF(2, A160_537' | {}∧‘A539'' | ~(⊤(‘A552''')))
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(2, A160_537' | {}∧‘A539'' | ~(⊤(‘A552''')))
//│ | | | | | | | | | | | | | | | | | | | Possible: List(A160_537', {}∧‘A539'', ~(⊤(‘A552''')))
//│ | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(A160_537', ‘A539'', ~(⊤(‘A552''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(‘A539'', ~(⊤(‘A552''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(~(⊤(‘A552''')))  %  ‘A539''
//│ | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List(⊤(‘A552'''))  <!  List()  %  ‘A539''
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A552''')  %  List()  <!  List()  %  ‘A539''
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A552''') & ~(‘A539'')) <! A160_537'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (⊤(‘A552''') & ~(‘A539'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ⊤(‘A552''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A552''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘A539'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A539'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊥(‘A539''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | => (⊤(‘A552''') & ~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A552''') & ~(⊥(‘A539'')))  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A552''') & ~(⊥(‘A539''))) <! A160_537'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_537' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A552''') & ~(⊥(‘A539''))) <! A160_538'    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A160_538' LB (0)
//│ | | | | | | | | | | | | | | | 2. C A160_550'' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | | | 2. C A160_550'' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | | | NEW A160_550'' UB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ((‘A539'' & A160_538') & ~(⊥(‘A552'''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧‘A539''∧A160_538'∧~(⊥(‘A552''')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | 2. C A160_538' <! ~((‘A539'' & ~(⊥(‘A552'''))))    (8)
//│ | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | EXTR[-] (~(‘A539'') | ⊥(‘A552''')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(‘A539'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A539'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A539''))
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ⊥(‘A552''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A552''')
//│ | | | | | | | | | | | | | | | | | | | | => (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (~(⊤(‘A539'')) | ⊥(‘A552'''))  to 1
//│ | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | 2. C A160_538' <! (~(⊤(‘A539'')) | ⊥(‘A552'''))    (8)
//│ | | | | | | | | | | | | | | | | | | | | | NEW A160_538' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A552''') & ~(⊥(‘A539''))) <! (~(⊤(‘A539'')) | ⊥(‘A552'''))    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, {}∧⊤(‘A552''')∧~(⊥(‘A539'')))  <!  DNF(0, ~(⊤(‘A539'')) | {}∧⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A552''') <: DNF(0, ~(⊤(‘A539'')) | {}∧⊥(‘A539''))
//│ | | | | | | | | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A539'')), {}∧⊥(‘A539''))
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A552''')  %  List()  <!  List(~(⊤(‘A539'')), ⊥(‘A539''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A552''')  %  List(⊤(‘A539''))  <!  List(⊥(‘A539''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A539'')∧⊤(‘A552''')  %  List()  <!  List(⊥(‘A539''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A539'')∧⊤(‘A552''')  %  List()  <!  List()  %  ⊥(‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A539''), ⊤(‘A552''')) List(⊥(‘A539''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A552''') & ~(⊥(‘A539''))) <: (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[-] (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A539'')) | {}∧⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A539''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊥(‘A552''') | ~(⊤(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A552''') & ~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A552''') & ~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A552''')∧~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A552''') & ~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α553''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α553'' :> Int
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C #error<> <! α553''    (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW α553'' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.191: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `??A1 | ~??A2`
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | 2. : α553''
//│ | | | | | | | 2. : α553''
//│ | | | | | | 2. : α553''
//│ | | | | | | CONSTRAIN α553'' <! α540'
//│ | | | | | |   where 
//│ 		α553'' :> #error<> | Int
//│ | | | | | | 2. C α553'' <! α540'    (0)
//│ | | | | | | | NEW α553'' UB (1)
//│ | | | | | | | 2. C #error<> <! α540'    (2)
//│ | | | | | | | | NEW α540' LB (0)
//│ | | | | | | | 2. C Int <! α540'    (2)
//│ | | | | | | | | NEW α540' LB (0)
//│ | | | | | | finishing branch: [(#KS<Object,K>,{A: mut A160_537'..A160_538'})] + List() and [α540'] | ⊥
//│ | | | | | | finishing case K[‘L535'] <: (#KS<Object,K> & {A: mut A160_537'..A160_538'})
//│ | | | | | | CONSTRAIN K[‘L535'] <! (#KS<Object,K> & {A: mut A160_537'..A160_538'})
//│ | | | | | |   where 
//│ 		A160_537' :> (⊤(‘A552''') & ~(⊥(‘A539''))) <: A160_538'
//│ 		A160_538' :> (⊤(‘A552''') & ~(⊥(‘A539''))) <: (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | 1. C K[‘L535'] <! (#KS<Object,K> & {A: mut A160_537'..A160_538'})    (0)
//│ | | | | | | | 1. C K[‘L535'] <! #KS<Object,K>    (2)
//│ | | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | | Set T157_574' ~> T157'
//│ | | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L535'..‘L535'}) <! #KS<Object,K>    (4)
//│ | | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | Set A160_575 ~> A160'
//│ | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤})  <!  DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤} <: DNF(0, #KS<Object,K>{})
//│ | | | | | | | | | | OK  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤} <: #KS<Object,K>{}
//│ | | | | | | | 1. C K[‘L535'] <! {A: mut A160_537'..A160_538'}    (2)
//│ | | | | | | | | Assigning T :: T157' := ‘L535' where 
//│ | | | | | | | | Set T157_576' ~> T157'
//│ | | | | | | | | Assigned Some(‘L535')
//│ | | | | | | | | Assigning A :: A160' := ? :> ⊥ <: ⊤
//│ | | | | | | | | Set A160_577 ~> A160'
//│ | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤})  <!  DNF(1, {A: mut A160_537'..A160_538'})
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤} <: DNF(1, {A: mut A160_537'..A160_538'})
//│ | | | | | | | | | Possible: List({A: mut A160_537'..A160_538'})
//│ | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤}  %  List()  <!  List({A: mut A160_537'..A160_538'})  %  ⊥
//│ | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤}  %  List()  <!  List()  %  {A:mut A160_537'..A160_538'}
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{T: mut ‘L535'..‘L535', A: mut ..⊤}  %  List()  <!  List()  %  |{A:mut A160_537'..A160_538'}
//│ | | | | | | | | | | | | Looking up field A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | Lookup KS.A : Some(mut A160'..A160') where 
//│ | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | Fresh[0] KS.A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | 1. C ⊥..⊤ <! A160_538'    (2)
//│ | | | | | | | | | | | | | 1. C ⊤ <! A160_538'    (4)
//│ | | | | | | | | | | | | | | NEW A160_538' LB (0)
//│ | | | | | | | | | | | | | | 1. C ⊤ <! (~(⊤(‘A539'')) | ⊥(‘A552'''))    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, )  <!  DNF(0, ~(⊤(‘A539'')) | {}∧⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(0, ~(⊤(‘A539'')) | {}∧⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A539'')), {}∧⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(~(⊤(‘A539'')), ⊥(‘A552'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List(⊤(‘A539''))  <!  List(⊥(‘A552'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A539'')  %  List()  <!  List(⊥(‘A552'''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A539'')  %  List()  <!  List()  %  ⊥(‘A552''')
//│ | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A539'')) List(⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[-] (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | norm[-] (~(⊤(‘A539'')) | ⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A539'')) | {}∧⊥(‘A552'''))
//│ | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A539''))
//│ | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A539'')
//│ | | | | | | | | | | | | | | | | | | | | | ~> (⊥(‘A552''') | ~(⊤(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! α540'
//│ | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α540' :> Int | #error<>
//│ | | | | | | | | | | | | | | | | | | | | 1. C #error<> <! α540'    (0)
//│ | | | | | | | | | | | | | | | | | | | | | NEW α540' LB (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.191: 	  if l is KS(e1) and r is KS(e2) then sig(e1, e2)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `??A | ~??A0`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.118: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | | | | | 1. C A160_537' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | 1. C A160_537' <! ⊥    (4)
//│ | | | | | | | | | | | | | | NEW A160_537' UB (0)
//│ | | | | | | | | | | | | | | 1. C (⊤(‘A552''') & ~(⊥(‘A539''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A552''')∧~(⊥(‘A539'')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A552''') <: DNF(0, {}∧⊥(‘A539''))
//│ | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A539''))
//│ | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A552''')  %  List()  <!  List(⊥(‘A539''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A552''')  %  List()  <!  List()  %  ⊥(‘A539'')
//│ | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A552''')) List(⊥(‘A539''))
//│ | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A552''') & ~(⊥(‘A539''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A552''') & ~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A552''') & ~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A552''')∧~(⊥(‘A539'')))
//│ | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A552''') & ~(⊥(‘A539'')))
//│ | | | | | 1. : α540'
//│ | | | | 1. : α540'
//│ | | | 1. : α540'
//│ | | 1. : ((l: K[‘L535'], r: K[‘L535'],) -> α540')
//│ | | CONSTRAIN ((l: K[‘L535'], r: K[‘L535'],) -> α540') <! fr578'
//│ | |   where 
//│ 		α540' :> #error<> | Int | #error<>
//│ | | 1. C ((l: K[‘L535'], r: K[‘L535'],) -> α540') <! fr578'    (0)
//│ | | | NEW fr578' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(sig),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),None)))))),((l: K[‘L535'], r: K[‘L535'],) -> α540')) where 
//│ 		α540' :> #error<> | Int | #error<>
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun fr: ‹∀ 0. ((l: K[‘L535'], r: K[‘L535'],) -> α540')› where 
//│ |		α540' :> #error<> | Int | #error<>
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> (Int | error)




// :e
// fun fr[L](l: K[L], r: K[L]) =
//   if l is KS(e1) and r is KS(e2) then [e1, e2] : [K[L], K[L]] else 0










// * TODO investigate: 'L0 :> ??A <: ??A0 bad bounds?
// :d
// :e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K['X])
//│ fun fr: forall 'L 'X. (l: K['L]) -> () -> K[in ??A & 'X out 'X | ??A0]

// Doesn't happen here:
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K['X])
//│ fun fr: forall 'X 'L. (l: K['L]) -> K[in ??A & 'X out 'X | ??A0]

// ~~Doesn't happen~~ happens here:
// :e
fun fr[L](l: K[L]) = if l is KS(e1) then () => (e1 as K[l.A])
//│ fun fr: forall 'L. (l: K['L]) -> () -> K[in ??A out ??A0]




// :d
:e
fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[S['X]])
//│ ╔══[ERROR] Type `??A` does not contain member `P`
//│ ║  l.9: 	class S[type P]
//│ ╙──     	             ^
//│ fun fr: forall 'L. (l: K['L]) -> (K[S[error]] | error)

fun fr[L](l: K[L]) = if l is KS(e1) then (e1 as K[l.A])
//│ fun fr: forall 'L. (l: K['L]) -> K[in ??A out ??A0]




