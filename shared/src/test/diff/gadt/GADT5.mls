:NewDefs

abstract class Option[out T]: None | Some[T]
class None extends Option[nothing]
class Some[A](get: A) extends Option[A]
//│ abstract class Option[T]: None | Some[T]
//│ class None extends Option {
//│   constructor()
//│ }
//│ class Some[A](get: A) extends Option

abstract class U[type A]: MkU
module MkU extends U[()]
//│ abstract class U[A]: MkU
//│ module MkU extends U

fun v1(u: U['a], a: ()) = if u is MkU then a
//│ fun v1: forall 'a. (u: U['a], a: ()) -> ()

fun v2(a, u: U['a]) = if u is MkU then if a is () then () as u.A
//│ fun v2: forall 'a. ((), u: U['a]) -> (() & 'a)

abstract class F[type A, type B]: MkF
class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ abstract class F[A, B]: MkF[?, anything]
//│ class MkF[Z, Y](y: Y) extends F

let t = MkF(true)
t : F[Option[nothing], Bool]
//│ let t: forall 'Z. MkF['Z, 'Y]
//│ F[Option[nothing], Bool]
//│ where
//│   'Y := Bool
//│ t
//│   = MkF {}
//│ res
//│     = MkF {}

let x: F[Option[nothing], Option[nothing]] = MkF(new None)
//│ let x: F[Option[nothing], Option[nothing]]
//│ x
//│   = MkF {}

:e
MkF(x) : F[Option[Int], Option[Int]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.45: 	MkF(x) : F[Option[Int], Option[Int]]
//│ ║        	^^^^^^
//│ ╟── type `MkF[?, anything] & {B = Option[nothing], A = Option[nothing]}` is not an instance of type `Option`
//│ ║  l.39: 	let x: F[Option[nothing], Option[nothing]] = MkF(new None)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Option[anything]`
//│ ║  l.45: 	MkF(x) : F[Option[Int], Option[Int]]
//│ ║        	    ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.45: 	MkF(x) : F[Option[Int], Option[Int]]
//│ ╙──      	                        ^^^^^^^^^^^
//│ F[Option[Int], Option[Int]]
//│ res
//│     = MkF {}

fun g: forall 'T: F['T, 'T] -> 'T
fun g[T](x: F[T, T]): T = if x is
    MkF(m) then m : x.B
//│ fun g: forall 'T. (x: F['T, 'T]) -> 'T
//│ fun g: forall 'T0. F['T0, 'T0] -> 'T0

g(MkF(new None))
//│ None | Option[nothing]
//│ res
//│     = None {}

g(MkF(Some(1)))
//│ Option['A] | Some['A]
//│   where
//│     'A :> 1
//│ res
//│     = Some {}

:e
g(MkF(1))
g(t)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.81: 	g(MkF(1))
//│ ║        	^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `Option`
//│ ║  l.81: 	g(MkF(1))
//│ ║        	      ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ║        	                                ^^^^^^^^^
//│ ╟── from type variable:
//│ ║  l.62: 	fun g: forall 'T: F['T, 'T] -> 'T
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.82: 	g(t)
//│ ║        	^^^^
//│ ╟── expression of type `true` is not an instance of type `Option`
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ║        	                                ^^^^^^^^^
//│ ╟── from type variable:
//│ ║  l.62: 	fun g: forall 'T: F['T, 'T] -> 'T
//│ ╙──      	                        ^^
//│ error
//│ res
//│     = 1
//│ res
//│     = true

fun g[T](x: MkF[T, Option[T]]): Option[T] = if x is
    MkF(None) then new None : x.B
    else error
//│ fun g: forall 'T. (x: MkF['T, Option['T]]) -> Option['T]

g(MkF(new None))
//│ Option[nothing]
//│ res
//│     = None {}

// * nested pattern matching causes recursion depth limit ?

// FIXME
fun g[T](x: F[Option[T], Option[T]]): Option[T] = if x is
    MkF(None) then new None : x.B
    else error
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.124: 	fun g[T](x: F[Option[T], Option[T]]): Option[T] = if x is
//│ ║         	                                                     ^^^^
//│ ║  l.125: 	    MkF(None) then new None : x.B
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.126: 	    else error
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type variable `Y` leaks out of its scope
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ║        	             ^
//│ ╟── into `case` expression of type `Object | ~??Y`
//│ ║  l.125: 	    MkF(None) then new None : x.B
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.126: 	    else error
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ╙──      	                ^
//│ fun g: forall 'T. (x: F[Option['T], Option['T]]) -> Option['T]

// FIXME
fun g: forall 'T: F['T, 'T] -> 'T
fun g[T](x: F[T, T]): T = if x is
    MkF(None) then new None : x.B
    else error
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.149: 	fun g[T](x: F[T, T]): T = if x is
//│ ║         	                             ^^^^
//│ ║  l.150: 	    MkF(None) then new None : x.B
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.151: 	    else error
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type variable `Y` leaks out of its scope
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ║        	             ^
//│ ╟── into `case` expression of type `Object | ~??Y`
//│ ║  l.150: 	    MkF(None) then new None : x.B
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.151: 	    else error
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ╙──      	                ^
//│ fun g: forall 'T. (x: F['T, 'T]) -> 'T
//│ fun g: forall 'T0. F['T0, 'T0] -> 'T0

// FIXME
fun g: forall 'T: F['T, 'T] -> 'T
fun g[T](x: F[T, T]): T = if x is
    MkF(m) then if m is
        None then (new None) as x.B
        else error
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.175: 	fun g[T](x: F[T, T]): T = if x is
//│ ║         	                             ^^^^
//│ ║  l.176: 	    MkF(m) then if m is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.177: 	        None then (new None) as x.B
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.178: 	        else error
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `Y` leaks out of its scope
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ║        	             ^
//│ ╟── into `case` expression of type `Object | ~??Y`
//│ ║  l.176: 	    MkF(m) then if m is
//│ ║         	                   ^^^^
//│ ║  l.177: 	        None then (new None) as x.B
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.178: 	        else error
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.24: 	class MkF[Z, Y](y: Y) extends F[Option[Z], Y]
//│ ╙──      	                ^
//│ fun g: forall 'T. (x: F['T, 'T]) -> 'T
//│ fun g: forall 'T0. F['T0, 'T0] -> 'T0

abstract class Foo[type A, type B]: Bar
class Bar(val a: Option[Int]) extends Foo[Option[Int], Option[Int]]
//│ abstract class Foo[A, B]: Bar
//│ class Bar(a: Option[Int]) extends Foo

fun foo[T](x: Foo[T, T]): T = if x is
    Bar(Some(a)) then Some(a) as x.A
    Bar(None)    then (new None) as x.A
//│ fun foo: forall 'T. (x: Foo['T, 'T]) -> 'T
