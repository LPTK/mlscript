:NoJS

// TODO investigate why this makes many tests fail:
:GeneralizeCurriedFunctions
:NoRecursiveTypes


// ------------ Dummy classes to represent the types in the examples ------------

class List[a]
  method Get: a
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a

// Used to represent `::`
def cons: 'a -> List['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]

// Used to represent `[]`
def nil: List['a]
//│ nil: List[nothing]

def concat: string -> List[string] -> string
//│ concat: string -> List[string] -> string


// ------------ Examples ------------


// (* s  starts a sequence, cps style *)
def s k = k () nil
//│ s: (() -> (List[nothing] -> 'a & 'b) & 'c) -> 'a

def insert v () acu k = k () (cons v acu)
//│ insert: 'b -> () -> (forall 'c. 'c -> (forall 'b, 'c, 'a, 'd, 'e, 'f, 'g. ((() -> ((List['a | 'b] | 'd) -> 'e & 'f) & 'g) -> 'e
//│   where
//│     'c <: List['a])))

// (* x  inserts "x" in the acu *)
def x () = insert "x" ()
//│ x: () -> (forall 'b. 'b -> (forall 'b, 'a, 'c, 'd, 'e, 'f, 'g. ((() -> ((List["x" | 'a | 'c] | 'd) -> 'e & 'f) & 'g) -> 'e
//│   where
//│     'b <: List['a])) | 'h)

// (* We call x a 'token', in the sequence. *)

// (* e  ends the sequence. It builds a token that can be inserted in another sequence or that can be printed. *)
def e () acu = insert (concat "," acu)
//│ e: () -> (forall 'b. (List[string] & 'b) -> (() -> (forall 'c. 'c -> (forall 'c, 'a, 'd, 'e, 'f, 'g, 'h. ((() -> ((List['a | string | 'd] | 'e) -> 'f & 'g) & 'h) -> 'f
//│   where
//│     'c <: List['a]))) | 'i))


// (* Prints a token *)
def print t = t () nil (fun () -> fun r -> log (concat "," r))
//│ print: (() -> (List['a] -> ((() -> (forall 'a, 'b. (List[string] & 'b) -> (unit | 'a))) -> 'c & 'd) & 'e) & 'f) -> 'c

// Added by me:
// :e // FIXME? refreshing-extr
s x x (s x x e)
//│ res: nothing


// :e // FIXME? refreshing-extr
def test8  = (s x x (s x x e) x (s x x x e) e)
//│ test8: nothing

print test8
//│ res: nothing


// :e // FIXME — works with :RecursiveTypes // Works since inconsistent constrained types...
def test14 = (s x x x x x x x x x x x x x x e)
//│ test14: nothing

// :e // FIXME — works with :RecursiveTypes // Works since inconsistent constrained types...
def test16 = (s x x x x x x x x x x x x x x x x e)
//│ test16: nothing

// (* This is too much for the type-checker. *)
// :e // FIXME — works with :RecursiveTypes // Works since inconsistent constrained types...
def test18 = (s x x x x x x x x x x x x x x x x x x e)
//│ test18: nothing

:RecursiveTypes
def test18 = (s x x x x x x x x x x x x x x x x x x e)
//│ test18: nothing
:NoRecursiveTypes


// (* A function that receives a token *)
def f t = (s x x t x x e)
//│ f: 'a -> 'b

// (* If the token is used twice, we must reveive two arguments *)
def g t1 t2 = (s x x t1 x (s x t2 x e) e)
//│ g: 'a -> (forall 'b, 'c. 'b -> 'c)

// (* This does not type. It requires first-class polymorphism. *)
def h t = g t t
//│ h: ('a & 'b & 'c) -> (forall 'd. 'd | 'e)

