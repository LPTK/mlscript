:NoRecursiveTypes
:GeneralizeCurriedFunctions

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'c, 'tail, 'head, 'd. (List['a] & 'c & 'tail) -> ((Cons['a | 'b] with {head: 'head | 'b, tail: 'tail}) | 'd))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ (List['a & 'b] & 'c & 'this) -> 'b
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ (List['a] & 'b & 'this) -> (List['a] | 'c)
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List['a] -> bool
//│         = <missing implementation>
//│ ('a & 'b) -> (bool | 'c)
//│   <:  is_empty:
//│ List['a] -> bool
//│         = [Function: is_empty]

def single: forall 'a. 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ ('a & 'b) -> (List['b] | 'c)
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ List[?] -> List['a] -> List['a]
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: forall 'a. List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List['a] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List['a] -> int
//│       = [Function: length]

def id: forall 'a. 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def inc: int -> int
inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: succ]

def choose: forall 'a. 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> (forall 'b, 'c, 'd. ('b & 'c & 'd) -> ('a | 'd))
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def map: forall 'a 'b. ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ (nothing -> 'a) -> List[?] -> List['a]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: forall 'a 'b. ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: forall 'a 'b. 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> (forall 'b, 'c. ('a -> 'b & 'c) -> 'b)
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]



// ============ Sec 2 ============

// FreezeML B1
def poly (f: forall 'a. 'a -> 'a) = (f 1, f true)
def poly_ f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (1 | 'b, true | 'c,)
//│     = [Function: poly]
//│ poly_: (true -> 'a & 1 -> 'b & 'c) -> ('b, 'a,)
//│      = [Function: poly_]

// FreezeML A10
poly id
poly_ id
//│ res: (1 | 'a, true | 'b,)
//│    = [ 1, true ]
//│ res: (1, true,)
//│    = [ 1, true ]

// FreezeML A11
poly (fun x -> x)
poly_ (fun x -> x)
//│ res: (1 | 'a, true | 'b,)
//│    = [ 1, true ]
//│ res: (1, true,)
//│    = [ 1, true ]

// FreezeML D1
app poly id
app poly_ id
//│ res: (1 | 'a, true | 'b,)
//│    = [ 1, true ]
//│ res: (1, true,)
//│    = [ 1, true ]

// FreezeML D2
revapp id poly
revapp id poly_
//│ res: (1 | 'a, true | 'b,)
//│    = [ 1, true ]
//│ res: (1, true,)
//│    = [ 1, true ]

// FreezeML C9
map poly (single id)
map poly_ (single id)
//│ res: List[forall 'a, 'b. (1 | 'a, true | 'b,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }
//│ res: List[(1, true,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// FreezeML C7
append (single inc) (single id)
//│ res: List[forall 'a. (int & 'a) -> ('a | int)]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

let ids = single id in
  (map poly ids, append (single inc) ids)
//│ res: (List[forall 'b, 'c. (1 | 'b, true | 'c,)], List[forall 'a. (int & 'a) -> ('a | int)],)
//│    = [
//│        Cons { head: [ 1, true ], tail: Nil {} },
//│        Cons {
//│          head: [Function: succ],
//│          tail: Cons { head: [Function: id1], tail: Nil {} }
//│        }
//│      ]

// FreezeML A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

fun (f: forall 'a. 'a -> 'a) -> poly f
fun f -> poly f
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b, 'c. (1 | 'b, true | 'c,))
//│    = [Function: res]
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b, 'c. (1 | 'b, true | 'c,))
//│    = [Function: res]

// ============ Sec 4 ============

// FreezeML C4
ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// ============ Sec 7 ============

xs = cons id ids
//│ xs: List[forall 'a. 'a -> 'a]
//│   = Cons {
//│       head: [Function: id1],
//│       tail: Cons { head: [Function: id1], tail: Nil {} }
//│     }

ys = tail ids
//│ ys: List[forall 'a. 'a -> 'a]
//│   = Nil {}

zs = map id (tail (cons id ids))
//│ zs: List[forall 'a. 'a -> 'a]
//│   = Cons { head: [Function: id1], tail: Nil {} }

def foo: (int -> (forall 'a. 'a -> 'a)) -> int
poly (fun x -> x)
foo (fun y -> fun x -> x)
//│ foo: (int -> (forall 'a. 'a -> 'a)) -> int
//│    = <missing implementation>
//│ res: (1 | 'a, true | 'b,)
//│    = [ 1, true ]
//│ res: int
//│    = <no result>
//│      foo is not implemented
