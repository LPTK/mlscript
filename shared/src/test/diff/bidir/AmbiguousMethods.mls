:BidirTyping


class A
  method Test = 0
  method Test2 = 0
//│ Defined class A
//│ Defined A.Test: A -> 0
//│ Defined A.Test2: A -> 0

def foooo(x) = x.(A.Test2)
//│ foooo: A -> 0
//│      = [Function: foooo]

class B
  method Test = "ok"
//│ Defined class B
//│ Defined B.Test: B -> "ok"


def foo1(x) = x + 1
//│ foo1: int -> int
//│     = [Function: foo1]

:e
def foo1(x) =
  x.Test
//│ ╔══[ERROR] Implicit call to method Test is forbidden because it is ambiguous.
//│ ║  l.27: 	  x.Test
//│ ║        	  ^^^^^^
//│ ╟── Unrelated methods named Test are defined by:
//│ ╟── • class A
//│ ║  l.4: 	class A
//│ ║       	      ^
//│ ╟── • class B
//│ ║  l.15: 	class B
//│ ╙──      	      ^
//│ foo1: anything -> error
//│     = [Function: foo11]

def foo2(x: A) =
  x.Test
//│ foo2: A -> 0
//│     = [Function: foo2]


def foo2: A -> int
//│ foo2: A -> int
//│     = <missing implementation>

def foo2(x) =
  x.Test
//│ A -> 0
//│   <:  foo2:
//│ A -> int
//│     = [Function: foo21]


def foo3(x: B) =
  x.Test
//│ foo3: B -> "ok"
//│     = [Function: foo3]


type T = (A, B)
//│ Defined type alias T

// TODO
def foo4((x, y): T) =
  (x.Test, y.Test)
//│ foo4: T -> (0, "ok",)
//│     = [Function: foo4]

