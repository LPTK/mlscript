:NewDefs


// * Adapted example from Code reuse through polymorphic variants (FOSE 2000)


class Cons[out A](head: A, tail: Cons[A] | Nil)
module Nil
//│ class Cons[A](head: A, tail: Cons[A] | Nil)
//│ module Nil

let l = Cons(1, Nil)
//│ let l: Cons[1]
//│ l
//│   = Cons {}

class NotFound()
class Success[out A](result: A)
//│ class NotFound()
//│ class Success[A](result: A)

fun list_assoc(s, l) =
  if l is
    Cons(h, t) then
      if s === h.0 then Success(h.1)
      else list_assoc(s, t)
    Nil then NotFound()
//│ fun list_assoc: forall 'a 'A. (Eql['a], Cons[{0: 'a, 1: 'A} | ~??A] | Nil) -> (NotFound | Success['A])

// fun list_assoc(s: Str, l: Cons[{ _1: Str, _2: 'b }] | Nil): NotFound | Success['b]

class Var(s: Str)
//│ class Var(s: Str)

mixin EvalVar {
  fun eval(sub, v) =
    if v is Var(s) then
      if list_assoc(s, sub) is
        NotFound then v
        Success(r) then r
}
//│ mixin EvalVar() {
//│   fun eval: (Cons[{0: anything, 1: 'A} | ~??A] | Nil, Var) -> (Var | ??A0 & 'A)
//│ }

class Abs[A](x: Str, t: A)
class App[A](s: A, t: A)
//│ class Abs[A](x: Str, t: A)
//│ class App[A](s: A, t: A)

fun gensym(): Str = "fun"
//│ fun gensym: () -> Str

fun int_to_string(x: Int): Str = "0"
//│ fun int_to_string: (x: Int) -> Str

mixin EvalLambda {
  fun eval(sub, v) =
    if v is
      App(t1, t2) then
        let l1 = this.eval(sub, t1)
        let l2 = this.eval(sub, t2)
        if t1 is
          Abs(x, t) then this.eval(Cons([x, l2], Nil), t)
        else
          App(l1, l2)
      Abs(x, t) then
        let s = gensym()
        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
    else
      super.eval(sub, v)
}
//│ mixin EvalLambda() {
//│   super: {eval: ('a, 'b) -> 'c}
//│   this: {
//│     eval: ('a, ??A & 'A) -> ('d & 'e) & (Cons[[Str, 'e]], ??A0 & 'A0) -> 'c & (Cons[[Str, Var] | 'A1], ??A1 & 'A2) -> 'f
//│   }
//│   fun eval: ('a & (Cons['A1] | Nil), Abs['A2] | App['A & (Abs['A0] | Object & ~#Abs | ~??A2)] | Object & 'b & ~#Abs & ~#App) -> (Abs['f] | App['d | 'e] | 'c)
//│ }

module Test1 extends EvalVar, EvalLambda
//│ module Test1 {
//│   fun eval: (Cons[{0: anything, 1: 'A} | ~??A] | Nil, Abs['A0] | App['A1] | Var) -> 'a
//│ }
//│ where
//│   'A0 <: Abs['A0] | App['A1] | Var | ~??A0
//│   'A1 <: Abs['A0 & (Abs['A0] | App['A1] | Var | ~??A1)] | Abs['A0] & ~#Abs | App['A1] | Var | ~??A2
//│   'A :> 'a
//│   'a :> App['b] | Abs['c] | Var | ??A3 & 'A
//│   'c :> 'a
//│   'b :> 'a

Test1.eval(Nil, Var("a"))
//│ 'a
//│   where
//│     'a :> Abs['b] | Var | App['c]
//│     'c :> 'a
//│     'b :> 'a
//│ res
//│     = Var {}

Test1.eval(Nil, Abs("b", Var("a")))
//│ 'a
//│   where
//│     'a :> App['b] | Abs['c] | Var
//│     'c :> 'a
//│     'b :> 'a
//│ res
//│     = Abs {}

Test1.eval(Cons(["c", Var("d")], Nil), App(Abs("b", Var("b")), Var("c")))
//│ 'a
//│   where
//│     'a :> Abs['b] | Var | App['c]
//│     'c :> 'a
//│     'b :> 'a
//│ res
//│     = Var {}

Test1.eval(Cons(["c", Abs("d", Var("d"))], Nil), App(Abs("b", Var("b")), Var("c")))
//│ 'a
//│   where
//│     'a :> App['b] | Abs['c] | Abs[Var] & ??A | Var
//│     'c :> 'a
//│     'b :> 'a
//│ res
//│     = Abs {}

class Numb(n: Int)
class Add[A](l: A, r: A)
class Mul[A](l: A, r: A)
//│ class Numb(n: Int)
//│ class Add[A](l: A, r: A)
//│ class Mul[A](l: A, r: A)

fun map_expr(f, v) =
  if v is
    Var then v
    Numb then v
    Add(l, r) then Add(f(l), f(r))
    Mul(l, r) then Mul(f(l), f(r))
//│ fun map_expr: forall 'A 'a 'A0 'b. ((??A & 'A) -> 'a & (??A0 & 'A0) -> 'b, Add['A] | Mul['A0] | Numb | Var) -> (Add['a] | Mul['b] | Numb | Var)

mixin EvalExpr {
  fun eval(sub, v) =
    let eta(e) = this.eval(sub, e)
    let vv = map_expr(eta, v)
    if vv is
      Var then super.eval(sub, vv)
      Add(Numb(l), Numb(r)) then Numb(l + r)
      Mul(Numb(l), Numb(r)) then Numb(l * r)
    else v
}
//│ mixin EvalExpr() {
//│   super: {eval: ('a, Var) -> 'b}
//│   this: {eval: ('a, ??A & 'A | ??A0 & 'A0) -> (Object | ~??A1 & ~??A2)}
//│   fun eval: ('a, 'b & (Add['A0] | Mul['A] | Numb | Var)) -> (Numb | 'b)
//│ }

module Test2 extends EvalVar, EvalExpr
//│ module Test2 {
//│   fun eval: forall 'a. (Cons[{0: anything, 1: 'A & (Object | ~??A | ~??A0 & ~??A1)} | ~??A2] | Nil, 'a & (Add['A0] | Mul['A1] | Numb | Var)) -> (Numb | Var | ??A3 & 'A1 | ??A & 'A | ??A4 & 'A0 | 'a)
//│ }
//│ where
//│   'A0 <: Add['A0] | Mul['A1] | Numb | Var | ~??A4
//│   'A1 <: Add['A0] | Mul['A1] | Numb | Var | ~??A3

Test2.eval(Nil, Var("a"))
//│ Numb | Var
//│ res
//│     = Var {}

Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Var("a"))
//│ Abs[Var] & ??A | Numb | Var
//│ res
//│     = Var {}

Test2.eval(Cons(["a", Numb(1)], Nil), Var("a"))
//│ Numb | Var
//│ res
//│     = Numb {}

// * This expected error shows that Test2 does not handle Abs expression inputs
:e
Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.185: 	Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Add[?A0] | Mul[?A1] | Numb | Var`
//│ ║  l.185: 	Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.137: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.147: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ Abs[Var] | Numb | Var | error
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression

Test2.eval(Cons(["a", Abs("d", Var("d"))], Nil), Add(Numb(1), Var("a")))
//│ Abs[Var] & ??A | Add[Numb | Var] | Numb | Var
//│ res
//│     = Add {}

module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ module Test3 {
//│   fun eval: (Cons[{0: anything, 1: 'A} | ~??A] | Nil, Abs['A0] | App['A1] | Object & 'a & ~#Abs & ~#App) -> 'b
//│ }
//│ where
//│   'A :> 'b
//│      <: Object | ~(??A0 & (??A1 | ??A2))
//│   'b :> App['c] | Abs['d] | Numb | Var | ??A0 & 'A | 'a
//│   'a <: Add[Abs['A0] | App['A1] | 'a & (Object & ~#Abs & ~#App | ~#Abs & ~#App & ~??A3) | ~??A3] | Mul[Abs['A0] | App['A1] | 'a & (Object & ~#Abs & ~#App | ~#Abs & ~#App & ~??A4) | ~??A4] | Numb | Var
//│   'A0 <: Abs['A0] | App['A1] | 'a & (Object & ~#Abs & ~#App | ~#Abs & ~#App & ~??A5) | ~??A5
//│   'A1 <: Abs['A0 & (Abs['A0] | App['A1] | Object & 'a & ~#Abs & ~#App | ~??A6)] | Abs['A0] & ~#Abs | App['A1] | Object & 'a & ~#Abs & ~#App | ~??A7
//│   'd :> 'b
//│   'c :> 'b

Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ 'a
//│   where
//│     'a :> App['b] | Abs['c] | Abs[Var] & ??A | Numb | Var
//│     'c :> 'a
//│     'b :> 'a
//│ res
//│     = Abs {}

Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), App(Abs("a", Var("a")), Add(Numb(1), Var("c"))))
//│ 'a
//│   where
//│     'a :> App['b] | Abs['c] | Abs[Var] & ??A | Add[Numb | Var] & ??A0 | Numb | Var
//│     'c :> 'a
//│     'b :> 'a
//│ res
//│     = Add {}

// * Incorrect version, for regression testing – EvalLambda should be mixed in after EvalExpr
module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ module Test3 {
//│   fun eval: (Cons[{0: anything, 1: 'A} | ~??A] | Nil, 'a & (Add['A0] | Mul['A1] | Numb | Var)) -> (??A0 & 'A1 | ??A1 & 'A0 | 'a | 'b)
//│ }
//│ where
//│   'A :> ??A0 & 'A1 | ??A1 & 'A0 | 'a | 'b
//│      <: Object | ~(??A2 & (??A3 | ??A4))
//│   'b :> Abs[Numb | ??A0 & 'A1 | ??A1 & 'A0 | 'a | 'b] | App[Numb | ??A0 & 'A1 | ??A1 & 'A0 | 'a | 'b] | Numb | Var | ??A0 & 'A1 | ??A2 & 'A | ??A1 & 'A0 | 'a
//│   'A1 <: Add['A0] | Mul['A1] | Numb | Var | ~??A0
//│   'A0 <: Add['A0] | Mul['A1] | Numb | Var | ~??A1

// * Because EvalExpr does not dispatch lambdas to super and map_expr only
// * handles exprs
:e
Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.255: 	Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?A]` does not match type `Add[?A0] | Mul[?A1] | Numb | Var`
//│ ║  l.255: 	Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil), Abs("a", Var("a")))
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.137: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.147: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ Abs[Var] | error | 'a
//│   where
//│     'a :> Abs[Abs[Var] | Numb | 'a] | App[Abs[Var] | Numb | 'a] | Numb | Var
//│ res
//│ Runtime error:
//│   Error: non-exhaustive case expression

