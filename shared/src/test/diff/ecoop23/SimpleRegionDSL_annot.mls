:NewDefs


// * Adapted example from Compositional Embeddings of Domain-Specific Languages (OOPSLA 2022)


// ******************* Initial System *******************

class Vector(val x: Int, val y: Int)
//│ class Vector(x: Int, y: Int)

class Circle(radius: Int)
class Outside[out Region](a: Region)
class Union[out Region](a: Region, b: Region)
class Intersect[out Region](a: Region, b: Region)
class Translate[out Region](v: Vector, a: Region)
//│ class Circle(radius: Int)
//│ class Outside[Region](a: Region)
//│ class Union[Region](a: Region, b: Region)
//│ class Intersect[Region](a: Region, b: Region)
//│ class Translate[Region](v: Vector, a: Region)

type BaseLang[T] = Circle | Intersect[T] | Union[T] | Outside[T] | Translate[T]
//│ type BaseLang[T] = Circle | Intersect[T] | Outside[T] | Translate[T] | Union[T]

mixin SizeBase {
  fun size(r) =
    if r is
      Circle(_) then 1
      Outside(a) then this.size(a) + 1
      Union(a, b) then this.size(a) + this.size(b) + 1
      Intersect(a, b) then this.size(a) + this.size(b) + 1
      Translate(_, a) then this.size(a) + 1
}
//│ mixin SizeBase() {
//│   this: {size: 'a -> Int}
//│   fun size: (Circle | Intersect['a] | Outside['a] | Translate['a] | Union['a]) -> Int
//│ }

// ******************* Linguistic Reuse and Meta-Language Optimizations *******************

fun round(n: Num): Int = 0
//│ fun round: (n: Num) -> Int

fun go(x, offset) =
  if x is 0 then Circle(1)
  else
    let shared = go(x - 1, round(offset / 2))
    Union(Translate(Vector(0 - offset, 0), shared), Translate(Vector(offset, 0), shared))
//│ fun go: forall 'a. (0 | Int & ~0, Int) -> (Circle | 'a)
//│   where
//│     'a :> Union[Translate[Circle | 'a]]

// * Note that first-class polymorphism manages (correctly) to preserve the universal quantification
let circles = go(2, 1024)
//│ let circles: forall 'a. Circle | 'a
//│   where
//│     'a :> Union[Translate[Circle | 'a]]
//│ circles
//│         = Union {}

// ******************* Adding More Language Constructs *******************

class Univ()
class Empty()
class Scale[out Region](v: Vector, a: Region)
//│ class Univ()
//│ class Empty()
//│ class Scale[Region](v: Vector, a: Region)

type ExtLang[T] = Univ | Empty | Scale[T]
//│ type ExtLang[T] = Empty | Scale[T] | Univ

mixin SizeExt {
  fun size(a) =
    if a is
      Univ then 1
      Empty then 1
      Scale(_, b) then this.size(b) + 1
    else super.size(a)
}
//│ mixin SizeExt() {
//│   super: {size: 'a -> 'b}
//│   this: {size: 'c -> Int}
//│   fun size: (Empty | Object & 'a & ~#Empty & ~#Scale & ~#Univ | Scale['c] | Univ) -> (Int | 'b)
//│ }

type RegionLang = BaseLang[RegionLang] | ExtLang[RegionLang]
//│ type RegionLang = BaseLang[RegionLang] | ExtLang[RegionLang]

module TestSize extends SizeBase, SizeExt {
  fun size: RegionLang -> Int
}
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	module TestSize extends SizeBase, SizeExt {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	  fun size: RegionLang -> Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	}
//│ ║        	^
//│ ╟── expression of type `RegionLang -> Int & ?a -> (?b | ?c)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.79: 	      Scale(_, b) then this.size(b) + 1
//│ ║        	                       ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.79: 	      Scale(_, b) then this.size(b) + 1
//│ ╙──      	                       ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	module TestSize extends SizeBase, SizeExt {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	  fun size: RegionLang -> Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	}
//│ ║        	^
//│ ╟── expression of type `RegionLang -> Int & ?a -> (?b | ?c)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.33: 	      Translate(_, a) then this.size(a) + 1
//│ ║        	                           ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.33: 	      Translate(_, a) then this.size(a) + 1
//│ ╙──      	                           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	module TestSize extends SizeBase, SizeExt {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	  fun size: RegionLang -> Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	}
//│ ║        	^
//│ ╟── expression of type `RegionLang -> Int & ?a -> (?b | ?c)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                                          ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                                          ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	module TestSize extends SizeBase, SizeExt {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	  fun size: RegionLang -> Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	}
//│ ║        	^
//│ ╟── expression of type `RegionLang -> Int & ?a -> (?b | ?c)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                           ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	module TestSize extends SizeBase, SizeExt {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	  fun size: RegionLang -> Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	}
//│ ║        	^
//│ ╟── expression of type `RegionLang -> Int & ?a -> (?b | ?c)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                                      ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                                      ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	module TestSize extends SizeBase, SizeExt {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	  fun size: RegionLang -> Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	}
//│ ║        	^
//│ ╟── expression of type `RegionLang -> Int & ?a -> (?b | ?c)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                       ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                       ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	module TestSize extends SizeBase, SizeExt {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	  fun size: RegionLang -> Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	}
//│ ║        	^
//│ ╟── expression of type `RegionLang -> Int & ?a -> (?b | ?c)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.30: 	      Outside(a) then this.size(a) + 1
//│ ║        	                      ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.30: 	      Outside(a) then this.size(a) + 1
//│ ╙──      	                      ^^^^^^^^^
//│ module TestSize {
//│   fun size: RegionLang -> Int
//│ }

TestSize.size(Empty())
//│ Int
//│ res
//│     = 1

TestSize.size(circles)
//│ Int
//│ res
//│     = 13

TestSize.size(Scale(Vector(1, 1), circles))
//│ Int
//│ res
//│     = 14

// ******************* Adding a New Interpretation *******************
// a stupid power (Int ** Int) implementation
fun pow(x, a) =
  if a is 0 then 1
  else x * pow(x, a - 1)
//│ fun pow: (Int, 0 | Int & ~0) -> Int

mixin Contains {
  fun contains(a, p) =
    if a is
      Circle(r) then pow(p.x, 2) + pow(p.y, 2) <= pow(r, 2)
      Outside(a) then not (this.contains(a, p))
      Union(lhs, rhs) then this.contains(lhs, p) || this.contains(rhs, p)
      Intersect(lhs, rhs) then this.contains(lhs, p) && this.contains(rhs, p)
      Translate(v, a) then this.contains(a, Vector(p.x - v.x, p.y - v.y))
}
//│ mixin Contains() {
//│   this: {contains: ('a, 'b) -> Bool & ('c, Vector) -> 'd}
//│   fun contains: (Circle | Intersect['a] | Outside['a] | Translate['c] | Union['a], {x: Int, y: Int} & 'b) -> (Bool | 'd)
//│ }

type BaseRegionLang = BaseLang[BaseRegionLang]
//│ type BaseRegionLang = BaseLang[BaseRegionLang]

module TestContains extends Contains {
  fun contains: (BaseRegionLang, Vector) -> Bool
}
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.235: 	module TestContains extends Contains {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.236: 	  fun contains: (BaseRegionLang, Vector) -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	}
//│ ║         	^
//│ ╟── expression of type `(BaseRegionLang, Vector) -> Bool & (?a, ?b) -> (?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.225: 	      Translate(v, a) then this.contains(a, Vector(p.x - v.x, p.y - v.y))
//│ ║         	                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.225: 	      Translate(v, a) then this.contains(a, Vector(p.x - v.x, p.y - v.y))
//│ ╙──       	                           ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.235: 	module TestContains extends Contains {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.236: 	  fun contains: (BaseRegionLang, Vector) -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	}
//│ ║         	^
//│ ╟── expression of type `(BaseRegionLang, Vector) -> Bool & (?a, ?b) -> (?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.224: 	      Intersect(lhs, rhs) then this.contains(lhs, p) && this.contains(rhs, p)
//│ ║         	                                                        ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.224: 	      Intersect(lhs, rhs) then this.contains(lhs, p) && this.contains(rhs, p)
//│ ╙──       	                                                        ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.235: 	module TestContains extends Contains {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.236: 	  fun contains: (BaseRegionLang, Vector) -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	}
//│ ║         	^
//│ ╟── expression of type `(BaseRegionLang, Vector) -> Bool & (?a, ?b) -> (?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.224: 	      Intersect(lhs, rhs) then this.contains(lhs, p) && this.contains(rhs, p)
//│ ║         	                               ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.224: 	      Intersect(lhs, rhs) then this.contains(lhs, p) && this.contains(rhs, p)
//│ ╙──       	                               ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.235: 	module TestContains extends Contains {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.236: 	  fun contains: (BaseRegionLang, Vector) -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	}
//│ ║         	^
//│ ╟── expression of type `(BaseRegionLang, Vector) -> Bool & (?a, ?b) -> (?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.223: 	      Union(lhs, rhs) then this.contains(lhs, p) || this.contains(rhs, p)
//│ ║         	                                                    ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.223: 	      Union(lhs, rhs) then this.contains(lhs, p) || this.contains(rhs, p)
//│ ╙──       	                                                    ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.235: 	module TestContains extends Contains {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.236: 	  fun contains: (BaseRegionLang, Vector) -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	}
//│ ║         	^
//│ ╟── expression of type `(BaseRegionLang, Vector) -> Bool & (?a, ?b) -> (?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.223: 	      Union(lhs, rhs) then this.contains(lhs, p) || this.contains(rhs, p)
//│ ║         	                           ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.223: 	      Union(lhs, rhs) then this.contains(lhs, p) || this.contains(rhs, p)
//│ ╙──       	                           ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.235: 	module TestContains extends Contains {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.236: 	  fun contains: (BaseRegionLang, Vector) -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	}
//│ ║         	^
//│ ╟── expression of type `(BaseRegionLang, Vector) -> Bool & (?a, ?b) -> (?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.222: 	      Outside(a) then not (this.contains(a, p))
//│ ║         	                           ^^^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.222: 	      Outside(a) then not (this.contains(a, p))
//│ ╙──       	                           ^^^^^^^^^^^^^
//│ module TestContains {
//│   fun contains: (BaseRegionLang, Vector) -> Bool
//│ }

TestContains.contains(Translate(Vector(0, 0), Circle(1)), Vector(0, 0))
//│ Bool
//│ res
//│     = true

TestContains.contains(Intersect(Translate(Vector(0, 0), Circle(1)), Circle(1)), Vector(0, 0))
//│ Bool
//│ res
//│     = true

TestContains.contains(circles, Vector(0, 0))
//│ Bool
//│ res
//│     = false

// ******************* Dependencies, Complex Interpretations, and Domain-Specific Optimizations *******************

fun toString(a: Int): Str = "foo"
fun concat(a: Str, b: Str): Str = a
//│ fun toString: (a: Int) -> Str
//│ fun concat: (a: Str, b: Str) -> Str

mixin Text {
  fun text(e) =
    if e is
      Circle(r) then concat("a circular region of radius ", toString(r))
      Outside(a) then concat("outside a region of size ", toString(this.size(a)))
      Union then concat("the union of two regions of size ", toString(this.size(e)))
      Intersect then concat("the intersection of two regions of size ", toString(this.size(e)))
      Translate then concat("a translated region of size ", toString(this.size(e)))
}
//│ mixin Text() {
//│   this: {size: (Intersect[nothing] | Translate['Region] | Union[nothing] | 'a) -> Int}
//│   fun text: (Circle | Intersect[anything] | Outside['a] | Translate['Region] | Union[anything]) -> Str
//│ }

:e
module SizeText extends Text
//│ ╔══[ERROR] Type `#SizeText & {text: ?a -> (?b | ?c | ?d | ?e | ?f)}` does not contain member `size`
//│ ║  l.355: 	      Translate then concat("a translated region of size ", toString(this.size(e)))
//│ ╙──       	                                                                         ^^^^^
//│ ╔══[ERROR] Type `#SizeText & {text: ?a -> (?b | ?c | ?d | ?e | ?f)}` does not contain member `size`
//│ ║  l.354: 	      Intersect then concat("the intersection of two regions of size ", toString(this.size(e)))
//│ ╙──       	                                                                                     ^^^^^
//│ ╔══[ERROR] Type `#SizeText & {text: ?a -> (?b | ?c | ?d | ?e | ?f)}` does not contain member `size`
//│ ║  l.353: 	      Union then concat("the union of two regions of size ", toString(this.size(e)))
//│ ╙──       	                                                                          ^^^^^
//│ ╔══[ERROR] Type `#SizeText & {text: ?a -> (?b | ?c | ?d | ?e | ?f)}` does not contain member `size`
//│ ║  l.352: 	      Outside(a) then concat("outside a region of size ", toString(this.size(a)))
//│ ╙──       	                                                                       ^^^^^
//│ module SizeText {
//│   fun text: (Circle | Intersect[anything] | Outside[anything] | Translate[anything] | Union[anything]) -> Str
//│ }

// * Note: this inferred type got *much worse* after this commit (field access type refinement)
module SizeText extends SizeBase, Text {
  fun size: BaseRegionLang -> Int
  fun text: BaseRegionLang -> Str
}
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.355: 	      Translate then concat("a translated region of size ", toString(this.size(e)))
//│ ║         	                                                                     ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.355: 	      Translate then concat("a translated region of size ", toString(this.size(e)))
//│ ╙──       	                                                                     ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.354: 	      Intersect then concat("the intersection of two regions of size ", toString(this.size(e)))
//│ ║         	                                                                                 ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.354: 	      Intersect then concat("the intersection of two regions of size ", toString(this.size(e)))
//│ ╙──       	                                                                                 ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.353: 	      Union then concat("the union of two regions of size ", toString(this.size(e)))
//│ ║         	                                                                      ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.353: 	      Union then concat("the union of two regions of size ", toString(this.size(e)))
//│ ╙──       	                                                                      ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.352: 	      Outside(a) then concat("outside a region of size ", toString(this.size(a)))
//│ ║         	                                                                   ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.352: 	      Outside(a) then concat("outside a region of size ", toString(this.size(a)))
//│ ╙──       	                                                                   ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.33: 	      Translate(_, a) then this.size(a) + 1
//│ ║        	                           ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.33: 	      Translate(_, a) then this.size(a) + 1
//│ ╙──      	                           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                                          ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                                          ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                           ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.32: 	      Intersect(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                           ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                                      ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                                      ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ║        	                       ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.31: 	      Union(a, b) then this.size(a) + this.size(b) + 1
//│ ╙──      	                       ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.381: 	module SizeText extends SizeBase, Text {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  fun size: BaseRegionLang -> Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.383: 	  fun text: BaseRegionLang -> Str
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.384: 	}
//│ ║         	^
//│ ╟── expression of type `BaseRegionLang -> Int & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.30: 	      Outside(a) then this.size(a) + 1
//│ ║        	                      ^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.30: 	      Outside(a) then this.size(a) + 1
//│ ╙──      	                      ^^^^^^^^^
//│ module SizeText {
//│   fun size: BaseRegionLang -> Int
//│   fun text: BaseRegionLang -> Str
//│ }

SizeText.text(circles)
//│ Str
//│ res
//│     = 'the union of two regions of size '

SizeText.size(circles)
//│ Int
//│ res
//│     = 13

SizeText.text(Intersect(Translate(Vector(0, 0), Circle(1)), Circle(1)))
//│ Str
//│ res
//│     = 'the intersection of two regions of size '

SizeText.size(Intersect(Translate(Vector(0, 0), Circle(1)), Circle(1)))
//│ Int
//│ res
//│     = 4

mixin IsUniv {
  fun isUniv(e) =
    if e is
      Univ then true
      Outside(a) then this.isEmpty(a)
      Union(a, b) then this.isUniv(a) || this.isUniv(b)
      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
      Translate(_, a) then this.isUniv(a)
      Scale(_, a) then this.isUniv(a)
    else false
}
//│ mixin IsUniv() {
//│   this: {isEmpty: 'a -> 'b, isUniv: 'c -> Bool & 'd -> 'b}
//│   fun isUniv: (Intersect['c] | Object & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union & ~#Univ | Outside['a] | Scale['d] | Translate['d] | Union['c] | Univ) -> (Bool | 'b)
//│ }

mixin IsEmpty {
  fun isEmpty(e) =
    if e is
      Univ then true
      Outside(a) then this.isUniv(a)
      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
      Translate(_, a) then this.isEmpty(a)
      Scale(_, a) then this.isEmpty(a)
    else false
}
//│ mixin IsEmpty() {
//│   this: {isEmpty: 'a -> Bool & 'b -> 'c, isUniv: 'd -> 'c}
//│   fun isEmpty: (Intersect['a] | Object & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union & ~#Univ | Outside['d] | Scale['b] | Translate['b] | Union['a] | Univ) -> (Bool | 'c)
//│ }

module IsUnivIsEmpty extends IsUniv, IsEmpty {
  fun isEmpty: RegionLang -> Bool
  fun isUniv: RegionLang -> Bool
}
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.594: 	      Scale(_, a) then this.isEmpty(a)
//│ ║         	                       ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.594: 	      Scale(_, a) then this.isEmpty(a)
//│ ╙──       	                       ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.593: 	      Translate(_, a) then this.isEmpty(a)
//│ ║         	                           ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.593: 	      Translate(_, a) then this.isEmpty(a)
//│ ╙──       	                           ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ║         	                                              ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ╙──       	                                              ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ║         	                           ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ╙──       	                           ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ║         	                                          ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ╙──       	                                          ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ║         	                       ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ╙──       	                       ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.590: 	      Outside(a) then this.isUniv(a)
//│ ║         	                      ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.590: 	      Outside(a) then this.isUniv(a)
//│ ╙──       	                      ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.578: 	      Scale(_, a) then this.isUniv(a)
//│ ║         	                       ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.578: 	      Scale(_, a) then this.isUniv(a)
//│ ╙──       	                       ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.577: 	      Translate(_, a) then this.isUniv(a)
//│ ║         	                           ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.577: 	      Translate(_, a) then this.isUniv(a)
//│ ╙──       	                           ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ║         	                                             ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ╙──       	                                             ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ║         	                           ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ╙──       	                           ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ║         	                                         ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ╙──       	                                         ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ║         	                       ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ╙──       	                       ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.602: 	module IsUnivIsEmpty extends IsUniv, IsEmpty {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.603: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.604: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.605: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.574: 	      Outside(a) then this.isEmpty(a)
//│ ║         	                      ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.574: 	      Outside(a) then this.isEmpty(a)
//│ ╙──       	                      ^^^^^^^^^^^^
//│ module IsUnivIsEmpty {
//│   fun isEmpty: RegionLang -> Bool
//│   fun isUniv: RegionLang -> Bool
//│ }

module IsUnivIsEmpty extends IsEmpty, IsUniv {
  fun isEmpty: RegionLang -> Bool
  fun isUniv: RegionLang -> Bool
}
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.578: 	      Scale(_, a) then this.isUniv(a)
//│ ║         	                       ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.578: 	      Scale(_, a) then this.isUniv(a)
//│ ╙──       	                       ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.577: 	      Translate(_, a) then this.isUniv(a)
//│ ║         	                           ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.577: 	      Translate(_, a) then this.isUniv(a)
//│ ╙──       	                           ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ║         	                                             ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ╙──       	                                             ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ║         	                           ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.576: 	      Intersect(a, b) then this.isUniv(a) && this.isUniv(b)
//│ ╙──       	                           ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ║         	                                         ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ╙──       	                                         ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ║         	                       ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.575: 	      Union(a, b) then this.isUniv(a) || this.isUniv(b)
//│ ╙──       	                       ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.574: 	      Outside(a) then this.isEmpty(a)
//│ ║         	                      ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.574: 	      Outside(a) then this.isEmpty(a)
//│ ╙──       	                      ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.594: 	      Scale(_, a) then this.isEmpty(a)
//│ ║         	                       ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.594: 	      Scale(_, a) then this.isEmpty(a)
//│ ╙──       	                       ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.593: 	      Translate(_, a) then this.isEmpty(a)
//│ ║         	                           ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.593: 	      Translate(_, a) then this.isEmpty(a)
//│ ╙──       	                           ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ║         	                                              ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ╙──       	                                              ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ║         	                           ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.592: 	      Intersect(a, b) then this.isEmpty(a) && this.isEmpty(b)
//│ ╙──       	                           ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ║         	                                          ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ╙──       	                                          ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ║         	                       ^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.591: 	      Union(a, b) then this.isEmpty(a) || this.isEmpty(b)
//│ ╙──       	                       ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.835: 	module IsUnivIsEmpty extends IsEmpty, IsUniv {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.836: 	  fun isEmpty: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.837: 	  fun isUniv: RegionLang -> Bool
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.838: 	}
//│ ║         	^
//│ ╟── expression of type `RegionLang -> Bool & ?a -> (?b | ?c | ?d | ?e | ?f)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.590: 	      Outside(a) then this.isUniv(a)
//│ ║         	                      ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.590: 	      Outside(a) then this.isUniv(a)
//│ ╙──       	                      ^^^^^^^^^^^
//│ module IsUnivIsEmpty {
//│   fun isEmpty: RegionLang -> Bool
//│   fun isUniv: RegionLang -> Bool
//│ }

IsUnivIsEmpty.isUniv(circles)
//│ Bool
//│ res
//│     = false

IsUnivIsEmpty.isEmpty(circles)
//│ Bool
//│ res
//│     = false

:e // Expected since the annotation only allows Lang variants
class Foo()
IsUnivIsEmpty.isEmpty(Scale(Vector(1, 2), Intersect(Foo(), circles)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1080: 	IsUnivIsEmpty.isEmpty(Scale(Vector(1, 2), Intersect(Foo(), circles)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Foo` does not match type `BaseLang[RegionLang] | ExtLang[RegionLang]`
//│ ║  l.1080: 	IsUnivIsEmpty.isEmpty(Scale(Vector(1, 2), Intersect(Foo(), circles)))
//│ ║          	                                                    ^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.88: 	type RegionLang = BaseLang[RegionLang] | ExtLang[RegionLang]
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.88: 	type RegionLang = BaseLang[RegionLang] | ExtLang[RegionLang]
//│ ╙──      	                           ^^^^^^^^^^
//│ class Foo()
//│ error | false | true
//│ res
//│     = false

mixin Eliminate {
  fun eliminate(e) =
    if e is
      Outside(Outside(a)) then this.eliminate(a)
      Outside(a) then Outside(this.eliminate(a))
      Union(a, b) then Union(this.eliminate(a), this.eliminate(b))
      Intersect(a, b) then Intersect(this.eliminate(a), this.eliminate(b))
      Translate(v, a) then Translate(v, this.eliminate(a))
      Scale(v, a) then Scale(v, this.eliminate(a))
    else e
}
//│ mixin Eliminate() {
//│   this: {
//│     eliminate: 'a -> 'b & 'c -> 'Region & 'd -> 'Region0 & 'e -> 'Region1 & 'f -> 'Region2 & 'g -> 'Region3
//│   }
//│   fun eliminate: (Intersect['e] | Object & 'b & ~#Intersect & ~#Outside & ~#Scale & ~#Translate & ~#Union | Outside['c & (Object & ~#Outside | Outside['a])] | Scale['g] | Translate['f] | Union['d]) -> (Intersect['Region1] | Outside['Region] | Scale['Region3] | Translate['Region2] | Union['Region0] | 'b)
//│ }

module TestElim extends Eliminate {
  fun eliminate: RegionLang -> RegionLang
}
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1106: 	      Scale(v, a) then Scale(v, this.eliminate(a))
//│ ║          	                                ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1106: 	      Scale(v, a) then Scale(v, this.eliminate(a))
//│ ╙──        	                                ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1105: 	      Translate(v, a) then Translate(v, this.eliminate(a))
//│ ║          	                                        ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1105: 	      Translate(v, a) then Translate(v, this.eliminate(a))
//│ ╙──        	                                        ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1104: 	      Intersect(a, b) then Intersect(this.eliminate(a), this.eliminate(b))
//│ ║          	                                                        ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1104: 	      Intersect(a, b) then Intersect(this.eliminate(a), this.eliminate(b))
//│ ╙──        	                                                        ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1104: 	      Intersect(a, b) then Intersect(this.eliminate(a), this.eliminate(b))
//│ ║          	                                     ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1104: 	      Intersect(a, b) then Intersect(this.eliminate(a), this.eliminate(b))
//│ ╙──        	                                     ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1103: 	      Union(a, b) then Union(this.eliminate(a), this.eliminate(b))
//│ ║          	                                                ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1103: 	      Union(a, b) then Union(this.eliminate(a), this.eliminate(b))
//│ ╙──        	                                                ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1103: 	      Union(a, b) then Union(this.eliminate(a), this.eliminate(b))
//│ ║          	                             ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1103: 	      Union(a, b) then Union(this.eliminate(a), this.eliminate(b))
//│ ╙──        	                             ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1102: 	      Outside(a) then Outside(this.eliminate(a))
//│ ║          	                              ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1102: 	      Outside(a) then Outside(this.eliminate(a))
//│ ╙──        	                              ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.1116: 	module TestElim extends Eliminate {
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1117: 	  fun eliminate: RegionLang -> RegionLang
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1118: 	}
//│ ║          	^
//│ ╟── expression of type `RegionLang -> RegionLang & ?a -> (?b | ?c | ?d | ?e | ?f | ?g)` is not a function
//│ ╟── Note: constraint arises from application:
//│ ║  l.1101: 	      Outside(Outside(a)) then this.eliminate(a)
//│ ║          	                               ^^^^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.1101: 	      Outside(Outside(a)) then this.eliminate(a)
//│ ╙──        	                               ^^^^^^^^^^^^^^
//│ module TestElim {
//│   fun eliminate: RegionLang -> RegionLang
//│ }

TestElim.eliminate(Outside(Outside(Univ())))
//│ RegionLang
//│ res
//│     = Univ {}

TestElim.eliminate(circles)
//│ RegionLang
//│ res
//│     = Union {}

fun mk(n) = if n is
  1 then Outside(mk(n))
  2 then Union(mk(n), mk(n))
  3 then Intersect(mk(n), mk(n))
  4 then Translate(Vector(0, 0), mk(n))
  _ then Scale(Vector(0, 0), mk(n))
//│ fun mk: forall 'a. Object -> 'a
//│   where
//│     'a :> Outside['a] | Union['a] | Intersect['a] | Translate['a] | Scale['a]

:re
TestElim.eliminate(mk(100))
//│ RegionLang
//│ res
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// *************************************************************************

module Lang extends SizeBase, SizeExt, Contains, Text, IsUniv, IsEmpty, Eliminate {
  fun contains: (BaseRegionLang, Vector) -> Bool
  fun eliminate: RegionLang -> RegionLang
  fun isEmpty: RegionLang -> Bool
  fun isUniv: RegionLang -> Bool
  fun size: RegionLang -> Int
  fun text: BaseRegionLang -> Str
}
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

Lang.size(circles)
//│ Int
//│ Code generation encountered an error:
//│   unresolved symbol Lang

Lang.contains(circles, Vector(0, 0))
//│ Bool
//│ Code generation encountered an error:
//│   unresolved symbol Lang

Lang.text(circles)
//│ Str
//│ Code generation encountered an error:
//│   unresolved symbol Lang

Lang.isUniv(circles)
//│ Bool
//│ Code generation encountered an error:
//│   unresolved symbol Lang

Lang.isEmpty(circles)
//│ Bool
//│ Code generation encountered an error:
//│   unresolved symbol Lang

Lang.size(Lang.eliminate(circles))
//│ Int
//│ Code generation encountered an error:
//│   unresolved symbol Lang

:re
Lang.size(mk(100))
//│ Int
//│ Code generation encountered an error:
//│   unresolved symbol Lang

:e
:re
Lang.contains(mk(100), Vector(0, 0))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1312: 	Lang.contains(mk(100), Vector(0, 0))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Scale[?Region]` does not match type `Circle | Intersect[BaseRegionLang] | Outside[BaseRegionLang] | Translate[BaseRegionLang] | Union[BaseRegionLang]`
//│ ║  l.1250: 	  _ then Scale(Vector(0, 0), mk(n))
//│ ║          	         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.23: 	type BaseLang[T] = Circle | Intersect[T] | Union[T] | Outside[T] | Translate[T]
//│ ║        	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.232: 	type BaseRegionLang = BaseLang[BaseRegionLang]
//│ ╙──       	                               ^^^^^^^^^^^^^^
//│ error | false | true
//│ Code generation encountered an error:
//│   unresolved symbol Lang

:e
:re
Lang.text(mk(100))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1331: 	Lang.text(mk(100))
//│ ║          	^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Scale[?Region]` does not match type `Circle | Intersect[BaseRegionLang] | Outside[BaseRegionLang] | Translate[BaseRegionLang] | Union[BaseRegionLang]`
//│ ║  l.1250: 	  _ then Scale(Vector(0, 0), mk(n))
//│ ║          	         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.23: 	type BaseLang[T] = Circle | Intersect[T] | Union[T] | Outside[T] | Translate[T]
//│ ║        	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.232: 	type BaseRegionLang = BaseLang[BaseRegionLang]
//│ ╙──       	                               ^^^^^^^^^^^^^^
//│ Str | error
//│ Code generation encountered an error:
//│   unresolved symbol Lang

:re
Lang.isUniv(mk(100))
//│ Bool
//│ Code generation encountered an error:
//│   unresolved symbol Lang

:re
Lang.isEmpty(mk(100))
//│ Bool
//│ Code generation encountered an error:
//│   unresolved symbol Lang

:re
Lang.size(Lang.eliminate(mk(100)))
//│ Int
//│ Code generation encountered an error:
//│   unresolved symbol Lang
