:ShowRelativeLineNums
:NoJS

class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ Defined class MyArray[=A]

dummy = MyArray {
    size = 0;
    set = fun (i, a) -> ();
    get = fun i -> error
  }
//│ dummy: MyArray['A] & {get: anything -> nothing, set: (anything, anything,) -> (), size: 0}

dummy: MyArray[int]
//│ res: MyArray[int]

def ty1A: MyArray[int]
def ty1B: MyArray[0 | 1]
//│ ty1A: MyArray[int]
//│ ty1B: MyArray[0 | 1]


def ty2A: MyArray['a]
//│ ty2A: MyArray['a]

:stats
ty2A = ty2A
//│ MyArray['a]
//│   <:  ty2A:
//│ MyArray['a]
//│ constrain calls  : 1
//│ annoying  calls  : 0
//│ subtyping calls  : 1

def ty2B: MyArray[MyArray['a]]
//│ ty2B: MyArray[MyArray['a]]

:stats
ty2B = ty2A
//│ MyArray['a]
//│   <:  ty2B:
//│ MyArray[MyArray['a]]
//│ constrain calls  : 30
//│ annoying  calls  : 23
//│ subtyping calls  : 99



def ty3A: MyArray['a] as 'a
//│ ty3A: MyArray['a]
//│   where
//│     'a := MyArray['a]

:stats
ty3A = ty3A
//│ MyArray[MyArray['a]]
//│   where
//│     'a := MyArray['a]
//│   <:  ty3A:
//│ MyArray['a]
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.+1: 	ty3A = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ constrain calls  : 54
//│ annoying  calls  : 23
//│ subtyping calls  : 222

def ty3B: MyArray[MyArray['a]] as 'a
//│ ty3B: MyArray[MyArray['a]]
//│   where
//│     'a := MyArray[MyArray['a]]

:stats
ty3B = ty3A
//│ MyArray[MyArray['a]]
//│   where
//│     'a := MyArray['a]
//│   <:  ty3B:
//│ MyArray[MyArray['a]]
//│   where
//│     'a := MyArray[MyArray['a]]
//│ constrain calls  : 80
//│ annoying  calls  : 23
//│ subtyping calls  : 294

:stats
ty3A = ty3B
//│ MyArray[MyArray[MyArray[MyArray['a]]]]
//│   where
//│     'a := MyArray[MyArray['a]]
//│   <:  ty3A:
//│ MyArray['a]
//│   where
//│     'a := MyArray['a]
//│ constrain calls  : 110
//│ annoying  calls  : 23
//│ subtyping calls  : 361

def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: MyArray[MyArray[MyArray['a]]]
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]

:stats
ty4B = ty4B
//│ MyArray[MyArray[MyArray[MyArray[MyArray[MyArray['a]]]]]]
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│   <:  ty4B:
//│ MyArray[MyArray[MyArray['a]]]
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.+1: 	ty4B = ty4B
//│ ║        	^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ constrain calls  : 102
//│ annoying  calls  : 23
//│ subtyping calls  : 424



//===//===//===// ERRORS //===//===//===//


:e
:stats
ty1A = ty1B
//│ MyArray[0 | 1]
//│   <:  ty1A:
//│ MyArray[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1A = ty1B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.18: 	def ty1B: MyArray[0 | 1]
//│ ╙──      	                  ^^^^^
//│ constrain calls  : 5
//│ annoying  calls  : 5
//│ subtyping calls  : 61

:e
:stats
ty1B = ty1A
//│ MyArray[int]
//│   <:  ty1B:
//│ MyArray[0 | 1]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1B = ty1A
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.18: 	def ty1B: MyArray[0 | 1]
//│ ╙──      	                  ^^^^^
//│ constrain calls  : 5
//│ annoying  calls  : 5
//│ subtyping calls  : 51


:e
:stats
ty2A = ty2B
//│ MyArray[MyArray['a]]
//│   <:  ty2A:
//│ MyArray['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `MyArray`
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ constrain calls  : 27
//│ annoying  calls  : 22
//│ subtyping calls  : 140


