def toBool = fun x -> true
b = toBool true
bb = (fun a -> fun b -> toBool (if b then not a else not a)) true
//│ toBool: anything -> true
//│       = [Function: toBool]
//│ b: true
//│  = true
//│ bb: bool -> true
//│   = [Function (anonymous)]

def isInt = fun x -> b
//│ isInt: anything -> true
//│      = [Function: isInt]

selectBoolOrInt = fun x -> if isInt x then 1 else true
r1 = selectBoolOrInt true
r2 = selectBoolOrInt 1
addOneI = fun x -> add x 1
addOneB = bb
//│ selectBoolOrInt: anything -> (1 | true)
//│                = [Function: selectBoolOrInt]
//│ r1: 1 | true
//│   = 1
//│ r2: 1 | true
//│   = 1
//│ addOneI: int -> int
//│        = [Function: addOneI]
//│ addOneB: bool -> true
//│        = [Function (anonymous)]

addOne = fun x -> 
    if (isInt x) 
    then addOneI x 
    else addOneB x
r3 = isInt r2
//│ addOne: nothing -> (int | true)
//│       = [Function: addOne]
//│ r3: true
//│   = true

:e
r4 = addOne (selectBoolOrInt 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	r4 = addOne (selectBoolOrInt 1)
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `bool`
//│ ║  l.15: 	selectBoolOrInt = fun x -> if isInt x then 1 else true
//│ ║        	                                           ^
//│ ╟── but it flows into application with expected type `bool`
//│ ║  l.42: 	r4 = addOne (selectBoolOrInt 1)
//│ ║        	             ^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.3: 	bb = (fun a -> fun b -> toBool (if b then not a else not a)) true
//│ ║       	                                   ^
//│ ╟── from reference:
//│ ║  l.34: 	    else addOneB x
//│ ╙──      	                 ^
//│ r4: int | true
//│   = 2

:e
r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp }
//│ r4: int | true
//│   = 2

// TODO improve:
//    Note the strange lack of specific provenance flows for `1` and `bool`.
//    This is due to our eagerly collapsing `int & bool` in the previously-inferred type.
//    We should either not collapse them until type simplification or somehow remember the original components
//      so a proper error can later be displayed.
:e
r4 = let tmp = selectBoolOrInt 1 in case tmp of { int -> addOne tmp | _ -> 0 }
//│ r4: int | true
//│   = 2

def addOne x = case x of {
  | int -> addOneI x 
  | bool -> addOneB x
  }
//│ addOne: (bool | int) -> (int | true)
//│       = [Function: addOne1]

def r4 = addOne (selectBoolOrInt 1)
//│ r4: int | true
//│   = [Function: r43]




def addOneS = fun x -> concat x "One"
//│ addOneS: string -> string
//│        = [Function: addOneS]

addOneI 1
addOneS "Two"
//│ res: int
//│    = 2
//│ res: string
//│    = 'TwoOne'


// Attempt 1:

def isInt = fun x -> case x of { int -> true | string -> false }
//│ isInt: (int | string) -> bool
//│      = [Function: isInt1]

isInt 1
isInt "Two"
//│ res: bool
//│    = true
//│ res: bool
//│    = false

def addOne = fun x -> if isInt x then addOneI x else addOneS x
//│ addOne: nothing -> (int | string)
//│       = [Function: addOne2]

:e
addOne "hello"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.120: 	addOne "hello"
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── string literal of type `"hello"` is not an instance of type `int`
//│ ║  l.120: 	addOne "hello"
//│ ║         	       ^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.18: 	addOneI = fun x -> add x 1
//│ ║        	                       ^
//│ ╟── from reference:
//│ ║  l.115: 	def addOne = fun x -> if isInt x then addOneI x else addOneS x
//│ ╙──       	                                              ^
//│ res: int | string
//│    = 'helloOne'


// Attempt 2: use a match instead of isInt

def addOne = fun x -> case x of {
   int -> addOneI x | 
   string -> addOneS x }
//│ addOne: (int | string) -> (int | string)
//│       = [Function: addOne3]

addOne 1
addOne "Two"
//│ res: int | string
//│    = 2
//│ res: int | string
//│    = 'TwoOne'

:e
(addOne 1) + 1
concat "Three" (addOne "Two")
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.153: 	(addOne 1) + 1
//│ ║         	^^^^^^^^^^^^
//│ ╟── application of type `string` is not an instance of type `int`
//│ ║  l.90: 	def addOneS = fun x -> concat x "One"
//│ ║        	                       ^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.153: 	(addOne 1) + 1
//│ ╙──       	 ^^^^^^^^
//│ res: int
//│    = 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.154: 	concat "Three" (addOne "Two")
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `int` is not an instance of type `string`
//│ ║  l.18: 	addOneI = fun x -> add x 1
//│ ║        	                   ^^^^^^^
//│ ╟── but it flows into application with expected type `string`
//│ ║  l.154: 	concat "Three" (addOne "Two")
//│ ╙──       	                ^^^^^^^^^^^^
//│ res: string
//│    = 'ThreeTwoOne'

