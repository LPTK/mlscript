
// From SuperType tests

True = true
//│ True: true
//│     = true

def inc: int -> int
//│ inc: int -> int
//│    = <missing implementation>

test f =
  let r = fun x -> fun g -> (g x, )
  in (r 0 inc, r True not)
//│ test: anything -> ((int,), forall 'a. ('a,),)
//│     = <no result>
//│       inc is not implemented

// * Precise type:
test f = (f 0, f True)
//│ test: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│     = [Function: test]

// * Imprecise type (notice the `(0 | true)`):
// * Note: With inferred first-class constraints and generalized curried functions,
// *  this approximation be avoided (see below).
test f =
  let r x = f x
  in (r 0, r True)
//│ test: ((0 | true) -> 'a) -> (forall 'b. 'b | 'a, forall 'c. 'c | 'a,)
//│     = [Function: test1]

// Same example, a little elaborated
test f =
  let r = fun x -> fun g -> (g x, f x)
  in (r 0 inc, r True not)
//│ test: ((0 | true) -> 'a) -> (forall 'b. (int, 'b | 'a,), forall 'c, 'd. ('c, 'd | 'a,),)
//│     = <no result>
//│       inc is not implemented


:GeneralizeCurriedFunctions

test f =
  let r x = f x
  in (r 0, r True)
//│ test: ((true | 'a) -> ('b & 'c) & (0 | 'd) -> ('e & 'f) & 'g) -> ('f, 'c,)
//│     = [Function: test2]

// :e // FIXME!!!! ^ approx type!
(test id)._1 + 1
//│ res: int
//│    = NaN

// :e // FIXME!!!! ^ approx type!
not (test id)._2
//│ res: bool
//│    = true

:e
not (test id)._1
//│ res: bool
//│    = true

// * Even works with recursive definition because the constrained type is strictly local to the body!
rec def test f =
  let r x = f x
  in (r 0, r True)
//│ test: ((true | 'a) -> ('b & 'c) & (0 | 'd) -> ('e & 'f) & 'g) -> ('f, 'c,)
//│     = [Function: test3]
