
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> 'c -> 'b
//│   where
//│     'c <: Add[?] & {lhs: 'c} | 'a & ~#Add
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | 'a & ~#Add
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'a, 'b, 'lhs, 'eval1_stub, 'c, 'd, 'e. 'eval1_stub
//│   where
//│     'eval1_stub := 'd -> (1 | 'c | 0)
//│     'c :> 1 | 'c | 0
//│     'd <: #Lit & 'a | (#Add & 'b | 'e & ~#Add) & ~#Lit
//│     'b <: {lhs: 'lhs}
//│     'lhs <: 'd
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: 'a -> (0 | 1)
//│   where
//│     'a <: Add[?] & {lhs: 'a} | Lit | ~Add[?] & ~Lit
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│      = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 0
//│ subtyping calls  : 87

:ns
eval1
//│ res: forall 'lhs, 'rhs, 'val, 'a, 'b, 'c, 'd, 'e, 'f, 'eval1, 'g. 'eval1
//│   where
//│     'eval1 := 'd -> 'e -> ('val | 'c | 'b)
//│     'c := int
//│     'e <: #Lit & 'f | (#Add & 'g | 'a & ~#Add) & ~#Lit
//│     'g <: {rhs: 'rhs} & {lhs: 'lhs}
//│     'lhs <: 'e
//│     'rhs <: 'e
//│     'f <: {val: 'val}
//│     'val <: int
//│     'd <: 'a -> 'b
//│     'b <: int
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[nothing]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: 'a -> ('a & ~Add[nothing])
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: ('a & ~Add[?]) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~#Add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]
//│              = <missing implementation>

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1_ty_ugly]
//│ constrain calls  : 87
//│ annoying  calls  : 38
//│ subtyping calls  : 264

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~#Lit & ~#Add
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1_ty]
//│ constrain calls  : 87
//│ annoying  calls  : 38
//│ subtyping calls  : 266

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 34
//│ annoying  calls  : 35
//│ subtyping calls  : 266

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 266
//│ annoying  calls  : 561
//│ subtyping calls  : 5015


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[+A]
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│         = [Function: eval1_ty2]
//│ constrain calls  : 85
//│ annoying  calls  : 38
//│ subtyping calls  : 216


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│        = [Function: pretty1]
//│ constrain calls  : 90
//│ annoying  calls  : 0
//│ subtyping calls  : 91


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> string) -> ('rhs -> number & 'lhs -> number) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'lhs & 'b, rhs: 'rhs & 'b} | Lit | 'a & ~#Add & ~#Lit
//│          = [Function: prettier1]
//│ constrain calls  : 300
//│ annoying  calls  : 0
//│ subtyping calls  : 115

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> string & 'b -> string) -> ('rhs -> number) -> 'c -> (forall 'd, 'e, 'f, 'g. string | 'd | 'e | 'f | 'g)
//│   where
//│     'c <: Add[?] & {lhs: 'h, rhs: 'rhs & 'c} | Lit | 'a & ~#Add & ~#Lit
//│     'h <: Add[?] & {lhs: 'h, rhs: 'h} | Lit | 'b & ~#Add & ~#Lit
//│           = [Function: prettier11]
//│ constrain calls  : 198
//│ annoying  calls  : 0
//│ subtyping calls  : 208

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> string & 'b -> 'c & 'd -> string) -> ('e -> number) -> (Add[?] & {lhs: 'f, rhs: 'g} & 'e | Lit | 'b & ~#Add & ~#Lit) -> (forall 'h, 'i, 'j, 'k. string | 'j | 'k | 'h | 'i | 'c)
//│   where
//│     'g <: Add[?] & {lhs: 'g, rhs: 'g} | Lit | 'd & ~#Add & ~#Lit
//│     'f <: Add[?] & {lhs: 'f, rhs: 'f} | Lit | 'a & ~#Add & ~#Lit
//│           = [Function: prettier12]
//│ constrain calls  : 171
//│ annoying  calls  : 0
//│ subtyping calls  : 288


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int | 'a
//│    = 6
//│ res: string | 'a | 'b
//│    = '123'
//│ res: string | 'a | 'b
//│    = '123'
//│ res: string | 'a | 'b | 'c | 'd | 'e | 'f
//│    = '123'
//│ res: string | 'a | 'b | 'c | 'd | 'e | 'f
//│    = '123'
//│ constrain calls  : 1450
//│ annoying  calls  : 500
//│ subtyping calls  : 2090


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: (Add[forall 'a, 'b. (Add[forall 'c, 'd. Lit & {val: 2 | 3} | 'c | 'd] with {lhs: forall 'c. Lit & {val: 2} | 'c, rhs: forall 'd. Lit & {val: 3} | 'd}) | Lit & {val: 1} | 'a | 'b] with {lhs: forall 'a. Lit & {val: 1} | 'a, rhs: forall 'b. (Add[forall 'c, 'd. Lit & {val: 2 | 3} | 'c | 'd] with {lhs: forall 'c. Lit & {val: 2} | 'c, rhs: forall 'd. Lit & {val: 3} | 'd}) | 'b}) | 'e
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int | 'a
//│    = 6
//│ res: string | 'a | 'b
//│    = '123'
//│ res: string | 'a | 'b
//│    = '123'
//│ res: string | 'a | 'b | 'c | 'd | 'e | 'f
//│    = '123'
//│ res: string | 'a | 'b | 'c | 'd | 'e | 'f
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> (forall 'b, 'val, 'c, 'd, 'e. 'b -> (int | 'val | 'd))
//│   where
//│     'b <: Add['c] & 'e | Lit & {val: int & 'val} & 'c | 'f & ~#Add & ~#Lit
//│     'f <: Nega['c] & {arg: 'g} | 'a & ~#Nega
//│     'g <: Add['c] & {lhs: 'g, rhs: 'g} | Lit | 'f & ~#Add & ~#Lit
//│     'e <: {lhs: 'b, rhs: 'b}
//│      = [Function: eval2]


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string) -> ('rhs -> number & 'lhs -> number) -> (forall 'b, 'c, 'val, 'd, 'e, 'f. 'b -> (string | 'c | 'f))
//│   where
//│     'b <: Add['val] & 'e | Lit & {val: int & 'val} & 'd | 'g & ~#Add & ~#Lit
//│     'g <: Nega['val] & {arg: 'h} | 'a & ~#Nega
//│     'h <: Add['val] & {lhs: 'lhs & 'h, rhs: 'rhs & 'h} | Lit | 'g & ~#Add & ~#Lit
//│     'e <: {lhs: 'lhs & 'b, rhs: 'rhs & 'b}
//│          = [Function: prettier2]
//│ constrain calls  : 122
//│ annoying  calls  : 0
//│ subtyping calls  : 248

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string) -> ('b -> number) -> (forall 'c, 'val, 'd. ('d & (Add['c] & 'b | Lit & {val: int & 'val} & 'c | 'e & ~#Add & ~#Lit)) -> (forall 'f, 'g, 'h, 'i, 'j, 'k. string | 'j | 'k | 'f | 'h | 'i | 'g))
//│   where
//│     'b <: {lhs: 'l, rhs: 'l}
//│     'l <: Add['c] & {lhs: 'l, rhs: 'l} | Lit & {val: int & 'val} | 'e & ~#Add & ~#Lit
//│     'e <: Nega['c] & {arg: Add['c] & 'b | Lit & {val: int & 'val} | 'e & ~#Add & ~#Lit} | 'a & ~#Nega
//│           = [Function: prettier22]
//│ constrain calls  : 176
//│ annoying  calls  : 0
//│ subtyping calls  : 439



:stats
eval2 done e1
//│ res: int | 'a
//│    = 6
//│ constrain calls  : 195
//│ annoying  calls  : 60
//│ subtyping calls  : 205

e2 = add (lit 1) (nega e1)
//│ e2: (Add[forall 'a, 'b. Lit & {val: 1} | Nega[forall 'c. (Add[forall 'd, 'e. (Add[forall 'f, 'g. Lit & {val: 2 | 3} | 'f | 'g] with {lhs: forall 'f. Lit & {val: 2} | 'f, rhs: forall 'g. Lit & {val: 3} | 'g}) | Lit & {val: 1} | 'd | 'e] with {lhs: forall 'd. Lit & {val: 1} | 'd, rhs: forall 'e. (Add[forall 'f, 'g. Lit & {val: 2 | 3} | 'f | 'g] with {lhs: forall 'f. Lit & {val: 2} | 'f, rhs: forall 'g. Lit & {val: 3} | 'g}) | 'e}) | 'c] | 'a | 'b] with {lhs: forall 'b. Lit & {val: 1} | 'b, rhs: forall 'a. Nega[forall 'c. (Add[forall 'd, 'e. (Add[forall 'f, 'g. Lit & {val: 2 | 3} | 'f | 'g] with {lhs: forall 'f. Lit & {val: 2} | 'f, rhs: forall 'g. Lit & {val: 3} | 'g}) | Lit & {val: 1} | 'd | 'e] with {lhs: forall 'd. Lit & {val: 1} | 'd, rhs: forall 'e. (Add[forall 'f, 'g. Lit & {val: 2 | 3} | 'f | 'g] with {lhs: forall 'f. Lit & {val: 2} | 'f, rhs: forall 'g. Lit & {val: 3} | 'g}) | 'e}) | 'c] | 'a}) | 'h
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

// :e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done e2
//│ res: int | 'a
//│    = -5
//│ constrain calls  : 312
//│ annoying  calls  : 103
//│ subtyping calls  : 287

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[forall 'a. (Add[forall 'b, 'c. Lit & {val: 1} | Nega[forall 'd. Lit & {val: 1} | 'd] | 'b | 'c] with {lhs: forall 'c. Lit & {val: 1} | 'c, rhs: forall 'b. Nega[forall 'd. Lit & {val: 1} | 'd] | 'b}) | 'a] | 'e
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

// :e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done d2
//│ res: int | 'a
//│    = 0
//│ constrain calls  : 194
//│ annoying  calls  : 71
//│ subtyping calls  : 179


prettier2 done
//│ res: ('rhs -> (number & 'a & 'b) & 'lhs -> (number & 'b) & 'c & 'd) -> (forall 'e, 'f, 'g, 'h, 'val, 'i. 'h -> (string | 'j | 'g | 'i | 'k) | 'l)
//│   where
//│     'h <: Add['m] & 'e | Lit & {val: int & 'val & 'val0} & 'f | 'n & ~#Add & ~#Lit
//│     'n <: Nega['m] & 'o
//│     'o <: {arg: 'p}
//│     'p <: Add['m] & 'q | Lit & {val: int & 'val0} & 'm | 'n & ~#Add & ~#Lit
//│     'q <: {lhs: 'lhs & 'p, rhs: 'rhs & 'p}
//│     'e <: {lhs: 'lhs & 'h, rhs: 'rhs & 'h}
//│    = [Function (anonymous)]

prettier22 done
//│ res: ('a -> (number & 'b) & 'c & 'd) -> (forall 'e, 'val, 'f. ('e & (Add['f] & 'a | Lit & {val: int & 'val} & 'f | 'g & ~#Add & ~#Lit)) -> (forall 'h, 'i, 'j, 'k, 'l, 'm. string | 'n | 'j | 'm | 'h | 'i | 'k | 'o | 'l | 'p) | 'q)
//│   where
//│     'a <: {lhs: 'r, rhs: 's}
//│     's <: Add['f] & 't | Lit & {val: int & 'val & 'val0} & 'u | 'g & ~#Add & ~#Lit
//│     't <: {lhs: 's, rhs: 's}
//│     'r <: Add['f] & 'v | Lit & {val: int & 'val1 & 'val} & 'w | 'g & ~#Add & ~#Lit
//│     'g <: Nega['f] & 'x
//│     'x <: {arg: 'y}
//│     'y <: Add['f] & 'a | Lit & {val: int & 'val & 'val2} & 'z | 'g & ~#Add & ~#Lit
//│     'v <: {lhs: 'r, rhs: 'r}
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: 'a -> (string | 'b | 'c | 'd | 'e) | 'f
//│   where
//│     'a <: Add['g] & 'h | Lit & {val: int & 'val & 'val0} & 'i | 'j & ~#Add & ~#Lit
//│     'j <: Nega['g] & 'k
//│     'k <: {arg: 'l}
//│     'l <: Add['g] & 'm | Lit & {val: int & 'val0} & 'g | 'j & ~#Add & ~#Lit
//│     'm <: {lhs: 'n & 'l, rhs: 'n & 'l}
//│     'h <: {lhs: 'a & 'n, rhs: 'a & 'n}
//│     'n <: Add['g] & {lhs: 'n, rhs: 'n} | Lit
//│    = [Function (anonymous)]
//│ constrain calls  : 104
//│ annoying  calls  : 0
//│ subtyping calls  : 320

prettier22 done (eval1 done)
//│ res: ('a & (Add['val] & 'b | Lit & {val: int & 'val} & 'c | 'd & ~#Add & ~#Lit)) -> (forall 'e, 'f, 'g, 'h, 'i, 'j. string | 'k | 'i | 'e | 'f | 'h | 'j | 'l | 'g | 'm) | 'n
//│   where
//│     'b <: {lhs: 'o, rhs: 'o} & 'p
//│     'p <: Add['val] & {lhs: 'p, rhs: 'p} | Lit
//│     'o <: Add['val] & {lhs: 'o, rhs: 'o} | Lit | 'd & ~#Add & ~#Lit
//│     'd <: Nega['val] & {arg: Add['val] & 'b | Lit | 'd & ~#Add & ~#Lit}
//│    = [Function (anonymous)]

// :e // FIXME (reproduced in `ADRsRepro.mls`)
// TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: 'a -> (string | 'b | 'c | 'd | 'e) | 'f
//│   where
//│     'a <: Add['g] & 'h | Lit & {val: int & 'val & 'val0} & 'i | 'j & ~#Add & ~#Lit
//│     'j <: Nega['g] & 'k
//│     'k <: {arg: 'l}
//│     'l <: Add['g] & 'm | Lit & {val: int & 'val0} & 'g | 'j & ~#Add & ~#Lit
//│     'm <: {lhs: 'n & 'l, rhs: 'o & 'l}
//│     'h <: {lhs: 'a & 'n, rhs: 'a & 'o}
//│     'o <: Add['g] & {lhs: 'o, rhs: 'o} | Lit | 'p & ~#Add & ~#Lit
//│     'p <: Nega['g] & {arg: 'o}
//│     'n <: Add['g] & {lhs: 'n, rhs: 'n} | Lit | 'q & ~#Add & ~#Lit
//│     'q <: Nega['g] & {arg: 'n}
//│    = [Function (anonymous)]
//│ constrain calls  : 126
//│ annoying  calls  : 0
//│ subtyping calls  : 584

prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: string | 'a | 'b
//│    = '1-123'
//│ res: string | 'a | 'b
//│    = '-1-1'

:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: ('a & (Add['val] & 'b | Lit & {val: int & 'val} & 'c | 'd & ~#Add & ~#Lit)) -> (forall 'e, 'f, 'g, 'h, 'i, 'j. string | 'k | 'h | 'i | 'j | 'e | 'g | 'l | 'f | 'm) | 'n
//│   where
//│     'b <: {lhs: 'o, rhs: 'o} & 'p
//│     'p <: Add['val] & {lhs: 'p, rhs: 'p} | Lit | 'q & ~#Add & ~#Lit
//│     'q <: Nega['val] & {arg: 'p}
//│     'o <: Add['val] & {lhs: 'o, rhs: 'o} | Lit | 'd & ~#Add & ~#Lit
//│     'd <: Nega['val] & {arg: Add['val] & 'b | Lit | 'd & ~#Add & ~#Lit}
//│    = [Function (anonymous)]
//│ res: string | 'a | 'b | 'c | 'd | 'e | 'f
//│    = '1-123'
//│ res: string | 'a | 'b | 'c | 'd | 'e | 'f
//│    = '-1'
//│ constrain calls  : 1281
//│ annoying  calls  : 390
//│ subtyping calls  : 1939




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.362: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.72: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b | ?c)` is not an instance of type `number`
//│ ║  l.70: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.71: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.74: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.362: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.262: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 714
//│ annoying  calls  : 213
//│ subtyping calls  : 1946

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `number`
//│ ║  l.70: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.71: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.74: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = [Function (anonymous)]
//│ constrain calls  : 57
//│ annoying  calls  : 0
//│ subtyping calls  : 67

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `number`
//│ ║  l.70: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.71: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.74: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'
//│ constrain calls  : 64
//│ annoying  calls  : 0
//│ subtyping calls  : 67

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `number`
//│ ║  l.70: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.71: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.74: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 64
//│ annoying  calls  : 0
//│ subtyping calls  : 67

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `number`
//│ ║  l.70: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.71: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.74: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '-1-1'
//│ constrain calls  : 64
//│ annoying  calls  : 0
//│ subtyping calls  : 67

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b | ?c)` is not an instance of type `number`
//│ ║  l.70: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.71: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.74: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.262: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 60
//│ annoying  calls  : 0
//│ subtyping calls  : 29

