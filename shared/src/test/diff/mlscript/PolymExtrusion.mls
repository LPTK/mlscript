:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes



def foo: (forall 'a. 'a -> 'a) -> int
//│ foo: (forall 'a. 'a -> 'a) -> int
//│    = <missing implementation>

foo f = f 42
//│ (42 -> 'a) -> 'a
//│   <:  foo:
//│ (forall 'a. 'a -> 'a) -> int
//│    = [Function: foo]

foo id
//│ res: int
//│    = 42

// Notice `f` is passed an arg of locally-quantified type 'a, which is extruded to `anything`:
bar f = foo (fun x -> let tmp = f x in x)
//│ bar: (anything -> anything) -> int
//│    = [Function: bar]

:e
bar (fun x -> case x of {})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.28: 	bar (fun x -> case x of {})
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	def foo: (forall 'a. 'a -> 'a) -> int
//│ ║       	                 ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.28: 	bar (fun x -> case x of {})
//│ ╙──      	                   ^
//│ res: int
//│ Runtime error:
//│   Error: non-exhaustive case expression


def f: 'a -> 'b
//│ f: anything -> nothing
//│  = <missing implementation>

def foo: (forall 'a. 'a -> 'b) -> 'b
//│ foo: (anything -> 'b) -> 'b
//│    = <missing implementation>


// Notice `id` returns its arg of locally-quantified type 'a, which is extruded to `anything`:
foo id
//│ res: anything
//│    = <no result>
//│      foo is not implemented

:e
foo (fun a -> a + 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.59: 	foo (fun a -> a + 1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `int`
//│ ║  l.47: 	def foo: (forall 'a. 'a -> 'b) -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.59: 	foo (fun a -> a + 1)
//│ ╙──      	              ^
//│ res: error | int
//│    = <no result>
//│      foo is not implemented



