
class Expr
class Lit: Expr & { val: int }
class Add: Expr & { lhs: Expr; rhs: Expr }
//│ Defined class Expr
//│ Defined class Lit
//│ Defined class Add

rec def eval x = case x of {
  Lit -> x.val
  | Add -> eval x.lhs + eval x.rhs
  }
//│ eval: 'a -> int
//│   where
//│     'a <: (Add with {lhs: 'a, rhs: 'a}) | Lit
//│     = [Function: eval]

def eval eval x = case x of {
  Lit -> x.val
  | Add -> eval eval x.lhs + eval eval x.rhs
  }
//│ eval: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│     = [Function: eval1]

:e
eval eval
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.26: 	eval eval
//│ ║        	^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α48' -> (α49' -> (val51' | α60')))›  <:  α48_104    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α48' -> (α49' -> (val51' | α60')))›  <:  α48'
//│ res: error
//│    = [Function (anonymous)]

class Neg: Expr & { underlying: Expr }
//│ Defined class Neg

def evalN evalN x = case x of {
  Neg -> 0 - (evalN evalN x.underlying)
  | _ -> eval evalN x
  }
//│ evalN: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a -> 'underlying -> int & 'a) -> ((Add with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Neg with {underlying: 'underlying})) -> (forall 'b. int | 'val | 'b)
//│      = [Function: evalN]

:e
evalN evalN
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.47: 	evalN evalN
//│ ║        	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α119' -> (α120' -> (α126' | α146')))›  <:  α119_228    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α119' -> (α120' -> (α126' | α146')))›  <:  α119'
//│ res: error
//│    = [Function (anonymous)]

e = Add{lhs = Lit{val = 1}; rhs = Neg{underlying = Lit{val = 2}}}
//│ e: Add with {lhs: Lit & {val: 1}, rhs: Neg with {underlying: Lit & {val: 2}}}
//│  = Add { lhs: Lit { val: 1 }, rhs: Neg { underlying: Lit { val: 2 } } }

:e
evalN evalN e
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.62: 	evalN evalN e
//│ ║        	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α119' -> (α120' -> (α126' | α146')))›  <:  α119_307    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α119' -> (α120' -> (α126' | α146')))›  <:  α119'
//│ res: error
//│    = -1




// === === === ERROR CASES === === === //



:ShowRelativeLineNums
:AllowTypeErrors



:e
def evalN2 evalN2 x = case x of {
  Neg -> 0 - (evalN2 evalN2 x.underlying)
  | _ -> eval eval x
  }
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.+3: 	  | _ -> eval eval x
//│ ║        	         ^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α48' -> (α49' -> (val51' | α60')))›  <:  α48_362'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α48' -> (α49' -> (val51' | α60')))›  <:  α48'
//│ evalN2: ('a -> 'underlying -> int & 'a) -> ((Neg with {underlying: 'underlying}) | ~Neg) -> (error | int)

:e
evalN2 evalN2 e
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.+1: 	evalN2 evalN2 e
//│ ║        	^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α330' -> (α331' -> (α337' | α374')))›  <:  α330_408    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α330' -> (α331' -> (α337' | α374')))›  <:  α330'
//│ res: error


def evalN3 evalN3 x = case x of {
  Neg -> 0 - (evalN2 x.underlying)
  | _ -> eval evalN3 x
  }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.+2: 	  Neg -> 0 - (evalN2 x.underlying)
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?c | ?b)` is not an instance of type `int`
//│ ║  l.85: 	def evalN2 evalN2 x = case x of {
//│ ║        	                  ^^^^^^^^^^^^^^^
//│ ║  l.86: 	  Neg -> 0 - (evalN2 evalN2 x.underlying)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.87: 	  | _ -> eval eval x
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.+2: 	  Neg -> 0 - (evalN2 x.underlying)
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^
//│ evalN3: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Neg with {underlying: 'b -> 'c -> int & 'b})) -> (forall 'c. error | int | 'val | 'c)

def evalN3 evalN3 x = case x of {
  Neg -> 0 - (evalN3 x.underlying)
  | _ -> eval evalN3 x
  }
//│ evalN3: ('underlying -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Neg with {underlying: 'underlying})) -> (forall 'b. int | 'val | 'b)

:e
evalN3 evalN3 e
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.+1: 	evalN3 evalN3 e
//│ ║        	^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α510' -> (α511' -> (α516' | α536')))›  <:  α510_616    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α510' -> (α511' -> (α516' | α536')))›  <:  α510'
//│ res: error


