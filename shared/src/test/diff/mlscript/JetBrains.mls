
class Expr
class Lit: Expr & { val: int }
class Add: Expr & { lhs: Expr; rhs: Expr }
//│ Defined class Expr
//│ Defined class Lit
//│ Defined class Add

rec def eval x = case x of {
  Lit -> x.val
  | Add -> eval x.lhs + eval x.rhs
  }
//│ eval: 'a -> int
//│   where
//│     'a <: (Add with {lhs: 'a, rhs: 'a}) | Lit
//│     = [Function: eval]

def eval eval x = case x of {
  Lit -> x.val
  | Add -> eval eval x.lhs + eval eval x.rhs
  }
//│ eval: (nothing -> 'rhs -> int) -> ((Add with {lhs: anything, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│     = [Function: eval1]

eval eval!
//│ res: ((Add with {lhs: Add | Lit, rhs: Add | Lit}) | (Lit with {val: 'val})) -> (int | 'val)
//│    = [Function (anonymous)]

eval eval!
//│ res: ((Add with {lhs: Add | Lit, rhs: Add | Lit}) | (Lit with {val: 'val})) -> (int | 'val)
//│    = [Function (anonymous)]

class Neg: Expr & { underlying: Expr }
//│ Defined class Neg

def evalN evalN x = case x of {
  Neg -> 0 - (evalN evalN x.underlying)
  | _ -> eval evalN x
  }
//│ evalN: (nothing -> 'rhs -> int) -> ((Add with {lhs: anything, rhs: 'rhs}) | (Lit with {val: 'val}) | (Neg with {underlying: anything})) -> (int | 'val)
//│      = [Function: evalN]

evalN evalN!
//│ res: ((Add with {lhs: Add | Lit | Neg, rhs: Add | Lit | Neg}) | (Lit with {val: 'val}) | (Neg with {underlying: Add | Lit | Neg})) -> (int | 'val)
//│    = [Function (anonymous)]

e = Add{lhs = Lit{val = 1}; rhs = Neg{underlying = Lit{val = 2}}}
//│ e: Add with {lhs: Lit & {val: 1}, rhs: Neg with {underlying: Lit & {val: 2}}}
//│  = Add { lhs: Lit { val: 1 }, rhs: Neg { underlying: Lit { val: 2 } } }

evalN evalN! e
//│ res: int
//│    = -1




// === === === ERROR CASES === === === //



:ShowRelativeLineNums
:AllowTypeErrors



def evalN2 evalN2 x = case x of {
  Neg -> 0 - (evalN2 evalN2 x.underlying)
  | _ -> eval eval! x
  }
//│ evalN2: (nothing -> 'underlying -> int) -> ((Add with {lhs: Add | Lit, rhs: Add | Lit}) | (Lit with {val: 'val}) | (Neg with {underlying: 'underlying})) -> (int | 'val)

evalN2 evalN2! e
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	evalN2 evalN2! e
//│ ║        	^^^^^^^^^^^^^^^^
//│ ╟── application of type `Neg & {underlying: ?underlying}` does not match type `Add & ?a | Lit & ?b`
//│ ║  l.47: 	e = Add{lhs = Lit{val = 1}; rhs = Neg{underlying = Lit{val = 2}}}
//│ ║        	                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.18: 	def eval eval x = case x of {
//│ ║        	                       ^
//│ ╟── from field selection:
//│ ║  l.20: 	  | Add -> eval eval x.lhs + eval eval x.rhs
//│ ╙──      	                                       ^^^^^
//│ res: error | int


def evalN3 evalN3 x = case x of {
  Neg -> 0 - (evalN2 x.underlying)
  | _ -> eval evalN3 x
  }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.+2: 	  Neg -> 0 - (evalN2 x.underlying)
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b)` is not an instance of type `int`
//│ ║  l.67: 	def evalN2 evalN2 x = case x of {
//│ ║        	                  ^^^^^^^^^^^^^^^
//│ ║  l.68: 	  Neg -> 0 - (evalN2 evalN2 x.underlying)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.69: 	  | _ -> eval eval! x
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.70: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.+2: 	  Neg -> 0 - (evalN2 x.underlying)
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^
//│ evalN3: (nothing -> 'rhs -> int) -> ((Add with {lhs: anything, rhs: 'rhs}) | (Lit with {val: 'val}) | (Neg with {underlying: nothing -> nothing -> int})) -> (error | int | 'val)

def evalN3 evalN3 x = case x of {
  Neg -> 0 - (evalN3 x.underlying)
  | _ -> eval evalN3 x
  }
//│ evalN3: ('underlying -> int) -> ((Add with {lhs: anything, rhs: anything}) | (Lit with {val: 'val}) | (Neg with {underlying: 'underlying})) -> (int | 'val)

evalN3 evalN3! e
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	evalN3 evalN3! e
//│ ║        	^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.110: 	def evalN3 evalN3 x = case x of {
//│ ║         	                  ^^^^^^^^^^^^^^^
//│ ║  l.111: 	  Neg -> 0 - (evalN3 x.underlying)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.112: 	  | _ -> eval evalN3 x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.113: 	  }
//│ ║         	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.111: 	  Neg -> 0 - (evalN3 x.underlying)
//│ ╙──       	              ^^^^^^^^^^^^^^^^^^^
//│ res: error | int



