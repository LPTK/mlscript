
def absImpl lt x =
  case lt of
    { true -> x
    | false -> 0 - x }
//│ absImpl: bool -> int -> int
//│        = [Function: absImpl]

// * TODO support this
:e
def abs x =
  let r = x < 0 in absImpl r x
//│ abs: int -> int
//│    = [Function: abs]


def neg b = case b of
  { true -> false
  | false -> true }
//│ neg: bool -> bool
//│    = [Function: neg]

