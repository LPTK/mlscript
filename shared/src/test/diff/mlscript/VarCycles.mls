
:RecursiveTypes


def foo: ('a,) as 'a
//│ foo: in (anything,) out (nothing,)
//│    = <missing implementation>

def bar: (('b,) as 'b) -> ()
//│ bar: in nothing -> () out anything -> ()
//│    = <missing implementation>


bar foo
//│ res: ()
//│    = <no result>
//│      bar is not implemented


:ns
id1 = id
//│ id1: forall 'a. 'a -> 'a
//│    = [Function: id]

:ns
// def f x = id x
def f = id : 'c -> 'c
//│ f: forall 'c. 'c -> 'c
//│   where
//│     'c <: in anything out nothing
//│  = [Function: f]

f 1 + 2
//│ res: int
//│    = 3



:NoRecursiveTypes


:e
bar foo
//│ res: ()
//│    = <no result>
//│      bar is not implemented


f 1 + 2
//│ res: int
//│    = 3


