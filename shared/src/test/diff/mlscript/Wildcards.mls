

:e
42: ?
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.4: 	42: ?
//│ ║       	^^
//│ ╟── integer literal of type `42` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.4: 	42: ?
//│ ╙──     	    ^
//│ res: anything
//│    = 42

:e // FIXME new rigidification semantics
def n: ?
n = 42
//│ n: anything
//│  = <missing implementation>
//│ 42
//│   <:  n:
//│ anything
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.17: 	n = 42
//│ ║        	^^^^^^
//│ ╟── integer literal of type `42` does not match type `nothing`
//│ ║  l.17: 	n = 42
//│ ║        	    ^^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.16: 	def n: ?
//│ ╙──      	       ^
//│  = 42


def f x = x : ?
//│ f: nothing -> anything
//│  = [Function: f]

class E[A]
  method In: A -> A
  method In = id
//│ Defined class E[=A]
//│ Declared E.In: E['A] -> 'A -> 'A
//│ Defined E.In: E['A] -> 'a -> 'a

:e
E{} : E[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.47: 	E{} : E[?]
//│ ║        	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.47: 	E{} : E[?]
//│ ║        	        ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.47: 	E{} : E[?]
//│ ╙──      	        ^
//│ res: E[?]
//│    = E {}

:e // FIXME new rigidification semantics
def e: E[?]
def e = E{}
//│ e: E[?]
//│  = <missing implementation>
//│ E['A]
//│   <:  e:
//│ E[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.62: 	def e = E{}
//│ ║        	^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.61: 	def e: E[?]
//│ ║        	         ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.61: 	def e: E[?]
//│ ╙──      	         ^
//│  = [Function: e]


type Als1[A] = int -> A
//│ Defined type alias Als1[+A]

:e
add 1 : Als1[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.84: 	add 1 : Als1[?]
//│ ║        	^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.84: 	add 1 : Als1[?]
//│ ╙──      	             ^
//│ res: Als1[?]
//│    = [Function (anonymous)]

:e // FIXME new rigidification semantics
def a1: Als1[?]
a1 = add 1
//│ a1: Als1[?]
//│   = <missing implementation>
//│ int -> int
//│   <:  a1:
//│ Als1[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.97: 	a1 = add 1
//│ ║        	^^^^^^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.96: 	def a1: Als1[?]
//│ ╙──      	             ^
//│   = [Function (anonymous)]


type Als2[A] = A -> int
//│ Defined type alias Als2[-A]

:e
add 1 : Als2[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.117: 	add 1 : Als2[?]
//│ ║         	^^^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.117: 	add 1 : Als2[?]
//│ ╙──       	             ^
//│ res: Als2[?]
//│    = [Function (anonymous)]

:e // FIXME new rigidification semantics
def a2: Als2[?]
a2 = add 1
//│ a2: Als2[?]
//│   = <missing implementation>
//│ int -> int
//│   <:  a2:
//│ Als2[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.129: 	a2 = add 1
//│ ║         	^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.128: 	def a2: Als2[?]
//│ ╙──       	             ^
//│   = [Function (anonymous)]


def q: ?
//│ q: anything
//│  = <missing implementation>

:e // FIXME new rigidification semantics
q = 1
//│ 1
//│   <:  q:
//│ anything
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.149: 	q = 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `1` does not match type `nothing`
//│ ║  l.149: 	q = 1
//│ ║         	    ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.144: 	def q: ?
//│ ╙──       	       ^
//│  = 1

:e
q + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.165: 	q + 1
//│ ║         	^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.144: 	def q: ?
//│ ║         	       ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.165: 	q + 1
//│ ╙──       	^
//│ res: int
//│    = 2

:e
q q
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.179: 	q q
//│ ║         	^^^
//│ ╟── type `anything` is not a function
//│ ║  l.144: 	def q: ?
//│ ║         	       ^
//│ ╟── but it flows into reference with expected type `anything -> ?a`
//│ ║  l.179: 	q q
//│ ╙──       	^
//│ res: error
//│ Runtime error:
//│   TypeError: q is not a function


:NoJS

class Expr[A]
  method Inv: A -> A
//│ Defined class Expr[=A]
//│ Declared Expr.Inv: Expr['A] -> 'A -> 'A

def e: Expr[?]
def f: Expr[?] -> Expr[?]
//│ e: Expr[?]
//│ f: Expr[?] -> Expr[?]

// * `Expr[?] <: Expr[?]` is false
// * because each `?` stands for an unknown type ranging from Bot to Top
:e
f e
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.209: 	f e
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.201: 	def e: Expr[?]
//│ ║         	            ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.202: 	def f: Expr[?] -> Expr[?]
//│ ╙──       	            ^
//│ res: Expr[?]




class Foo[A]
  method Get = error : A
  method Foo1: Foo[A] -> Foo[A]
  method Foo1 = id
  method Id = id : A -> A
//│ Defined class Foo[=A]
//│ Declared Foo.Foo1: Foo['A] -> Foo['A] -> Foo['A]
//│ Defined Foo.Get: Foo['A] -> 'A
//│ Defined Foo.Foo1: Foo['A] -> 'a -> 'a
//│ Defined Foo.Id: Foo['A] -> 'A -> 'A

def foo: Foo[?]
//│ foo: Foo[?]

:e // * Works with existential wildcards
foo = Foo{}
//│ Foo['A]
//│   <:  foo:
//│ Foo[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.239: 	foo = Foo{}
//│ ║         	^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ╙──       	             ^

foo
//│ res: Foo[?]

:e
foo : Foo['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.257: 	foo : Foo['a]
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ╙──       	             ^
//│ res: Foo['a]
//│   where
//│     'a :> anything
//│        <: nothing

:e
foo.Foo1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.273: 	foo.Foo1
//│ ║         	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ╙──       	             ^
//│ res: Foo['A] -> Foo['A] | error
//│   where
//│     'A :> anything
//│        <: nothing

foo1 = Foo.Foo1
//│ foo1: Foo['A] -> Foo['A] -> Foo['A]

:e
foo1 foo
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.292: 	foo1 foo
//│ ║         	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ╙──       	             ^
//│ res: Foo['A] -> Foo['A] | error
//│   where
//│     'A :> anything
//│        <: nothing


:e
foo2 = foo : Foo['a .. 'b]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.309: 	foo2 = foo : Foo['a .. 'b]
//│ ║         	       ^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ╙──       	             ^
//│ foo2: Foo[anything]

:e
foo2.Id
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.322: 	foo2.Id
//│ ║         	^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── from type bounds:
//│ ║  l.309: 	foo2 = foo : Foo['a .. 'b]
//│ ║         	                 ^^^^^^^^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.224: 	class Foo[A]
//│ ╙──       	          ^
//│ res: nothing -> anything | error

:e
foo3 = foo2 : Foo['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.341: 	foo3 = foo2 : Foo['a]
//│ ║         	       ^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── from type variable:
//│ ║  l.341: 	foo3 = foo2 : Foo['a]
//│ ╙──       	                  ^^
//│ foo3: Foo['a]
//│   where
//│     'a :> anything
//│        <: nothing

:e
foo3.Id
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.360: 	foo3.Id
//│ ║         	^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.235: 	def foo: Foo[?]
//│ ║         	             ^
//│ ╟── from type variable:
//│ ║  l.341: 	foo3 = foo2 : Foo['a]
//│ ║         	                  ^^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.224: 	class Foo[A]
//│ ╙──       	          ^
//│ res: nothing -> anything | error


:e
foo2 = foo : Foo[anything .. nothing]
//│ ╔══[ERROR] Type mismatch in type bounds:
//│ ║  l.380: 	foo2 = foo : Foo[anything .. nothing]
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.380: 	foo2 = foo : Foo[anything .. nothing]
//│ ║         	                 ^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.380: 	foo2 = foo : Foo[anything .. nothing]
//│ ╙──       	                             ^^^^^^^
//│ foo2: Foo[in anything out nothing]

foo2.Id
//│ res: 'A -> 'A

foo3 = foo2 : Foo['a]
//│ foo3: Foo['a]

foo3.Id
//│ res: 'A -> 'A


fid = Foo.Id
//│ fid: Foo['A] -> 'A -> 'A

fid foo2
//│ res: 'A -> 'A

fid (f: Foo['a..'b]) = Foo.Id f
//│ fid: Foo['b] -> ('b & 'A) -> 'A


class Bar[A]: { value: A; id: A -> A }
  method Bid: A -> A
  method Bid = id
//│ Defined class Bar[=A]
//│ Declared Bar.Bid: Bar['A] -> 'A -> 'A
//│ Defined Bar.Bid: Bar['A] -> 'a -> 'a

def bar: Bar[?]
//│ bar: Bar[?]

:e
rec def bar = Bar{value = bar; id}
//│ 'value
//│   where
//│     'value :> Bar['A] with {id: forall 'a. 'a -> 'a, value: 'value}
//│     'A :> 'value
//│   <:  bar:
//│ Bar[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.423: 	rec def bar = Bar{value = bar; id}
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Bar[?A] & {id: ?id, value: ?value}` does not match type `nothing`
//│ ║  l.423: 	rec def bar = Bar{value = bar; id}
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.423: 	rec def bar = Bar{value = bar; id}
//│ ║         	                          ^^^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.419: 	def bar: Bar[?]
//│ ╙──       	             ^

:e
bar.Bid
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.444: 	bar.Bid
//│ ║         	^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.419: 	def bar: Bar[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.419: 	def bar: Bar[?]
//│ ╙──       	             ^
//│ res: nothing -> anything | error

:e
bar: Bar['a..'b]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.457: 	bar: Bar['a..'b]
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.419: 	def bar: Bar[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.419: 	def bar: Bar[?]
//│ ╙──       	             ^
//│ res: Bar[anything]

bar.value
//│ res: anything

bar.id
//│ res: nothing -> anything



type Baz[A] = { id: A -> A; bid: Baz[A] -> Baz[A] }
//│ Defined type alias Baz[=A]

def baz: Baz[?]
//│ baz: Baz[?]

:e
baz = { id; bid = id }
//│ {bid: forall 'a. 'a -> 'a, id: forall 'a. 'a -> 'a}
//│   <:  baz:
//│ Baz[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.484: 	baz = { id; bid = id }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.480: 	def baz: Baz[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.480: 	def baz: Baz[?]
//│ ╙──       	             ^

baz.id
//│ res: nothing -> anything

baz.bid
//│ res: Baz[?] -> Baz[?]

:e
baz.bid baz
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.505: 	baz.bid baz
//│ ║         	^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.480: 	def baz: Baz[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.480: 	def baz: Baz[?]
//│ ╙──       	             ^
//│ res: error | Baz[?]

:e
baz.bid (baz: Baz['a..'b])
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.518: 	baz.bid (baz: Baz['a..'b])
//│ ║         	         ^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.480: 	def baz: Baz[?]
//│ ║         	             ^
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.480: 	def baz: Baz[?]
//│ ╙──       	             ^
//│ res: Baz[?]



def baz: Baz[Baz[?]]
//│ baz: Baz[Baz[?]]

baz.id
//│ res: Baz[?] -> Baz[?]

baz.bid
//│ res: Baz[Baz[?]] -> Baz[Baz[?]]






