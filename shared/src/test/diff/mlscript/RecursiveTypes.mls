

// From Simple-sub tests:
:js
let rec l = fun a -> fun a -> fun a -> l in let rec r = fun a -> fun a -> r in if true then l else r
//│ // Prelude
//│ let res;
//│ // Query 1
//│ res = ((l) => ((r) => true ? l : r)(function r(a) {
//│   return (a) => r;
//│ }))(function l(a) {
//│   return (a) => (a) => l;
//│ });
//│ // End of generated code
//│ res: anything -> anything -> anything -> nothing
//│    = [Function: l]



rec def l a = l
//│ l: anything -> nothing
//│  = [Function: l]

if true then l else l
//│ res: anything -> nothing
//│    = [Function: l]



rec def l a a a = l
//│ l: anything -> anything -> anything -> nothing
//│  = [Function: l1]


rec def r a a = l
//│ r: anything -> anything -> anything -> anything -> anything -> nothing
//│  = [Function: r]

rec def r a a = l
//│ r: anything -> anything -> anything -> anything -> anything -> nothing
//│  = [Function: r1]


rec def r a a = r
//│ r: anything -> anything -> nothing
//│  = [Function: r2]


if true then l else r
//│ res: anything -> anything -> anything -> nothing
//│    = [Function: l1]

if true then l else r
//│ res: anything -> anything -> anything -> nothing
//│    = [Function: l1]



rec def l (a: int) (a: int) = l
rec def r (a: bool) (a: bool) (a: bool) = r
//│ l: int -> int -> nothing
//│  = [Function: l2]
//│ r: bool -> bool -> bool -> nothing
//│  = [Function: r3]

if true then l else r
//│ res: nothing -> nothing -> bool -> nothing
//│    = [Function: l2]

if true then l else r
//│ res: nothing -> nothing -> bool -> nothing
//│    = [Function: l2]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]

if true then (fun x -> add x 1) else (fun y -> not y)
//│ res: nothing -> (bool | int)
//│    = [Function (anonymous)]



rec def l (a: int) (a: bool) = l
rec def r (a: int) (a: bool) (a: bool) = r
//│ l: int -> bool -> nothing
//│  = [Function: l3]
//│ r: int -> bool -> bool -> nothing
//│  = [Function: r4]

if true then l else r
//│ res: int -> bool -> bool -> nothing
//│    = [Function: l3]

if true then l else r
//│ res: int -> bool -> bool -> nothing
//│    = [Function: l3]



rec def l (a: int) b = if true then l else b
rec def r (a: int) b c = if true then r else if true then b else c
//│ l: int -> 'a -> 'a
//│   where
//│     'a :> int -> anything -> 'a
//│  = [Function: l4]
//│ r: int -> 'a -> anything -> 'a
//│   where
//│     'a :> int -> anything -> anything -> 'a
//│  = [Function: r5]

if true then l else r
//│ res: int -> ('a & 'b) -> (anything -> 'a | 'b)
//│   where
//│     'b :> int -> anything -> 'b
//│     'a :> int -> anything -> anything -> 'a
//│    = [Function: l4]

if true then l else r
//│ res: int -> ('a & 'b) -> (anything -> 'a | 'b)
//│   where
//│     'b :> int -> anything -> 'b
//│     'a :> int -> anything -> anything -> 'a
//│    = [Function: l4]



rec def l (a: int) (b: int) = l
//│ l: int -> int -> nothing
//│  = [Function: l5]

rec def r (a: int) (b: int) (c: int) = r
//│ r: int -> int -> int -> nothing
//│  = [Function: r6]

if true then l else r
//│ res: int -> int -> int -> nothing
//│    = [Function: l5]



// ------ // ------ // ------ // ------ // ------ // ------ //


:NoJS


class C[A]: { a: A }
//│ Defined class C[+A]



:ns
rec def foo (c: C['a]) = foo (c.a)
//│ foo: forall 'foo 'a. 'foo
//│   where
//│     'foo := C[C['a]] -> nothing
//│     'a <: C['a]

foo
//│ res: 'a -> nothing
//│   where
//│     'a <: C['a]

type Rec = C[Rec]
def foo_ty: Rec -> nothing
//│ Defined type alias Rec
//│ foo_ty: Rec -> nothing

foo_ty = foo
//│ 'a -> nothing
//│   where
//│     'a <: C['a]
//│   <:  foo_ty:
//│ Rec -> nothing

def foo_ty2: (C['r] as 'r) -> nothing
//│ foo_ty2: in C[nothing] -> nothing out C[?] -> nothing

:ns
foo_ty2
//│ res: C[in anything out nothing] -> nothing

foo_ty = foo_ty2
//│ C[?] -> nothing
//│   <:  foo_ty:
//│ Rec -> nothing

foo_ty2 = foo_ty
//│ Rec -> nothing
//│   <:  foo_ty2:
//│ C[nothing] -> nothing

foo_ty2 = foo
//│ 'a -> nothing
//│   where
//│     'a <: C['a]
//│   <:  foo_ty2:
//│ C[nothing] -> nothing



rec def bar = C { a = bar }
//│ bar: 'A
//│   where
//│     'A :> C['A]

type Rec2 = C[Rec2]
def bar_ty: Rec2
//│ Defined type alias Rec2
//│ bar_ty: Rec2

bar_ty = bar
//│ 'A
//│   where
//│     'A :> C['A]
//│   <:  bar_ty:
//│ Rec2

def bar_ty2: C['r] as 'r
//│ bar_ty2: in C[?] out C[nothing]

:ns
bar_ty2
//│ res: C[in anything out nothing]

bar_ty2
//│ res: C[nothing]

bar_ty = bar_ty2
//│ C[nothing]
//│   <:  bar_ty:
//│ Rec2

bar_ty2 = bar_ty
//│ Rec2
//│   <:  bar_ty2:
//│ C[?]

bar_ty2 = bar
//│ 'A
//│   where
//│     'A :> C['A]
//│   <:  bar_ty2:
//│ C[?]



type Rec3 = { x: Rec3 }
//│ Defined type alias Rec3

def bar2_ty: Rec3
//│ bar2_ty: Rec3

def bar2_ty2: { x: 'r } as 'r
//│ bar2_ty2: in {x: anything} out {x: nothing}

bar2_ty = bar2_ty2
//│ {x: nothing}
//│   <:  bar2_ty:
//│ Rec3

bar2_ty2 = bar2_ty
//│ Rec3
//│   <:  bar2_ty2:
//│ {x: nothing}

:e
bar2_ty2 = bar_ty2
//│ C[nothing]
//│   <:  bar2_ty2:
//│ {x: nothing}
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.351: 	bar2_ty2 = bar_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `C[nothing]` does not have field 'x'
//│ ║  l.284: 	def bar_ty2: C['r] as 'r
//│ ║         	             ^^^^^
//│ ╟── but it flows into reference with expected type `{x: anything}`
//│ ║  l.351: 	bar2_ty2 = bar_ty2
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.331: 	def bar2_ty2: { x: 'r } as 'r
//│ ╙──       	              ^^^^^^^^^

:e
bar_ty2 = bar2_ty2
//│ {x: nothing}
//│   <:  bar_ty2:
//│ C[?]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.373: 	bar_ty2 = bar2_ty2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: nothing}` is not an instance of type `C`
//│ ║  l.331: 	def bar2_ty2: { x: 'r } as 'r
//│ ║         	              ^^^^^^^^^
//│ ╟── but it flows into reference with expected type `C[?]`
//│ ║  l.373: 	bar_ty2 = bar2_ty2
//│ ║         	          ^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.284: 	def bar_ty2: C['r] as 'r
//│ ╙──       	             ^^^^^



// ------ // ------ // ------ // ------ // ------ // ------ //



rec def f x = if x > 0 then f (x with { a = x - 1 }) else x
//│ f: 'a -> 'a

f 1
//│ res: 1

:ns
rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ f: forall 'b 'c 'a 'f 'd. 'f
//│   where
//│     'f := 'b -> 'c
//│     'b :> 'b\a & {a: int}
//│        <: ({a: 'c} | ~{a: int} | ~{})\a & ({a: 'c} | ~{a: int})\a & (number | ~{a: int} | ~{})\a & (number | ~{a: int})\a & (int | ~{a: int} | ~{})\a & (int | ~{a: int})\a & 'c & int & number
//│     'c :> 'b\a & {a: int}
//│        <: 'd
//│     'd :> 'b\a & {a: int}
//│        <: {a: 'a}
//│     'a <: 'c

f
//│ res: 'a -> 'b
//│   where
//│     'a :> 'a\a & {a: int}
//│        <: int & (int | ~{a: int})\a & (number | ~{a: int})\a & ({a: 'b} | ~{a: int})\a & 'b
//│     'b :> 'a\a & {a: int}
//│        <: {a: 'b}

// Notice how what is most likely an the error is reported in call sites,
//    due to the delaying effect of the field removal type...
//    though it *is* still possible to call this function wtihout errors,
//    using a bottom-typed argument.

:e
f 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.438: 	f 1
//│ ║         	^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | 'a\a & {a: int}
//│   where
//│     'a :> 1 | 'a\a & {a: int}

:e
f { a = 1 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.453: 	f { a = 1 }
//│ ║         	^^^^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error

f error
//│ res: 'a
//│   where
//│     'a :> 'a\a & {a: int}


:e
rec def ainf = { a = ainf }
f ainf
//│ ainf: {a: nothing}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.473: 	f ainf
//│ ║         	^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error

:e
rec def infina = 0 with { a = infina }
f infina
//│ infina: 0 & {a: nothing}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.490: 	f infina
//│ ║         	^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'a'
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ║         	                                             ^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.409: 	rec def f x = if x > 0 then (f (x with { a = x - 1 })).a else x
//│ ╙──       	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | 'a\a & {a: int}
//│   where
//│     'a :> 0 & {a: nothing} | 'a\a & {a: int}


def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ f_manual: in forall 'c. ({a: nothing} & 'c) -> ('c | anything\a & {a: int}) out forall 'c. ({a: 'c} & 'c) -> 'c

:e
f_manual 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.517: 	f_manual 1
//│ ║         	^^^^^^^^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.517: 	f_manual 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.510: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ║         	                ^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.510: 	def f_manual: (({a: 'b & 'a & 'c} as 'a) & 'd) -> ('c | ('d | 'e\a & {a: int} as 'e))
//│ ╙──       	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: 1 | error

:e
f_manual { a = 1 }
//│ res: 1 | {a: 1}

f_manual error
//│ res: nothing

// > FIXME why is this one accepted but `f ainf` is not?
//    It looks like a simplification error (I copy-pasted the simplified type for f_manual)
//    since `f_manual_ns ainf` gets the same error as `f ainf`.
f_manual ainf
//│ res: {a: nothing}

// Notice the simplified type is NOT the same as that of `f`...
def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ f_manual_ns: in forall 'b. (int & {a: nothing} & 'b) -> ('b | anything\a & {a: int}) out forall 'b. ((int & {a: 'b} | ~{a: int})\a & int & {a: anything} & 'b) -> 'b

:e
f_manual_ns ainf
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.577: 	f_manual_ns ainf
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `anything` does not match type `int | ~{a: 'e | int}`
//│ ║  l.472: 	rec def ainf = { a = ainf }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int | ~{a: 'e | int}`
//│ ║  l.577: 	f_manual_ns ainf
//│ ║         	            ^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.568: 	def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ ║         	                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.568: 	def f_manual_ns: 'a | ('b & (({a: 'd & 'c} as 'c) | ~{a: 'e | int} | ~{})\a & (({a: 'd & 'c} as 'c) | ~{a: 'e | int})\a & (({a: 'f} as 'c) as 'f) & (int | ~{a: 'e | int} | ~{})\a & (int | ~{a: 'e | int})\a & int & int) -> ('g | 'd | ('b | 'h\a & {a: 'e | int} as 'h))
//│ ╙──       	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error | int | {a: nothing}

def f_manual_2: (({a: 'a} as 'a) & 'b) -> ('b | 'c\a & {a: int} as 'c)
//│ f_manual_2: in forall 'b. ({a: nothing} & 'b) -> ('b | anything\a & {a: int}) out forall 'b. ({a: anything} & 'b) -> 'b

f_manual_2 // [test:T2]
//│ res: ({a: anything} & 'b) -> 'b

f_manual_2 ainf
//│ res: {a: nothing}



rec def f x = if error then f (x with { a = x - 1 }) else x
//│ f: 'a -> 'a

r = f 1
//│ r: 1

r + 1
//│ res: int

:e
r.a
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.624: 	r.a
//│ ║         	^^^
//│ ╟── integer literal of type `1` does not have field 'a'
//│ ║  l.615: 	r = f 1
//│ ║         	      ^
//│ ╟── but it flows into reference with expected type `{a: ?a}`
//│ ║  l.624: 	r.a
//│ ╙──       	^
//│ res: error

case r of {int -> 0 | _ -> r.a}
//│ res: 0

r2 = case r of {int -> error | _ -> r}
//│ r2: nothing

r2.a
//│ res: nothing

r2 + 1
//│ res: int

r: int
//│ res: int



rec def f x = if error then f (x with { a = 1 }) else x
//│ f: 'a -> 'a

r = f 1
//│ r: 1

r: int
//│ res: int


// Field removal also blocks proper simplification

def fancyBottom1: 'a & ('a -> 'a) as 'a
def fancyBottom2: 'a\x as 'a
//│ fancyBottom1: nothing
//│ fancyBottom2: in anything\x out nothing

fancyBottom2: nothing
//│ res: nothing



// ------ // ------ // ------ // ------ // ------ // ------ //



// Just poking around:

def impossible: 'a -> ('a & int)
//│ impossible: 'a -> (int & 'a)

rec def f (x: int | string) = f (impossible x) + 1
//│ f: (int | string) -> int

rec def f (x: int | string) = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: (int | string) -> int

rec def f x = (case x of {int -> f "ok" | string -> f (impossible x)}) + 1
//│ f: anything -> int

f 1
f "a"
//│ res: int
//│ res: int

rec def f x = case x of {int -> f "ok" | string -> f (impossible x) | _ -> x}
//│ f: anything -> nothing

f 1
f "a"
f false
//│ res: nothing
//│ res: nothing
//│ res: nothing

