
class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
  method In: E -> E
  method In = id
//│ Defined class Lit
//│ Defined class Add[=E]
//│ Declared Add.In: Add['E] -> 'E -> 'E
//│ Defined Add.In: Add['E] -> 'a -> 'a



def eval1_ty_ugly: Add['b] | 'a & ~Lit as 'b
//│ eval1_ty_ugly: Add[in anything out nothing]
//│              = <missing implementation>

// def eval1_ty: Add['b]
def eval1_ty: Add[int] // ~500
// def eval1_ty: Add['b] | 'a // ~800
// def eval1_ty: Add['b]
//│ eval1_ty: Add[int]
//│         = <missing implementation>

// :stdout
// :d
:stats
:e
eval1_ty = eval1_ty_ugly
//│ Add[in anything out nothing]
//│   <:  eval1_ty:
//│ Add[int]
//│         = <no result>
//│           eval1_ty_ugly is not implemented
//│ constrain calls  : 19
//│ annoying  calls  : 0
//│ subtyping calls  : 62

