class None: {}
class Some[A]: { v: A }
//│ Defined class None
//│ Defined class Some[+A]

def Some v = Some{v}
def None = None{}
//│ Some: 'v -> Some['v]
//│     = [Function: Some1]
//│ None: None
//│     = [Function: None1]

def flatMap = fun f -> fun opt ->
  case opt of { Some -> f opt.v | None -> opt }
//│ flatMap: ('v -> 'a) -> (None & 'a | (Some[?] with {v: 'v})) -> 'a
//│        = [Function: flatMap]

f x = Some x
flatMap f (Some 1)
flatMap f None
//│ f: 'v -> (forall 'a. Some['v] | 'a)
//│  = [Function: f]
//│ res: Some[1] | 'a | 'b
//│    = Some { v: 1 }
//│ res: None | Some['a] | 'a | 'b
//│    = None {}

:e
flatMap f "oops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.29: 	flatMap f "oops"
//│ ║        	^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` does not match type `None & ?a | Some[?] & ?b`
//│ ║  l.29: 	flatMap f "oops"
//│ ║        	          ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.14: 	  case opt of { Some -> f opt.v | None -> opt }
//│ ╙──      	       ^^^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression

class NoneBecause: None & { reason: string }
flatMap f (NoneBecause { reason = "uh uh" })
//│ Defined class NoneBecause
//│ res: NoneBecause & {reason: "uh uh"} | Some['a] | 'a | 'b
//│    = NoneBecause { reason: 'uh uh' }

type Expr = Lit | Neg | Var | Plus
class Lit: {v: int}
class Neg: {sub: Expr}
class Var: {nme: string}
class Plus: {lhs: Expr; rhs: Expr}
//│ Defined type alias Expr
//│ Defined class Lit
//│ Defined class Neg
//│ Defined class Var
//│ Defined class Plus

:stats
rec def evalOpt x = case x of {
  | Lit ->
      Some x.v
  | Neg ->
      // flatMap (fun s -> Some (neg x.sub)) (evalOpt x.sub)
      flatMap (fun s -> Some (negate s)) (evalOpt x.sub)
  | Var ->
      // None with {err = concat "free var: " x.nme}
      NoneBecause {reason = concat "free var: " x.nme}
      // None
  | Plus ->
      flatMap (fun l -> flatMap (fun r ->
        // Some (add x.lhs x.rhs)
        Some (l + r)
      ) (evalOpt x.rhs)) (evalOpt x.lhs)
  }
//│ evalOpt: 'a -> (forall 'v, 'b, 'A, 'c, 'd, 'A0, 'e, 'v0, 'f. NoneBecause | (Some['A0 | 'A | int] with {v: 'A0 | int | 'v | 'v0}) | 'd | 'b | 'c | 'e | 'f)
//│   where
//│     'a <: Lit & {v: int} | (Neg with {sub: 'a}) | (Plus with {lhs: 'a, rhs: 'a}) | Var
//│        = [Function: evalOpt]
//│ constrain calls  : 631
//│ annoying  calls  : 105
//│ subtyping calls  : 654

:stats
evalOpt (Plus{lhs = Lit{v=2}; rhs = Lit{v=3}})
//│ res: NoneBecause | (Some['A | 'A0 | int] with {v: 'A | int | 'v | 'v0}) | 'a | 'b | 'c | 'd | 'e | 'f | 'g | 'h | 'i | 'j | 'k | 'l | 'm | 'n | 'o
//│    = Some { v: 5 }
//│ constrain calls  : 171
//│ annoying  calls  : 37
//│ subtyping calls  : 699
