:NewParser
:ParseOnly
:dp
let qq_int = code"1"
//│ |#let| |qq_int| |#=| |code"|1|"|
//│ ? block		inspects |#let| |qq_int| |#=|...    [at l.236]
//│ ! t		consumes |#let|    [at l.293]
//│ ? yeetSpaces		inspects | |qq_int| |#=| |...    [at l.365]
//│ ! yeetSpaces		consumes | |    [at l.365]
//│ ? yeetSpaces		inspects |qq_int| |#=| |code"|1|"|    [at l.365]
//│ ! x$23		consumes |qq_int|    [at l.302]
//│ @ funParams(())    [at l.325]
//│ │ ? yeetSpaces		inspects | |#=| |code"|1|"|    [at l.365]
//│ │ ! yeetSpaces		consumes | |    [at l.365]
//│ = List()
//│ ? yeetSpaces		inspects |#=| |code"|1|"|    [at l.365]
//│ ? yeetSpaces		inspects |#=| |code"|1|"|    [at l.365]
//│ ! t		consumes |#=|    [at l.334]
//│ @ expr(0,true)    [at l.335]
//│ │ @ exprOrIf(0,true)    [at l.389]
//│ │ │ ? exprOrIf		inspects | |code"|1|"|    [at l.401]
//│ │ │ ! exprOrIf		consumes | |    [at l.403]
//│ │ │ @ exprOrIf(0,true)    [at l.404]
//│ │ │ │ ? exprOrIf		inspects |code"|1|"|    [at l.401]
//│ │ │ │ ! exprOrIf		consumes |code"|1|"|    [at l.434]
//│ │ │ │ > @ expr(0,true)    [at l.435]
//│ │ │ │ > │ @ exprOrIf(0,true)    [at l.389]
//│ │ │ │ > │ │ ? exprOrIf		inspects |1|    [at l.401]
//│ │ │ │ > │ │ ! exprOrIf		consumes |1|    [at l.414]
//│ │ │ │ > │ │ @ exprCont(0,`1`,false)    [at l.415]
//│ │ │ │ > │ │ │ ? exprCont		inspects ||    [at l.561]
//│ │ │ │ > │ │ = Right(1)
//│ │ │ │ > │ = Right(1)
//│ │ │ │ > = 1
//│ │ │ │ > ? concludeWith		inspects ||    [at l.71]
//│ │ │ │ > Concluded with 1
//│ │ │ = Right(Quoted' 1 ')
//│ │ = Right(Quoted' 1 ')
//│ = Quoted' 1 '
//│ ? block		inspects ||    [at l.358]
//│ ? parseAll		inspects ||    [at l.60]
//│ Parsed: {let qq_int = Quoted' 1 '}
//│ Parsed: 

type IntCode = Code[int]
//│ |#type| |IntCode| |#=| |Code|[|int|]|
//│ Parsed: {type alias IntCode(): (Code)[int] = {}}

fun foo(x: IntCode): unit
//│ |#fun| |foo|(|x|#:| |IntCode|)|#:| |unit|
//│ Parsed: {fun foo: [] -> (x: IntCode,) -> unit}

foo(qq_int)
//│ |foo|(|qq_int|)|
//│ Parsed: {foo (qq_int,)}
