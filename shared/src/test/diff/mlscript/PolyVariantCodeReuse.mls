// Example from Code reuse through polymorphic variants

//************************** PRELIMINARIES *************************

class NotFound
class Success: { result: anything }
//│ Defined class NotFound
//│ Defined class Success

def NotFound = NotFound {}
def Success result = Success { result }
//│ NotFound: NotFound
//│         = [Function: NotFound1]
//│ Success: 'result -> (Success with {result: 'result})
//│        = [Function: Success1]

type Tuple[A, B] = (A, B)
//│ Defined type alias Tuple[+A, +B]

def Tuple l r = (l, r)
//│ Tuple: 'a -> 'b -> ('a, 'b,)
//│      = [Function: Tuple]

class Nil
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
//│ Nil: Nil
//│    = [Function: Nil1]

def Cons head tail = Cons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]

def eq: string -> string -> bool
//│ eq: string -> string -> bool
//│   = <missing implementation>

rec def list_assoc s l = case l of {
  | Cons ->
      if eq l.head._1 s then Success l.head._2
      else list_assoc s l.tail
  | Nil -> NotFound
  }
//│ list_assoc: string -> 'a -> (forall 'b. NotFound | (Success with {result: 'result}) | 'b)
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│           = <no result>
//│             eq is not implemented

list_assoc "2" (Cons (Tuple "2" 1) Nil )
//│ res: NotFound | Success & {result: 1} | 'a | 'b
//│    = <no result>
//│      list_assoc and eq are not implemented

// ***************************** Var *******************************

class Expr
class Lambda
//│ Defined class Expr
//│ Defined class Lambda

class Var: Lambda & { name: string }
//│ Defined class Var

def eval_var sub v = case v of {
  | Var -> let res = list_assoc v.name sub in case res of {
          | NotFound -> v
          | Success -> res.result
          }
  }
//│ eval_var: 'a -> (Var & 'result) -> 'result
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│         = <no result>
//│           list_assoc and eq are not implemented

// *************************** Lambda ********************************

class Abs[a]: Lambda & { name: string; body: a }
class App[a]: Lambda & { lhs: a; rhs: a }
//│ Defined class Abs[+a]
//│ Defined class App[+a]

:js
def incr: {a: int} -> unit
// def incr x = x.a <- x.a + 1
//│ // Query 1 is empty
//│ // End of generated code
//│ incr: {a: int} -> unit
//│     = <missing implementation>

:js
def gensym: () -> (unit, {a: 'a},)
// def gensym = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ // Query 1 is empty
//│ // End of generated code
//│ gensym: () -> (unit, {a: nothing},)
//│       = <missing implementation>

def int_to_string: int -> string
//│ int_to_string: int -> string
//│              = <missing implementation>

def eval_lambda eval_rec subst v = case v of {
  | Var -> eval_var subst v
  | App -> let l2 = eval_rec subst v.lhs in
    let l1 = eval_rec subst v.rhs in
    case l1 of {
    | Abs -> eval_rec (Cons (Tuple l1.name l2) Nil) l1.body
    | _ -> App { lhs = l1; rhs = l2 }
    }
  | Abs -> let new_name = int_to_string ((gensym ())._2.a) in
    Abs { name = new_name;
          body = eval_rec (Cons (Tuple v.name (Var { name = new_name })) subst) v.body }
  }
//│ eval_lambda: ('tail -> 'lhs -> 'a & 'tail -> 'rhs -> ((Abs[?] with {body: 'body, name: 'b}) | 'lhs0 & ~#Abs) & (forall 'c. (Cons[('d, Var with {name: forall 'e. string | 'e},) | 'A] with {head: ('d, Var with {name: forall 'e. string | 'e},), tail: 'tail}) | 'c) -> 'body0 -> 'body1 & (forall 'f. (Cons[('b, forall 'g. 'g | 'a,)] with {tail: Nil}) | 'f) -> 'body -> 'result) -> ('h & List['A] & 'tail) -> ((Abs[?] with {body: 'body0, name: 'd}) | (App[?] with {lhs: 'lhs, rhs: 'rhs}) | Var & 'result) -> ((Abs['body1] with {name: forall 'e. string | 'e}) | (App[forall 'g. 'lhs0 | 'g | 'a] with {lhs: 'lhs0, rhs: forall 'g. 'g | 'a}) | 'result)
//│   where
//│     'h <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'h}) | Nil
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented

rec def eval1 subst = eval_lambda eval1 subst
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.127: 	rec def eval1 subst = eval_lambda eval1 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. (α310_609''' | ((α356_550' | α358_610''') | α397_612'''))›  <:  α287_600'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 2. (α310_595''' | ((α356_550' | α358_596''') | α397_598'''))›  <:  α287_577''
//│ eval1: (List['name] & 'tail) -> (forall 'name0, 'name, 'b, 'rhs, 'c, 'd, 'e, 'f, 'g, 'h. ('e & (Abs['name] & {body: 'body, name: string & 'f & 'name} & 'h | App['name] & 'd | Var & {name: string & 'f & 'name0} & 'b & 'c & 'g)) -> (forall 'i, 'j, 'rhs, 'k, 'l, 'g. (Abs['a] with {name: forall 'name1, 'm. 'name1 | string | 'm}) | (App['a0] with {lhs: 'lhs, rhs: forall 'n. 'rhs | 'n}) | 'result | (Var with {name: forall 'name1, 'm. 'name1 | string | 'm}) | 'g | 'l | 'k | 'o | 'i | 'j))
//│   where
//│     'a :> forall 'name, 'p, 'd, 'q, 'rhs, 'r, 'f, 'k. (App['a0] with {lhs: 'lhs, rhs: forall 'rhs0, 'n. 'rhs | 'rhs0 | 'n}) | 'result | (Var with {name: forall 'name1, 'm. 'name1 | string | 'm}) | 's | 'q | 'k | 'o | 'p | 'r
//│     'r :> Abs['a] with {name: forall 'name1, 'm, 'name2. 'name1 | 'name2 | string | 'm}
//│     'o :> forall 't, 'name, 'rhs, 'd, 'u, 'v, 'f, 'k. (App['a0] with {lhs: 'lhs, rhs: forall 'n, 'rhs1. 'rhs | 'rhs1 | 'n}) | 'result | 'w | 't | 'k | 'v | 'u
//│     'u :> Abs['a] with {name: forall 'name1, 'm, 'name3. 'name1 | 'name3 | string | 'm}
//│     'tail <: (Cons['name] with {head: {_1: string & 'f, _2: 'result & 'x & (Abs['name] & 'y | 'lhs & ~#Abs)}, tail: 'tail}) | Nil
//│     'x <: Abs['name] & {body: 'body, name: string & 'f} | App['name] & 'd | Var & 'w
//│     'w :> Var with {name: forall 'name1, 'm. 'name1 | string | 'm}
//│        <: 'x & (Abs['name] & {name: string & 'f} & 'y | {name: string & 'f} & 'lhs & ~#Abs)
//│     'y <: {body: 'x, name: string & 'f}
//│     'body <: Abs['name] & {body: 'body, name: string & 'f} | App['name] & 'd | Var & 's
//│     's <: {name: string & 'f} & 'x
//│     'd <: {lhs: 'name, rhs: Abs['name] & {body: 'body, name: string & 'f} | App['name] & 'd | Var & {name: string & 'f} & 'lhs}
//│     'lhs :> (App['a0] with {lhs: 'lhs, rhs: forall 'n. 'rhs | 'n}) | (Var with {name: forall 'name1, 'm. 'name1 | string | 'm})
//│          <: 'a0
//│     'a0 :> forall 'rhs, 'k. (App['a0] with {lhs: 'lhs, rhs: forall 'n. 'rhs | 'n}) | (Var with {name: forall 'name1, 'm. 'name1 | string | 'm}) | 'k
//│      = <no result>
//│        eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lambda :
//   ((string *
//     ([> `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a | `App of 'a * 'a | `Var of string ] -> 'a = <fun>
//
//   val eval1 :
//   (string * ([ `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************* Expr ******************************

class Num: Expr & { num: int }
class Add[a]: Expr & { lhs: a; rhs: a }
class Mul[a]: Expr & { lhs: a; rhs: a }
//│ Defined class Num
//│ Defined class Add[+a]
//│ Defined class Mul[+a]

def map_expr f v = case v of {
  | Var -> v
  | Num -> v
  | Add -> Add { lhs = f v.lhs; rhs = f v.rhs }
  | Mul -> Mul { lhs = f v.lhs; rhs = f v.rhs }
  }
//│ map_expr: ('lhs -> ('a & 'lhs0) & 'rhs -> ('rhs0 & 'a) & 'rhs1 -> ('rhs2 & 'a0) & 'lhs1 -> ('a0 & 'lhs2)) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Mul[?] with {lhs: 'lhs1, rhs: 'rhs1}) | 'b & (Num | Var)) -> ((Add['a] with {lhs: 'lhs0, rhs: 'rhs0}) | (Mul['a0] with {lhs: 'lhs2, rhs: 'rhs2}) | 'b)
//│         = [Function: map_expr]

rec def eval_expr eval_rec subst v =
  let vv = map_expr (eval_rec subst) v in
  case vv of {
    | Var -> eval_var subst vv
    | Add -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num + vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Mul -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num * vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Num -> vv // _ -> vv
    }
//│ eval_expr: ('b -> ('lhs -> ('a & 'lhs0 & (~#Num | Num)) & 'rhs -> ('rhs0 & 'a & (Num | ~#Num)) & 'rhs1 -> ('rhs2 & 'a0 & (Num | ~#Num)) & 'lhs1 -> ('a0 & 'lhs2 & (~#Num | Num)))) -> ('b & 'c) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Mul[?] with {lhs: 'lhs1, rhs: 'rhs1}) | Num & 'result | Var & 'result) -> ((Add['a] with {lhs: 'lhs0, rhs: 'rhs0}) | (Mul['a0] with {lhs: 'lhs2, rhs: 'rhs2}) | Num | 'result)
//│   where
//│     'c <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'c}) | Nil
//│          = <no result>
//│            eval_var, list_assoc and eq are not implemented

rec def eval2 subst = eval_expr eval2 subst
//│ eval2: 'b -> (forall 'c, 'd, 'lhs, 'e, 'name, 'f, 'g, 'a, 'rhs, 'rhs0, 'h, 'i, 'j, 'k, 'lhs0, 'l, 'm, 'a0, 'n, 'rhs1, 'lhs1, 'o, 'rhs2, 'p, 'q, 'lhs2. ('i & (Add['rhs1] & {lhs: 'lhs & 'lhs3, rhs: 'rhs3 & 'rhs} & 'e | Mul['rhs1] & {lhs: 'lhs4 & 'lhs0, rhs: 'rhs4 & 'rhs1} & 'g | 'p & (Num & 'c | Var & {name: string & 'name & 'l} & 'q & 'f & 'j & 'h))) -> ((Add['a | 'a1] with {lhs: 'lhs2 | 'lhs5, rhs: 'rhs0 | 'rhs5}) | (Mul['a0 | 'a2] with {lhs: 'lhs1 | 'lhs6, rhs: 'rhs2 | 'rhs6}) | Num | 'result | 'd | 'k | 'n | 'o | 'm | 'c | 'h))
//│   where
//│     'a1 :> 'lhs5 | 'rhs5
//│     'lhs5 :> forall 'r, 's, 't. Num | 'result | 'r | 'u | 't | 's | 'v
//│     'u :> (Mul['a2] with {lhs: 'lhs6, rhs: 'rhs6}) | (Add['a1] with {lhs: 'lhs5, rhs: 'rhs5})
//│     'rhs5 :> forall 'w, 'x, 'y. Num | 'result | 'w | 'u | 'x | 'y | 'z
//│     'a2 :> 'lhs6 | 'rhs6
//│     'rhs6 :> forall 'a1, 'b1, 'c1. Num | 'result | 'a1 | 'u | 'b1 | 'c1 | 'd1
//│     'lhs6 :> forall 'e1, 'f1, 'g1. Num | 'result | 'e1 | 'u | 'f1 | 'g1 | 'h1
//│     'lhs3 <: Add['rhs1] & {lhs: 'lhs3, rhs: 'rhs3} | Mul['rhs1] & {lhs: 'lhs4, rhs: 'rhs4} | Num | Var & 'v
//│     'rhs3 <: Add['rhs1] & {lhs: 'lhs3, rhs: 'rhs3} | Mul['rhs1] & {lhs: 'lhs4, rhs: 'rhs4} | Num | Var & 'z
//│     'lhs4 <: Add['rhs1] & {lhs: 'lhs3, rhs: 'rhs3} | Mul['rhs1] & {lhs: 'lhs4, rhs: 'rhs4} | Num | Var & 'h1
//│     'rhs4 <: Add['rhs1] & {lhs: 'lhs3, rhs: 'rhs3} | Mul['rhs1] & {lhs: 'lhs4, rhs: 'rhs4} | Num | Var & 'd1
//│     'b <: (Cons['rhs1] with {head: {_1: string, _2: 'result & (Num | ~#Num)}, tail: 'b}) | Nil
//│      = <no result>
//│        eval_expr, eval_var, list_assoc and eq are not implemented


// ------------- OCaml's type -------------
// val map_expr :
//   ('a -> 'b) ->
//   [< `Add of 'a * 'a | `Mult of 'a * 'a | `Num of 'c | `Var of string ] ->
//   [> `Add of 'b * 'b | `Mult of 'b * 'b | `Num of 'c | `Var of string ] = <fun>

// val eval_expr :
//   ((string *
//     ([> `Add of ([> `Num of int ] as 'b) * 'b
//       | `Mult of 'b * 'b
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'c -> 'b) ->
//   (string * 'a) list ->
//   [< `Add of 'c * 'c | `Mult of 'c * 'c | `Num of int | `Var of string ] -> 'a =
//   <fun>
// val eval2 :
//   (string *
//    ([> `Add of 'a * 'a | `Mult of 'a * 'a | `Num of int | `Var of string ]
//     as 'a))
//   list ->
//   ([< `Add of 'b * 'b | `Mult of 'b * 'b | `Num of int | `Var of string ] as 'b) ->
//   'a = <fun>


// ************************** Mix things *******************************

def eval_lexpr eval_rec subst v = case v of {
  | Lambda -> eval_lambda eval_rec subst v
  | Expr -> eval_expr eval_rec subst v
  }
//│ eval_lexpr: ('tail -> ('lhs -> ('a & 'lhs0 & (~#Num | Num)) & 'rhs -> ('rhs0 & 'a & (Num | ~#Num)) & 'rhs1 -> ('rhs2 & 'a0 & (Num | ~#Num)) & 'lhs1 -> ('a0 & 'lhs2 & (~#Num | Num))) & 'tail -> 'lhs3 -> 'b & 'tail -> 'rhs3 -> ((Abs[?] with {body: 'body, name: 'c}) | 'lhs4 & ~#Abs) & (forall 'd. (Cons[('e, Var with {name: forall 'name, 'f. 'name | string | 'f},) | 'A] with {head: ('e, Var with {name: forall 'name, 'f. 'name | string | 'f},), tail: 'tail}) | 'd) -> 'body0 -> 'body1 & (forall 'g. (Cons[('c, forall 'h. 'h | 'b,)] with {tail: Nil}) | 'g) -> 'body -> 'result) -> ('i & List['A] & 'tail) -> ((Abs[?] with {body: 'body0, name: 'e}) | (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (App[?] with {lhs: 'lhs3, rhs: 'rhs3}) | (Mul[?] with {lhs: 'lhs1, rhs: 'rhs1}) | Num & 'result | Var & 'result) -> (forall 'j, 'k, 'l, 'm, 'n, 'o. (Abs['body1] with {name: forall 'name, 'f. 'name | string | 'f}) | (Add['a] with {lhs: 'lhs0, rhs: 'rhs0}) | (App[forall 'h. 'lhs4 | 'h | 'b] with {lhs: 'lhs4, rhs: forall 'rhs4, 'p. 'rhs4 | 'p | 'b}) | (Mul['a0] with {lhs: 'lhs2, rhs: 'rhs2}) | Num | 'result | 'l | 'n | 'j | 'k | 'o | 'm)
//│   where
//│     'i <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'i}) | Nil
//│           = <no result>
//│             eval_lambda, eval_var, list_assoc and eq are not implemented

rec def eval3 subst = eval_lexpr eval3 subst
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.271: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 3. (α1844_2879'''' | α1969_2885'''')›  <:  α1757_2844'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 3. (α1844_2822'''' | α1969_2833'''')›  <:  α1757_2437'''
//│ eval3: (List['rhs] & 'tail & 'tail0) -> (forall 'rhs0, 'b, 'c, 'd, 'e, 'name, 'f, 'lhs, 'g, 'h, 'name0, 'i, 'rhs, 'j, 'k, 'l, 'm, 'lhs0, 'n, 'o, 'p, 'q. ('b & ('d & 'f & (Add['rhs] & {lhs: 'lhs1 & 'lhs, rhs: 'rhs1 & 'rhs0} & 'j | Mul['rhs] & {lhs: 'lhs2 & 'lhs0, rhs: 'rhs2 & 'rhs} & 'o | Num & 'k & 'i) | 'c & 'q & (Abs['rhs] & {body: 'body, name: string & 'p & 'name} & 'e | App['rhs] & 'm | Var & {name: string & 'p & 'name0 & 'l} & 'n & 'h & 'g))) -> (forall 'r, 'a, 'i, 's, 'lhs3, 't, 'u, 'lhs4, 'v, 'g, 'w, 'rhs3, 'x, 'a0, 'y, 'z, 'a1, 'b1, 'rhs4, 'c1. (Abs['a1] with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | (Add['a0 | 'a2] with {lhs: 'lhs3 | 'lhs5, rhs: 'rhs4 | 'rhs5}) | (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs6, 'e1. 'rhs6 | 'e1}) | (Mul['a | 'a4] with {lhs: 'lhs4 | 'lhs7, rhs: 'rhs3 | 'rhs7}) | Num | 'result | 'result0 | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 's | 'b1 | 'c1 | 'x | 'z | 'i | 't | 'g | 'a1 | 'r | 'v | 'y | 'w | 'u))
//│   where
//│     'tail0 <: (Cons['rhs] with {head: {_1: string & 'p, _2: 'result0 & 'f1 & (Abs['rhs] & 'g1 | 'lhs6 & (Num | ~#Abs & ~#Num))}, tail: 'tail0}) | Nil
//│     'result0 :> forall 'h1, 'i1. 'h1 | 'i1
//│     'i1 :> forall 'y, 'j1, 'k1, 'l1. Num | 'result | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'l1 | 'm1 | 'j1 | 'k1 | 'y
//│     'h1 :> forall 'n1, 'y, 'rhs, 'o1, 'm, 'p1, 'p. (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs8, 'rhs6, 'e1. 'rhs6 | 'rhs8 | 'e1}) | 'result0 | 'q1 | 'o1 | 'y | 'p1 | 'n1
//│     'n1 :> Abs['a1] with {name: forall 'name2, 'name1, 'd1. 'name1 | 'name2 | string | 'd1}
//│     'a1 :> forall 'r1, 's1. 'r1 | 's1
//│     's1 :> forall 'y, 't1, 'u1, 'v1. Num | 'result | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 't1 | 'm1 | 'u1 | 'v1 | 'y
//│     'm1 :> (Mul['a4] with {lhs: 'lhs7, rhs: 'rhs7}) | (Add['a2] with {lhs: 'lhs5, rhs: 'rhs5})
//│     'a2 :> 'lhs5 | 'rhs5
//│     'rhs5 :> forall 'w1, 'x1. 'w1 | 'x1
//│     'x1 :> forall 'y, 'y1, 'z1, 'a2. Num | 'result | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'y1 | 'm1 | 'z1 | 'a2 | 'y
//│     'w1 :> forall 'y, 'b2, 'c2, 'd2. (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs9, 'rhs6, 'e1. 'rhs6 | 'rhs9 | 'e1}) | 'result0 | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'e2 | 'b2 | 'y | 'c2 | 'd2
//│     'd2 :> Abs['a1] with {name: forall 'name3, 'name1, 'd1. 'name1 | 'name3 | string | 'd1}
//│     'lhs5 :> forall 'f2, 'g2. 'f2 | 'g2
//│     'g2 :> forall 'y, 'h2, 'i2, 'j2. Num | 'result | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'h2 | 'm1 | 'i2 | 'j2 | 'y
//│     'f2 :> forall 'y, 'k2, 'l2, 'm2. (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs10, 'rhs6, 'e1. 'rhs6 | 'rhs10 | 'e1}) | 'result0 | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'n2 | 'k2 | 'y | 'l2 | 'm2
//│     'm2 :> Abs['a1] with {name: forall 'name4, 'name1, 'd1. 'name1 | 'name4 | string | 'd1}
//│     'a4 :> 'lhs7 | 'rhs7
//│     'rhs7 :> forall 'o2, 'p2. 'p2 | 'o2
//│     'o2 :> forall 'y, 'q2, 'r2, 's2. Num | 'result | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'q2 | 'm1 | 'r2 | 's2 | 'y
//│     'p2 :> forall 'y, 't2, 'u2, 'v2. (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs11, 'rhs6, 'e1. 'rhs6 | 'rhs11 | 'e1}) | 'result0 | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'w2 | 't2 | 'y | 'u2 | 'v2
//│     'v2 :> Abs['a1] with {name: forall 'name1, 'd1, 'name5. 'name1 | 'name5 | string | 'd1}
//│     'lhs7 :> forall 'x2, 'y2. 'y2 | 'x2
//│     'x2 :> forall 'y, 'z2, 'a3, 'b3. Num | 'result | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'z2 | 'm1 | 'a3 | 'b3 | 'y
//│     'y2 :> forall 'y, 'c3, 'd3, 'e3. (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs12, 'rhs6, 'e1. 'rhs6 | 'rhs12 | 'e1}) | 'result0 | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'f3 | 'c3 | 'y | 'd3 | 'e3
//│     'e3 :> Abs['a1] with {name: forall 'name6, 'name1, 'd1. 'name1 | 'name6 | string | 'd1}
//│     'r1 :> forall 'g3, 'y, 'h3, 'rhs, 'i3, 'm, 'p. (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs13, 'rhs6, 'e1. 'rhs6 | 'rhs13 | 'e1}) | 'result0 | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'j3 | 'g3 | 'y | 'h3 | 'i3
//│     'i3 :> Abs['a1] with {name: forall 'name7, 'name1, 'd1. 'name1 | 'name7 | string | 'd1}
//│     'q1 :> Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}
//│         <: 'f1 & (Abs['rhs] & {name: string & 'p} & 'g1 | 'lhs6 & (Num & {name: string & 'p} | {name: string & 'p} & ~#Abs & ~#Num))
//│     'g1 <: {body: 'f1, name: string & 'p}
//│     'f1 <: Abs['rhs] & {body: 'body, name: string & 'p} | Add['rhs] & {lhs: 'lhs1, rhs: 'rhs1} | App['rhs] & 'm | Mul['rhs] & {lhs: 'lhs2, rhs: 'rhs2} | Num | Var & 'q1
//│     'body <: Abs['rhs] & {body: 'body, name: string & 'p} | Add['rhs] & {lhs: 'lhs1, rhs: 'rhs1} | App['rhs] & 'm | Mul['rhs] & {lhs: 'lhs2, rhs: 'rhs2} | Num | Var & 'j3
//│     'j3 <: {name: string & 'p} & 'f1
//│     'lhs1 <: Abs['rhs] & {body: 'body, name: string & 'p} | Add['rhs] & {lhs: 'lhs1, rhs: 'rhs1} | App['rhs] & 'm | Mul['rhs] & {lhs: 'lhs2, rhs: 'rhs2} | Num | Var & {name: string & 'p} & 'n2
//│     'rhs1 <: Abs['rhs] & {body: 'body, name: string & 'p} | Add['rhs] & {lhs: 'lhs1, rhs: 'rhs1} | App['rhs] & 'm | Mul['rhs] & {lhs: 'lhs2, rhs: 'rhs2} | Num | Var & {name: string & 'p} & 'e2
//│     'm <: {lhs: 'rhs, rhs: Abs['rhs] & {body: 'body, name: string & 'p} | Add['rhs] & {lhs: 'lhs1, rhs: 'rhs1} | App['rhs] & 'm | Mul['rhs] & {lhs: 'lhs2, rhs: 'rhs2} | Num | Var & {name: string & 'p} & 'lhs6}
//│     'lhs2 <: Abs['rhs] & {body: 'body, name: string & 'p} | Add['rhs] & {lhs: 'lhs1, rhs: 'rhs1} | App['rhs] & 'm | Mul['rhs] & {lhs: 'lhs2, rhs: 'rhs2} | Num | Var & {name: string & 'p} & 'f3
//│     'rhs2 <: Abs['rhs] & {body: 'body, name: string & 'p} | Add['rhs] & {lhs: 'lhs1, rhs: 'rhs1} | App['rhs] & 'm | Mul['rhs] & {lhs: 'lhs2, rhs: 'rhs2} | Num | Var & {name: string & 'p} & 'w2
//│     'a3 :> forall 'y. (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs6, 'e1. 'rhs6 | 'e1}) | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1}) | 'y
//│     'lhs6 :> (App['a3] with {lhs: 'lhs6, rhs: forall 'rhs6, 'e1. 'rhs6 | 'e1}) | (Var with {name: forall 'name1, 'd1. 'name1 | string | 'd1})
//│           <: 'a3
//│     'tail <: (Cons['rhs] with {head: {_1: string & 'p, _2: 'result & (Num | ~#Num)}, tail: 'tail}) | Nil
//│      = <no result>
//│        eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lexpr :
//   ((string *
//     ([> `Abs of string * 'a
//       | `Add of 'a * 'a
//       | `App of 'a * 'a
//       | `Mult of 'a * 'a
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a
//    | `Add of 'a * 'a
//    | `App of 'a * 'a
//    | `Mult of 'a * 'a
//    | `Num of int
//    | `Var of string ] ->
//   'a = <fun>
//
// val eval3 :
//   (string *
//    ([ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************** Tests *******************************

eval3 Nil (Var { name = "s" })
//│ res: (Abs['a] with {name: forall 'name, 'b. 'name | string | 'b}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs}) | (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs0, 'c. 'rhs0 | 'c}) | (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'd | 'e | 'f | 'g | 'h | 'i | 'j | 'k | 'l | 'm
//│   where
//│     'a :> forall 'n, 'o. 'o | 'n
//│     'n :> forall 'j, 'p, 'q, 'r. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p | 's | 'q | 'r | 'j
//│     'o :> forall 't, 'u, 'j, 'v. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs3. 'rhs2 | 'rhs3 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'v | 'j | 'k | 't | 'u
//│     'u :> Abs['a] with {name: forall 'name, 'name0, 'b. 'name | 'name0 | string | 'b}
//│     'k :> forall 'x, 'y. 'x | 'y
//│     'y :> forall 'z, 'a1, 'j, 'b1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'z | 's | 'b1 | 'a1 | 'j
//│     's :> (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs})
//│     'a0 :> 'lhs | 'rhs
//│     'rhs :> forall 'c1, 'd1. 'c1 | 'd1
//│     'd1 :> forall 'j, 'e1, 'f1, 'g1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'e1 | 's | 'f1 | 'g1 | 'j
//│     'c1 :> forall 'j, 'h1, 'i1, 'j1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs4. 'rhs2 | 'rhs4 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'h1 | 'j | 'k | 'i1 | 'j1
//│     'j1 :> Abs['a] with {name: forall 'name, 'b, 'name1. 'name | 'name1 | string | 'b}
//│     'lhs :> forall 'k1, 'l1. 'l1 | 'k1
//│     'k1 :> forall 'm1, 'n1, 'o1, 'j. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'm1 | 's | 'n1 | 'o1 | 'j
//│     'l1 :> forall 'j, 'p1, 'q1, 'r1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs5. 'rhs2 | 'rhs5 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p1 | 'j | 'k | 'q1 | 'r1
//│     'r1 :> Abs['a] with {name: forall 'name, 'b, 'name2. 'name | 'name2 | string | 'b}
//│     'a2 :> 'lhs1 | 'rhs1
//│     'rhs1 :> forall 's1, 't1. 't1 | 's1
//│     's1 :> forall 'j, 'u1, 'v1, 'w1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'u1 | 's | 'v1 | 'w1 | 'j
//│     't1 :> forall 'x1, 'y1, 'z1, 'j. 'lhs0 | 'x1 | 'j | 'k | 'y1 | 'z1
//│     'z1 :> Abs['a] with {name: forall 'name, 'name3, 'b. 'name | 'name3 | string | 'b}
//│     'lhs1 :> forall 'a2, 'b2. 'a2 | 'b2
//│     'b2 :> forall 'j, 'c2, 'd2, 'e2. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'c2 | 's | 'd2 | 'e2 | 'j
//│     'a2 :> forall 'j, 'f2, 'g2, 'h2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs6. 'rhs2 | 'rhs6 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'f2 | 'j | 'k | 'g2 | 'h2
//│     'h2 :> Abs['a] with {name: forall 'name, 'b, 'name4. 'name | 'name4 | string | 'b}
//│     'x :> forall 'j, 'i2, 'j2, 'k2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs7. 'rhs2 | 'rhs7 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'i2 | 'j | 'k | 'j2 | 'k2
//│     'k2 :> Abs['a] with {name: forall 'name, 'b, 'name5. 'name | 'name5 | string | 'b}
//│     'a1 :> forall 'j. 'lhs0 | 'j
//│     'lhs0 :> (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w. 'rhs2 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b})
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented
// ------------- OCaml's type -------------
// - : [ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a
// = `Var "s"


eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ res: (Abs['a] with {name: forall 'name, 'b. 'name | string | 'b}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs}) | (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs0, 'c. 'rhs0 | 'c}) | (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'd | 'e | 'f | 'g | 'h | 'i | 'j | 'k | 'l | 'm
//│   where
//│     'a :> forall 'n, 'o. 'o | 'n
//│     'n :> forall 'j, 'p, 'q, 'r. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p | 's | 'q | 'r | 'j
//│     'o :> forall 't, 'u, 'j, 'v. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs3. 'rhs2 | 'rhs3 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'v | 'j | 'k | 't | 'u
//│     'u :> Abs['a] with {name: forall 'name, 'name0, 'b. 'name | 'name0 | string | 'b}
//│     'k :> forall 'x, 'y. 'x | 'y
//│     'y :> forall 'z, 'a1, 'j, 'b1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'z | 's | 'b1 | 'a1 | 'j
//│     's :> (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs})
//│     'a0 :> 'lhs | 'rhs
//│     'rhs :> forall 'c1, 'd1. 'c1 | 'd1
//│     'd1 :> forall 'j, 'e1, 'f1, 'g1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'e1 | 's | 'f1 | 'g1 | 'j
//│     'c1 :> forall 'j, 'h1, 'i1, 'j1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs4. 'rhs2 | 'rhs4 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'h1 | 'j | 'k | 'i1 | 'j1
//│     'j1 :> Abs['a] with {name: forall 'name, 'b, 'name1. 'name | 'name1 | string | 'b}
//│     'lhs :> forall 'k1, 'l1. 'l1 | 'k1
//│     'k1 :> forall 'm1, 'n1, 'o1, 'j. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'm1 | 's | 'n1 | 'o1 | 'j
//│     'l1 :> forall 'j, 'p1, 'q1, 'r1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs5. 'rhs2 | 'rhs5 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p1 | 'j | 'k | 'q1 | 'r1
//│     'r1 :> Abs['a] with {name: forall 'name, 'b, 'name2. 'name | 'name2 | string | 'b}
//│     'a2 :> 'lhs1 | 'rhs1
//│     'rhs1 :> forall 's1, 't1. 't1 | 's1
//│     's1 :> forall 'j, 'u1, 'v1, 'w1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'u1 | 's | 'v1 | 'w1 | 'j
//│     't1 :> forall 'x1, 'y1, 'z1, 'j. 'lhs0 | 'x1 | 'j | 'k | 'y1 | 'z1
//│     'z1 :> Abs['a] with {name: forall 'name, 'name3, 'b. 'name | 'name3 | string | 'b}
//│     'lhs1 :> forall 'a2, 'b2. 'a2 | 'b2
//│     'b2 :> forall 'j, 'c2, 'd2, 'e2. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'c2 | 's | 'd2 | 'e2 | 'j
//│     'a2 :> forall 'j, 'f2, 'g2, 'h2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs6. 'rhs2 | 'rhs6 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'f2 | 'j | 'k | 'g2 | 'h2
//│     'h2 :> Abs['a] with {name: forall 'name, 'b, 'name4. 'name | 'name4 | string | 'b}
//│     'x :> forall 'j, 'i2, 'j2, 'k2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs7. 'rhs2 | 'rhs7 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'i2 | 'j | 'k | 'j2 | 'k2
//│     'k2 :> Abs['a] with {name: forall 'name, 'b, 'name5. 'name | 'name5 | string | 'b}
//│     'a1 :> forall 'j. 'lhs0 | 'j
//│     'lhs0 :> (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w. 'rhs2 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b})
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval2 Nil (Num { num = 1 })
//│ res: (Add['a] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['a0] with {lhs: 'lhs0, rhs: 'rhs0}) | Num | 'b | 'c | 'd
//│   where
//│     'a :> 'lhs | 'rhs
//│     'lhs :> forall 'e, 'f, 'g. Num | 'f | 'h | 'e | 'g
//│     'h :> (Mul['a0] with {lhs: 'lhs0, rhs: 'rhs0}) | (Add['a] with {lhs: 'lhs, rhs: 'rhs})
//│     'rhs :> forall 'i, 'j, 'k. Num | 'i | 'h | 'j | 'k
//│     'a0 :> 'lhs0 | 'rhs0
//│     'rhs0 :> forall 'l, 'm, 'n. Num | 'l | 'h | 'm | 'n
//│     'lhs0 :> forall 'o, 'p, 'q. Num | 'o | 'h | 'p | 'q
//│    = <no result>
//│      eval2, eval_expr, eval_var, list_assoc and eq are not implemented

eval3 Nil (Num { num = 1 })
//│ res: (Abs['a] with {name: forall 'b, 'name. 'name | string | 'b}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs}) | (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs0, 'c. 'rhs0 | 'c}) | (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | Num | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'd | 'e | 'f | 'g | 'h | 'i | 'j | 'k | 'l | 'm
//│   where
//│     'a :> forall 'n, 'o. 'o | 'n
//│     'n :> forall 'j, 'p, 'q, 'r. Num | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'p | 's | 'q | 'r | 'j
//│     'o :> forall 'j, 't, 'u, 'v. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'rhs3, 'w. 'rhs3 | 'rhs2 | 'w}) | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 't | 'j | 'k | 'u | 'v
//│     'v :> Abs['a] with {name: forall 'b, 'name, 'name0. 'name | 'name0 | string | 'b}
//│     'k :> forall 'x, 'y. 'x | 'y
//│     'y :> forall 'j, 'z, 'a1, 'b1. Num | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'a1 | 's | 'z | 'b1 | 'j
//│     's :> (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs})
//│     'a0 :> 'lhs | 'rhs
//│     'rhs :> forall 'c1, 'd1. 'c1 | 'd1
//│     'd1 :> forall 'j, 'e1, 'f1, 'g1. Num | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'e1 | 's | 'f1 | 'g1 | 'j
//│     'c1 :> forall 'j, 'h1, 'i1, 'j1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs4, 'rhs3, 'w. 'rhs3 | 'rhs4 | 'w}) | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'h1 | 'j | 'k | 'i1 | 'j1
//│     'j1 :> Abs['a] with {name: forall 'b, 'name1, 'name. 'name | 'name1 | string | 'b}
//│     'lhs :> forall 'k1, 'l1. 'k1 | 'l1
//│     'l1 :> forall 'j, 'm1, 'n1, 'o1. Num | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'm1 | 's | 'n1 | 'o1 | 'j
//│     'k1 :> forall 'j, 'p1, 'q1, 'r1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs5, 'rhs3, 'w. 'rhs3 | 'rhs5 | 'w}) | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'p1 | 'j | 'k | 'q1 | 'r1
//│     'r1 :> Abs['a] with {name: forall 'b, 'name2, 'name. 'name | 'name2 | string | 'b}
//│     'a2 :> 'lhs1 | 'rhs1
//│     'rhs1 :> forall 's1, 't1. 't1 | 's1
//│     's1 :> forall 'j, 'u1, 'v1, 'w1. Num | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'u1 | 's | 'v1 | 'w1 | 'j
//│     't1 :> forall 'j, 'x1, 'y1, 'z1. 'lhs0 | 'x1 | 'j | 'k | 'y1 | 'z1
//│     'z1 :> Abs['a] with {name: forall 'b, 'name, 'name3. 'name | 'name3 | string | 'b}
//│     'lhs1 :> forall 'a2, 'b2. 'a2 | 'b2
//│     'b2 :> forall 'j, 'c2, 'd2, 'e2. Num | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'c2 | 's | 'd2 | 'e2 | 'j
//│     'a2 :> forall 'j, 'f2, 'g2, 'h2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs6, 'rhs3, 'w. 'rhs3 | 'rhs6 | 'w}) | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'f2 | 'j | 'k | 'g2 | 'h2
//│     'h2 :> Abs['a] with {name: forall 'b, 'name4, 'name. 'name | 'name4 | string | 'b}
//│     'x :> forall 'j, 'i2, 'j2, 'k2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs7, 'rhs3, 'w. 'rhs3 | 'rhs7 | 'w}) | (Var with {name: forall 'b, 'name. 'name | string | 'b}) | 'i2 | 'j | 'k | 'j2 | 'k2
//│     'k2 :> Abs['a] with {name: forall 'b, 'name5, 'name. 'name | 'name5 | string | 'b}
//│     'a1 :> forall 'j. 'lhs0 | 'j
//│     'lhs0 :> (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs3, 'w. 'rhs3 | 'w}) | (Var with {name: forall 'b, 'name. 'name | string | 'b})
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (App { lhs = Num {num = 0}; rhs = Num {num = 0}})
//│ res: (Abs['a] with {name: forall 'name, 'b. 'name | string | 'b}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs}) | (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs0, 'c. 'rhs0 | 'c}) | (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'd | 'e | 'f | 'g | 'h | 'i | 'j | 'k | 'l | 'm
//│   where
//│     'a :> forall 'n, 'o. 'o | 'n
//│     'n :> forall 'j, 'p, 'q, 'r. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p | 's | 'q | 'r | 'j
//│     'o :> forall 'j, 't, 'u, 'v. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'rhs3, 'w. 'rhs3 | 'rhs2 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 't | 'j | 'k | 'u | 'v
//│     'v :> Abs['a] with {name: forall 'name, 'name0, 'b. 'name | 'name0 | string | 'b}
//│     'k :> forall 'x, 'y. 'x | 'y
//│     'y :> forall 'j, 'z, 'a1, 'b1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'a1 | 's | 'z | 'b1 | 'j
//│     's :> (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs})
//│     'a0 :> 'lhs | 'rhs
//│     'rhs :> forall 'c1, 'd1. 'c1 | 'd1
//│     'd1 :> forall 'j, 'e1, 'f1, 'g1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'e1 | 's | 'f1 | 'g1 | 'j
//│     'c1 :> forall 'j, 'h1, 'i1, 'j1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs4, 'rhs3, 'w. 'rhs3 | 'rhs4 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'h1 | 'j | 'k | 'i1 | 'j1
//│     'j1 :> Abs['a] with {name: forall 'name, 'b, 'name1. 'name | 'name1 | string | 'b}
//│     'lhs :> forall 'k1, 'l1. 'k1 | 'l1
//│     'l1 :> forall 'm1, 'j, 'n1, 'o1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'n1 | 's | 'o1 | 'm1 | 'j
//│     'k1 :> forall 'j, 'p1, 'q1, 'r1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs5, 'rhs3, 'w. 'rhs3 | 'rhs5 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p1 | 'j | 'k | 'q1 | 'r1
//│     'r1 :> Abs['a] with {name: forall 'name, 'b, 'name2. 'name | 'name2 | string | 'b}
//│     'a2 :> 'lhs1 | 'rhs1
//│     'rhs1 :> forall 's1, 't1. 't1 | 's1
//│     's1 :> forall 'j, 'u1, 'v1, 'w1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'u1 | 's | 'v1 | 'w1 | 'j
//│     't1 :> forall 'j, 'x1, 'y1, 'z1. 'lhs0 | 'x1 | 'j | 'k | 'y1 | 'z1
//│     'z1 :> Abs['a] with {name: forall 'name, 'name3, 'b. 'name | 'name3 | string | 'b}
//│     'lhs1 :> forall 'a2, 'b2. 'a2 | 'b2
//│     'b2 :> forall 'j, 'c2, 'd2, 'e2. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'c2 | 's | 'd2 | 'e2 | 'j
//│     'a2 :> forall 'j, 'f2, 'g2, 'h2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs6, 'rhs3, 'w. 'rhs3 | 'rhs6 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'f2 | 'j | 'k | 'g2 | 'h2
//│     'h2 :> Abs['a] with {name: forall 'name, 'b, 'name4. 'name | 'name4 | string | 'b}
//│     'x :> forall 'j, 'i2, 'j2, 'k2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs7, 'rhs3, 'w. 'rhs3 | 'rhs7 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'i2 | 'j | 'k | 'j2 | 'k2
//│     'k2 :> Abs['a] with {name: forall 'name, 'b, 'name5. 'name | 'name5 | string | 'b}
//│     'a1 :> forall 'j. 'lhs0 | 'j
//│     'lhs0 :> (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs3, 'w. 'rhs3 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b})
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Num { num = 1 } } })
//│ res: (Abs['a] with {name: forall 'name, 'b. 'name | string | 'b}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs}) | (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs0, 'c. 'rhs0 | 'c}) | (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'd | 'e | 'f | 'g | 'h | 'i | 'j | 'k | 'l | 'm
//│   where
//│     'a :> forall 'n, 'o. 'n | 'o
//│     'o :> forall 'j, 'p, 'q, 'r. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p | 's | 'q | 'r | 'j
//│     'n :> forall 't, 'u, 'j, 'v. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs3. 'rhs2 | 'rhs3 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'v | 'j | 'k | 't | 'u
//│     'u :> Abs['a] with {name: forall 'name, 'name0, 'b. 'name | 'name0 | string | 'b}
//│     'k :> forall 'x, 'y. 'y | 'x
//│     'x :> forall 'z, 'a1, 'b1, 'j. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'a1 | 's | 'z | 'b1 | 'j
//│     's :> (Mul['a2] with {lhs: 'lhs1, rhs: 'rhs1}) | (Add['a0] with {lhs: 'lhs, rhs: 'rhs})
//│     'a0 :> 'lhs | 'rhs
//│     'rhs :> forall 'c1, 'd1. 'c1 | 'd1
//│     'd1 :> forall 'e1, 'f1, 'g1, 'j. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'e1 | 's | 'f1 | 'g1 | 'j
//│     'c1 :> forall 'j, 'h1, 'i1, 'j1. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs4. 'rhs2 | 'rhs4 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'h1 | 'j | 'k | 'i1 | 'j1
//│     'j1 :> Abs['a] with {name: forall 'name, 'b, 'name1. 'name | 'name1 | string | 'b}
//│     'lhs :> forall 'k1, 'l1. 'l1 | 'k1
//│     'k1 :> forall 'm1, 'n1, 'o1, 'j. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'm1 | 's | 'n1 | 'o1 | 'j
//│     'l1 :> forall 'p1, 'q1, 'r1, 'j. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs5. 'rhs2 | 'rhs5 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'p1 | 'j | 'k | 'q1 | 'r1
//│     'r1 :> Abs['a] with {name: forall 'name2, 'name, 'b. 'name | 'name2 | string | 'b}
//│     'a2 :> 'lhs1 | 'rhs1
//│     'rhs1 :> forall 's1, 't1. 's1 | 't1
//│     't1 :> forall 'j, 'u1, 'v1, 'w1. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'u1 | 's | 'v1 | 'w1 | 'j
//│     's1 :> forall 'x1, 'y1, 'z1, 'j. 'lhs0 | 'x1 | 'j | 'k | 'y1 | 'z1
//│     'z1 :> Abs['a] with {name: forall 'name, 'name3, 'b. 'name | 'name3 | string | 'b}
//│     'lhs1 :> forall 'a2, 'b2. 'a2 | 'b2
//│     'b2 :> forall 'c2, 'd2, 'j, 'e2. Num | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'e2 | 's | 'c2 | 'd2 | 'j
//│     'a2 :> forall 'j, 'f2, 'g2, 'h2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs6. 'rhs2 | 'rhs6 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'f2 | 'j | 'k | 'g2 | 'h2
//│     'h2 :> Abs['a] with {name: forall 'name, 'b, 'name4. 'name | 'name4 | string | 'b}
//│     'y :> forall 'i2, 'j2, 'j, 'k2. (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w, 'rhs7. 'rhs2 | 'rhs7 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b}) | 'k2 | 'j | 'k | 'i2 | 'j2
//│     'j2 :> Abs['a] with {name: forall 'name5, 'name, 'b. 'name | 'name5 | string | 'b}
//│     'a1 :> forall 'j. 'lhs0 | 'j
//│     'lhs0 :> (App['a1] with {lhs: 'lhs0, rhs: forall 'rhs2, 'w. 'rhs2 | 'w}) | (Var with {name: forall 'name, 'b. 'name | string | 'b})
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented


// *************************************

def eval_lexpr' eval_rec subst v = case v of {
  | Var -> eval_var eval_rec subst v
  | Abs -> eval_lambda eval_rec subst v
  | App -> eval_lambda eval_rec subst v
  | Num -> eval_expr eval_rec subst v
  | Add -> eval_expr eval_rec subst v
  | Mul -> eval_expr eval_rec subst v
  }
//│ eval_lexpr': nothing -> nothing -> ((Abs[?] with {body: anything, name: anything}) | (Add[?] with {lhs: anything, rhs: anything}) | (App[?] with {lhs: anything, rhs: anything}) | (Mul[?] with {lhs: anything, rhs: anything}) | Num | Var) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o. (Abs[nothing] with {name: forall 'p, 'name, 'name0. 'name | 'name0 | string | 'p}) | (Add[nothing] with {lhs: nothing, rhs: nothing}) | (App[forall 'q, 'r. 'q | 'r] with {lhs: nothing, rhs: forall 'rhs, 'rhs0, 's, 't. 'rhs | 'rhs0 | 's | 't}) | (Mul[nothing] with {lhs: nothing, rhs: nothing}) | Num | 'n | 'l | 'j | 'i | 'e | 'b | 'a | 'h | 'f | 'd | 'o | 'm | 'k | 'c | 'g)
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented
