

:d
def foo x = x.a
//│ 1. Typing term (x,) => (x).a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x8''
//│ | 2. : (x8'',)
//│ | 2. Typing term (x).a
//│ | | 2. Typing term x
//│ | | 2. : x8''
//│ | | CONSTRAIN x8'' <! {a: a9''}
//│ | |   where 
//│ | | 2. C x8'' <! {a: a9''}    (0)
//│ | | | NEW x8'' UB (2)
//│ | 2. : a9''
//│ | Inferred poly constr: (x8'' -> a9'')  —— where 
//│ 		x8'' <: {a: a9''}
//│ | Analysis[+] (x8'' -> a9'')  ()
//│ | | Analysis[-] (x8'',)  ()
//│ | | | Analysis[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analysis[-] {a: a9''}  ()
//│ | | | | | Analysis[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analysis[+] a9''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: Map()
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x8'' -> a9'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x8'' -> a9'')› where 
//│ 		x8'' <: {a: a9''}
//│ Analysis[+] ‹∀ 1. (x8'' -> a9'')›  ()
//│ | Analysis[+] (x8'' -> a9'')  ()
//│ | | Analysis[-] (x8'',)  ()
//│ | | | Analysis[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analysis[-] {a: a9''}  (x8'')
//│ | | | | | Analysis[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analysis[+] a9''  ()
//│ | | | !! a9'' Some(true) List()
//│ Pos: HashSet(a9'')
//│ Neg: HashSet(x8'', a9'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: Map()
//│ ⬤ Typed as: ‹∀ 1. (x8'' -> a9'')›
//│  where: 
//│ 		x8'' <: {a: a9''}
//│ foo: {a: 'a} -> 'a
//│    = [Function: foo]

:d
def foo x = id x
//│ 1. Typing term (x,) => id (x,)
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x14''
//│ | 2. : (x14'',)
//│ | 2. Typing term id (x,)
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | 2. Typing term x
//│ | | 2. : x14''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! (x14'' -> α15'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! (x14'' -> α15'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_16'' -> α5_16'')
//│ | | |   where  
//│ | | | 2. C (α5_16'' -> α5_16'') <! (x14'' -> α15'')    (2)
//│ | | | | 2. C (x14'',) <! (α5_16'',)    (2)
//│ | | | | | 2. C x14'' <! α5_16''    (3)
//│ | | | | | | NEW x14'' UB (2)
//│ | | | | 2. C α5_16'' <! α15''    (2)
//│ | | | | | NEW α5_16'' UB (2)
//│ | 2. : α15''
//│ | Inferred poly constr: (x14'' -> α15'')  —— where 
//│ 		x14'' <: α5_16''
//│ 		α5_16'' <: α15''
//│ | Analysis[+] (x14'' -> α15'')  ()
//│ | | Analysis[-] (x14'',)  ()
//│ | | | Analysis[-] x14''  ()
//│ | | | | !! x14'' Some(false) List(α5_16'')
//│ | | | | Analysis[-] α5_16''  ()
//│ | | | | | !! α5_16'' Some(false) List(α15'')
//│ | | | | | Analysis[-] α15''  ()
//│ | | | | | | !! α15'' Some(false) List()
//│ | | Analysis[+] α15''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: Map()
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x14'' -> α15'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x14'' -> α15'')› where 
//│ 		x14'' <: α5_16''
//│ 		α5_16'' <: α15''
//│ Analysis[+] ‹∀ 1. (x14'' -> α15'')›  ()
//│ | Analysis[+] (x14'' -> α15'')  ()
//│ | | Analysis[-] (x14'',)  ()
//│ | | | Analysis[-] x14''  ()
//│ | | | | !! x14'' Some(false) List(α5_16'')
//│ | | | | Analysis[-] α5_16''  (x14'')
//│ | | | | | !! α5_16'' Some(false) List(α15'')
//│ | | | | | Analysis[-] α15''  (x14'' ~> α5_16'')
//│ | | | | | | !! α15'' Some(false) List()
//│ | | Analysis[+] α15''  ()
//│ | | | !! α15'' Some(true) List()
//│ Pos: HashSet(α15'')
//│ Neg: HashSet(α5_16'', x14'', α15'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: Map(α5_16'' -> α15'', x14'' -> α5_16'')
//│ subst(‹∀ 1. (x14'' -> α15'')›)
//│ | subst(‹∀ 2. (x14_17''' -> α15_19''')›)
//│ | | subst((x14_17''' -> α15_19'''))
//│ | | | subst((x14_17''',))
//│ | | | | subst(x14_17''')
//│ | | | | | subst(α5_18''')
//│ | | | | | | subst(α15_19''')
//│ | | | | | | = α15_19'''
//│ | | | | | = α5_21'''
//│ | | | | = x14_20'''
//│ | | | = (x14_20''',)
//│ | | | subst(α15_19''')
//│ | | | = α15_19'''
//│ | | = (x14_20''' -> α15_19''')
//│ | = ‹∀ 2. (x14_20''' -> α15_19''')›
//│ = ‹∀ 2. (x14_20''' -> α15_19''')›
//│ ⬤ Typed as: ‹∀ 2. (x14_20''' -> α15_19''')›
//│  where: 
//│ 		x14_20''' <: α5_21'''
//│ 		α5_21''' <: α15_19'''
//│ foo: 'a -> 'a
//│    = [Function: foo1]

:d
def foo() = id : 'a -> 'a
//│ 1. Typing term () => id : 'a -> 'a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern 
//│ | 2. : ()
//│ | 2. Typing term id : 'a -> 'a
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | Typing type 'a -> 'a
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 2. type 'a -> 'a
//│ | | | | 2. type ('a,)
//│ | | | | | 2. type 'a
//│ | | | | | => 'a27''
//│ | | | | => ('a27'',)
//│ | | | | 2. type 'a
//│ | | | | => 'a27''
//│ | | | => ('a27'' -> 'a27'')
//│ | | => ('a27'' -> 'a27'') ——— 'a27''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! ('a27'' -> 'a27'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! ('a27'' -> 'a27'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_28'' -> α5_28'')
//│ | | |   where  
//│ | | | 2. C (α5_28'' -> α5_28'') <! ('a27'' -> 'a27'')    (2)
//│ | | | | 2. C ('a27'',) <! (α5_28'',)    (2)
//│ | | | | | 2. C 'a27'' <! α5_28''    (3)
//│ | | | | | | NEW 'a27'' UB (2)
//│ | | | | 2. C α5_28'' <! 'a27''    (2)
//│ | | | | | NEW α5_28'' UB (2)
//│ | 2. : ('a27'' -> 'a27'')
//│ | Inferred poly constr: (() -> ('a27'' -> 'a27''))  —— where 
//│ 		'a27'' <: α5_28''
//│ 		α5_28'' <: 'a27''
//│ | Analysis[+] (() -> ('a27'' -> 'a27''))  ()
//│ | | Analysis[-] ()  ()
//│ | | Analysis[+] ('a27'' -> 'a27'')  ()
//│ | | | Analysis[-] ('a27'',)  ()
//│ | | | | Analysis[-] 'a27''  ()
//│ | | | | | !! 'a27'' Some(false) List(α5_28'')
//│ | | | | | Analysis[-] α5_28''  ()
//│ | | | | | | !! α5_28'' Some(false) List('a27'')
//│ | | | | | | Analysis[-] 'a27''  ()
//│ | | | Analysis[+] 'a27''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: Map()
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (() -> ('a27'' -> 'a27''))›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (() -> ('a27'' -> 'a27''))› where 
//│ 		'a27'' <: α5_28''
//│ 		α5_28'' <: 'a27''
//│ Analysis[+] ‹∀ 1. (() -> ('a27'' -> 'a27''))›  ()
//│ | Analysis[+] (() -> ('a27'' -> 'a27''))  ()
//│ | | Analysis[-] ()  ()
//│ | | Analysis[+] ('a27'' -> 'a27'')  ()
//│ | | | Analysis[-] ('a27'',)  ()
//│ | | | | Analysis[-] 'a27''  ()
//│ | | | | | !! 'a27'' Some(false) List(α5_28'')
//│ | | | | | Analysis[-] α5_28''  ('a27'')
//│ | | | | | | !! α5_28'' Some(false) List('a27'')
//│ | | | | | | Analysis[-] 'a27''  ('a27'' ~> α5_28'')
//│ | | | Analysis[+] 'a27''  ()
//│ | | | | !! 'a27'' Some(true) List(α5_28'')
//│ Pos: HashSet('a27'')
//│ Neg: HashSet('a27'', α5_28'')
//│ Rec: HashSet()
//│ Unif: HashMap(α5_28'' -> 'a27'')
//│ Subst: Map(α5_28'' -> 'a27'')
//│ subst(‹∀ 1. (() -> ('a27'' -> 'a27''))›)
//│ | subst(‹∀ 2. (() -> ('a27_29''' -> 'a27_29'''))›)
//│ | | subst((() -> ('a27_29''' -> 'a27_29''')))
//│ | | | subst(())
//│ | | | = ()
//│ | | | subst(('a27_29''' -> 'a27_29'''))
//│ | | | | subst(('a27_29''',))
//│ | | | | | subst('a27_29''')
//│ | | | | | | subst(α5_30''')
//│ | | | | | | | subst('a27_29''')
//│ | | | | | | | = 'a27_31'''
//│ | | | | | | = α5_32'''
//│ | | | | | = 'a27_31'''
//│ | | | | = ('a27_31''',)
//│ | | | | subst('a27_29''')
//│ | | | | = 'a27_31'''
//│ | | | = ('a27_31''' -> 'a27_31''')
//│ | | = (() -> ('a27_31''' -> 'a27_31'''))
//│ | = ‹∀ 2. (() -> ('a27_31''' -> 'a27_31'''))›
//│ = ‹∀ 2. (() -> ('a27_31''' -> 'a27_31'''))›
//│ ⬤ Typed as: ‹∀ 2. (() -> ('a27_31''' -> 'a27_31'''))›
//│  where: 
//│ 		'a27_31''' <: α5_32'''
//│ 		α5_32''' <: 'a27_31'''
//│ foo: () -> 'a -> 'a
//│    = [Function: foo2]


:d
rec def foo x = foo x.a
//│ 1. Typing term (x,) => foo ((x).a,)
//│ | 1. Typing pattern x,
//│ | | 1. Typing pattern x
//│ | | 1. : x38'
//│ | 1. : (x38',)
//│ | 1. Typing term foo ((x).a,)
//│ | | 1. Typing term foo
//│ | | 1. : foo37'
//│ | | 1. Typing term (x).a
//│ | | | 1. Typing term x
//│ | | | 1. : x38'
//│ | | | CONSTRAIN x38' <! {a: a39'}
//│ | | |   where 
//│ | | | 1. C x38' <! {a: a39'}    (0)
//│ | | | | NEW x38' UB (1)
//│ | | 1. : a39'
//│ | | CONSTRAIN foo37' <! (a39' -> α40')
//│ | |   where 
//│ | | 1. C foo37' <! (a39' -> α40')    (0)
//│ | | | NEW foo37' UB (1)
//│ | 1. : α40'
//│ 1. : (x38' -> α40')
//│ CONSTRAIN (x38' -> α40') <! foo37'
//│   where 
//│ 		foo37' <: (a39' -> α40')
//│ 		x38' <: {a: a39'}
//│ 1. C (x38' -> α40') <! foo37'    (0)
//│ | NEW foo37' LB (1)
//│ | 1. C (x38' -> α40') <! (a39' -> α40')    (2)
//│ | | 1. C (a39',) <! (x38',)    (2)
//│ | | | 1. C a39' <! x38'    (3)
//│ | | | | NEW a39' UB (1)
//│ | | 1. C α40' <! α40'    (2)
//│ | | | Already a subtype by <:<
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: foo37'# where 
//│ 		foo37'# := (x38' -> α40')
//│ 		x38' <: {a: a39'}
//│ 		a39' <: x38'
//│ Analysis[+] foo37'#  ()
//│ | Analysis[+] (x38' -> α40')  ()
//│ | | Analysis[-] (x38',)  ()
//│ | | | Analysis[-] x38'  ()
//│ | | | | !! x38' Some(false) List({a: a39'})
//│ | | | | Analysis[-] {a: a39'}  (x38')
//│ | | | | | Analysis[-] a39'  ()
//│ | | | | | | !! a39' Some(false) List(x38')
//│ | | | | | | Analysis[-] x38'  (a39')
//│ | | Analysis[+] α40'  ()
//│ | | | !! α40' Some(true) List()
//│ Pos: HashSet(α40')
//│ Neg: HashSet(x38', a39')
//│ Rec: HashSet(x38')
//│ Unif: HashMap()
//│ Subst: Map(α40' -> ⊥, a39' -> x38')
//│ subst(foo37'#)
//│ | subst((x38' -> α40'))
//│ | | subst((x38',))
//│ | | | subst(x38')
//│ | | | | subst({a: a39'})
//│ | | | | | subst(a39')
//│ | | | | | = x38_42'
//│ | | | | = {a: x38_42'}
//│ | | | = x38_42'
//│ | | = (x38_42',)
//│ | | subst(α40')
//│ | | | subst(⊥)
//│ | | | = ⊥
//│ | | = ⊥
//│ | = (x38_42' -> ⊥)
//│ = foo37_41'#
//│ ⬤ Typed as: ‹∀ 0. foo37_41'#›
//│  where: 
//│ 		foo37_41'# := (x38_42' -> ⊥)
//│ 		x38_42' <: {a: x38_42'}
//│ foo: 'x -> nothing
//│   where
//│     'x <: {a: 'x}
//│    = [Function: foo3]




