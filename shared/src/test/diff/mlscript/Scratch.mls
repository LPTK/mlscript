

:d
def foo x = x.a
//│ 1. Typing term (x,) => (x).a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x8''
//│ | 2. : (x8'',)
//│ | 2. Typing term (x).a
//│ | | 2. Typing term x
//│ | | 2. : x8''
//│ | | CONSTRAIN x8'' <! {a: a9''}
//│ | |   where 
//│ | | 2. C x8'' <! {a: a9''}    (0)
//│ | | | NEW x8'' UB (2)
//│ | 2. : a9''
//│ | Inferred poly constr: (x8'' -> a9'')  —— where 
//│ 		x8'' <: {a: a9''}
//│ | Analyze[+] (x8'' -> a9'')  ()
//│ | | Analyze[-] (x8'',)  ()
//│ | | | Analyze[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analyze[-] {a: a9''}  ()
//│ | | | | | Analyze[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analyze[+] a9''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: Map()
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x8'' -> a9'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x8'' -> a9'')› where 
//│ 		x8'' <: {a: a9''}
//│ Analyze[+] ‹∀ 1. (x8'' -> a9'')›  ()
//│ | Analyze[+] (x8'' -> a9'')  ()
//│ | | Analyze[-] (x8'',)  ()
//│ | | | Analyze[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analyze[-] {a: a9''}  (x8'')
//│ | | | | | Analyze[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analyze[+] a9''  ()
//│ | | | !! a9'' Some(true) List()
//│ Pos: HashSet(a9'')
//│ Neg: HashSet(x8'', a9'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: Map(x8'' -> {a: a9''})
//│ subst(‹∀ 1. (x8'' -> a9'')›)
//│ | subst(‹∀ 2. (x8_10''' -> a9_11''')›)
//│ | | subst((x8_10''' -> a9_11'''))
//│ | | | subst((x8_10''',))
//│ | | | | subst(x8_10''')
//│ | | | | | subst({a: a9_11'''})
//│ | | | | | | subst(a9_11''')
//│ | | | | | | = a9_11'''
//│ | | | | | = {a: a9_11'''}
//│ | | | | = x8_12'''
//│ | | | = (x8_12''',)
//│ | | | subst(a9_11''')
//│ | | | = a9_11'''
//│ | | = (x8_12''' -> a9_11''')
//│ | = ‹∀ 2. (x8_12''' -> a9_11''')›
//│ = ‹∀ 2. (x8_12''' -> a9_11''')›
//│ ⬤ Typed as: ‹∀ 2. (x8_12''' -> a9_11''')›
//│  where: 
//│ 		x8_12''' <: {a: a9_11'''}
//│ foo: {a: 'a} -> 'a
//│    = [Function: foo]

:d
def foo x = id x
//│ 1. Typing term (x,) => id (x,)
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x17''
//│ | 2. : (x17'',)
//│ | 2. Typing term id (x,)
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | 2. Typing term x
//│ | | 2. : x17''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! (x17'' -> α18'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! (x17'' -> α18'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_19'' -> α5_19'')
//│ | | |   where  
//│ | | | 2. C (α5_19'' -> α5_19'') <! (x17'' -> α18'')    (2)
//│ | | | | 2. C (x17'',) <! (α5_19'',)    (2)
//│ | | | | | 2. C x17'' <! α5_19''    (3)
//│ | | | | | | NEW x17'' UB (2)
//│ | | | | 2. C α5_19'' <! α18''    (2)
//│ | | | | | NEW α5_19'' UB (2)
//│ | 2. : α18''
//│ | Inferred poly constr: (x17'' -> α18'')  —— where 
//│ 		x17'' <: α5_19''
//│ 		α5_19'' <: α18''
//│ | Analyze[+] (x17'' -> α18'')  ()
//│ | | Analyze[-] (x17'',)  ()
//│ | | | Analyze[-] x17''  ()
//│ | | | | !! x17'' Some(false) List(α5_19'')
//│ | | | | Analyze[-] α5_19''  ()
//│ | | | | | !! α5_19'' Some(false) List(α18'')
//│ | | | | | Analyze[-] α18''  ()
//│ | | | | | | !! α18'' Some(false) List()
//│ | | Analyze[+] α18''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: Map()
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x17'' -> α18'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x17'' -> α18'')› where 
//│ 		x17'' <: α5_19''
//│ 		α5_19'' <: α18''
//│ Analyze[+] ‹∀ 1. (x17'' -> α18'')›  ()
//│ | Analyze[+] (x17'' -> α18'')  ()
//│ | | Analyze[-] (x17'',)  ()
//│ | | | Analyze[-] x17''  ()
//│ | | | | !! x17'' Some(false) List(α5_19'')
//│ | | | | Analyze[-] α5_19''  (x17'')
//│ | | | | | !! α5_19'' Some(false) List(α18'')
//│ | | | | | Analyze[-] α18''  (x17'' ~> α5_19'')
//│ | | | | | | !! α18'' Some(false) List()
//│ | | Analyze[+] α18''  ()
//│ | | | !! α18'' Some(true) List()
//│ Pos: HashSet(α18'')
//│ Neg: HashSet(x17'', α18'', α5_19'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: Map(x17'' -> α5_19'', α5_19'' -> α18'')
//│ subst(‹∀ 1. (x17'' -> α18'')›)
//│ | subst(‹∀ 2. (x17_20''' -> α18_22''')›)
//│ | | subst((x17_20''' -> α18_22'''))
//│ | | | subst((x17_20''',))
//│ | | | | subst(x17_20''')
//│ | | | | | subst(α5_21''')
//│ | | | | | | subst(α18_22''')
//│ | | | | | | = α18_22'''
//│ | | | | | = α5_24'''
//│ | | | | = x17_23'''
//│ | | | = (x17_23''',)
//│ | | | subst(α18_22''')
//│ | | | = α18_22'''
//│ | | = (x17_23''' -> α18_22''')
//│ | = ‹∀ 2. (x17_23''' -> α18_22''')›
//│ = ‹∀ 2. (x17_23''' -> α18_22''')›
//│ ⬤ Typed as: ‹∀ 2. (x17_23''' -> α18_22''')›
//│  where: 
//│ 		x17_23''' <: α5_24'''
//│ 		α5_24''' <: α18_22'''
//│ foo: 'a -> 'a
//│    = [Function: foo1]

:d
def foo() = id : 'a -> 'a
//│ 1. Typing term () => id : 'a -> 'a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern 
//│ | 2. : ()
//│ | 2. Typing term id : 'a -> 'a
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | Typing type 'a -> 'a
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 2. type 'a -> 'a
//│ | | | | 2. type ('a,)
//│ | | | | | 2. type 'a
//│ | | | | | => 'a30''
//│ | | | | => ('a30'',)
//│ | | | | 2. type 'a
//│ | | | | => 'a30''
//│ | | | => ('a30'' -> 'a30'')
//│ | | => ('a30'' -> 'a30'') ——— 'a30''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! ('a30'' -> 'a30'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! ('a30'' -> 'a30'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_31'' -> α5_31'')
//│ | | |   where  
//│ | | | 2. C (α5_31'' -> α5_31'') <! ('a30'' -> 'a30'')    (2)
//│ | | | | 2. C ('a30'',) <! (α5_31'',)    (2)
//│ | | | | | 2. C 'a30'' <! α5_31''    (3)
//│ | | | | | | NEW 'a30'' UB (2)
//│ | | | | 2. C α5_31'' <! 'a30''    (2)
//│ | | | | | NEW α5_31'' UB (2)
//│ | 2. : ('a30'' -> 'a30'')
//│ | Inferred poly constr: (() -> ('a30'' -> 'a30''))  —— where 
//│ 		'a30'' <: α5_31''
//│ 		α5_31'' <: 'a30''
//│ | Analyze[+] (() -> ('a30'' -> 'a30''))  ()
//│ | | Analyze[-] ()  ()
//│ | | Analyze[+] ('a30'' -> 'a30'')  ()
//│ | | | Analyze[-] ('a30'',)  ()
//│ | | | | Analyze[-] 'a30''  ()
//│ | | | | | !! 'a30'' Some(false) List(α5_31'')
//│ | | | | | Analyze[-] α5_31''  ()
//│ | | | | | | !! α5_31'' Some(false) List('a30'')
//│ | | | | | | Analyze[-] 'a30''  ()
//│ | | | Analyze[+] 'a30''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: Map()
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (() -> ('a30'' -> 'a30''))›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (() -> ('a30'' -> 'a30''))› where 
//│ 		'a30'' <: α5_31''
//│ 		α5_31'' <: 'a30''
//│ Analyze[+] ‹∀ 1. (() -> ('a30'' -> 'a30''))›  ()
//│ | Analyze[+] (() -> ('a30'' -> 'a30''))  ()
//│ | | Analyze[-] ()  ()
//│ | | Analyze[+] ('a30'' -> 'a30'')  ()
//│ | | | Analyze[-] ('a30'',)  ()
//│ | | | | Analyze[-] 'a30''  ()
//│ | | | | | !! 'a30'' Some(false) List(α5_31'')
//│ | | | | | Analyze[-] α5_31''  ('a30'')
//│ | | | | | | !! α5_31'' Some(false) List('a30'')
//│ | | | | | | Analyze[-] 'a30''  ('a30'' ~> α5_31'')
//│ | | | Analyze[+] 'a30''  ()
//│ | | | | !! 'a30'' Some(true) List(α5_31'')
//│ Pos: HashSet('a30'')
//│ Neg: HashSet('a30'', α5_31'')
//│ Rec: HashSet()
//│ Unif: HashMap(α5_31'' -> 'a30'')
//│ Subst: Map(α5_31'' -> 'a30'')
//│ subst(‹∀ 1. (() -> ('a30'' -> 'a30''))›)
//│ | subst(‹∀ 2. (() -> ('a30_32''' -> 'a30_32'''))›)
//│ | | subst((() -> ('a30_32''' -> 'a30_32''')))
//│ | | | subst(())
//│ | | | = ()
//│ | | | subst(('a30_32''' -> 'a30_32'''))
//│ | | | | subst(('a30_32''',))
//│ | | | | | subst('a30_32''')
//│ | | | | | | subst(α5_33''')
//│ | | | | | | | subst('a30_32''')
//│ | | | | | | | = 'a30_34'''
//│ | | | | | | = α5_35'''
//│ | | | | | = 'a30_34'''
//│ | | | | = ('a30_34''',)
//│ | | | | subst('a30_32''')
//│ | | | | = 'a30_34'''
//│ | | | = ('a30_34''' -> 'a30_34''')
//│ | | = (() -> ('a30_34''' -> 'a30_34'''))
//│ | = ‹∀ 2. (() -> ('a30_34''' -> 'a30_34'''))›
//│ = ‹∀ 2. (() -> ('a30_34''' -> 'a30_34'''))›
//│ ⬤ Typed as: ‹∀ 2. (() -> ('a30_34''' -> 'a30_34'''))›
//│  where: 
//│ 		'a30_34''' <: α5_35'''
//│ 		α5_35''' <: 'a30_34'''
//│ foo: () -> 'a -> 'a
//│    = [Function: foo2]


:d
rec def foo x = foo x.a
//│ 1. Typing term (x,) => foo ((x).a,)
//│ | 1. Typing pattern x,
//│ | | 1. Typing pattern x
//│ | | 1. : x41'
//│ | 1. : (x41',)
//│ | 1. Typing term foo ((x).a,)
//│ | | 1. Typing term foo
//│ | | 1. : foo40'
//│ | | 1. Typing term (x).a
//│ | | | 1. Typing term x
//│ | | | 1. : x41'
//│ | | | CONSTRAIN x41' <! {a: a42'}
//│ | | |   where 
//│ | | | 1. C x41' <! {a: a42'}    (0)
//│ | | | | NEW x41' UB (1)
//│ | | 1. : a42'
//│ | | CONSTRAIN foo40' <! (a42' -> α43')
//│ | |   where 
//│ | | 1. C foo40' <! (a42' -> α43')    (0)
//│ | | | NEW foo40' UB (1)
//│ | 1. : α43'
//│ 1. : (x41' -> α43')
//│ CONSTRAIN (x41' -> α43') <! foo40'
//│   where 
//│ 		foo40' <: (a42' -> α43')
//│ 		x41' <: {a: a42'}
//│ 1. C (x41' -> α43') <! foo40'    (0)
//│ | NEW foo40' LB (1)
//│ | 1. C (x41' -> α43') <! (a42' -> α43')    (2)
//│ | | 1. C (a42',) <! (x41',)    (2)
//│ | | | 1. C a42' <! x41'    (3)
//│ | | | | NEW a42' UB (1)
//│ | | 1. C α43' <! α43'    (2)
//│ | | | Already a subtype by <:<
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: foo40'# where 
//│ 		foo40'# := (x41' -> α43')
//│ 		x41' <: {a: a42'}
//│ 		a42' <: x41'
//│ Analyze[+] foo40'#  ()
//│ | Analyze[+] (x41' -> α43')  ()
//│ | | Analyze[-] (x41',)  ()
//│ | | | Analyze[-] x41'  ()
//│ | | | | !! x41' Some(false) List({a: a42'})
//│ | | | | Analyze[-] {a: a42'}  (x41')
//│ | | | | | Analyze[-] a42'  ()
//│ | | | | | | !! a42' Some(false) List(x41')
//│ | | | | | | Analyze[-] x41'  (a42')
//│ | | Analyze[+] α43'  ()
//│ | | | !! α43' Some(true) List()
//│ Pos: HashSet(α43')
//│ Neg: HashSet(x41', a42')
//│ Rec: HashSet(x41')
//│ Unif: HashMap()
//│ Subst: Map(α43' -> ⊥, a42' -> x41')
//│ subst(foo40'#)
//│ | subst((x41' -> α43'))
//│ | | subst((x41',))
//│ | | | subst(x41')
//│ | | | | subst({a: a42'})
//│ | | | | | subst(a42')
//│ | | | | | | subst(x41')
//│ | | | | | | = x41_45'
//│ | | | | | = x41_45'
//│ | | | | = {a: x41_45'}
//│ | | | = x41_45'
//│ | | = (x41_45',)
//│ | | subst(α43')
//│ | | | subst(⊥)
//│ | | | = ⊥
//│ | | = ⊥
//│ | = (x41_45' -> ⊥)
//│ = foo40_44'#
//│ ⬤ Typed as: ‹∀ 0. foo40_44'#›
//│  where: 
//│ 		foo40_44'# := (x41_45' -> ⊥)
//│ 		x41_45' <: {a: x41_45'}
//│ foo: 'x -> nothing
//│   where
//│     'x <: {a: 'x}
//│    = [Function: foo3]




