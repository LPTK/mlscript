

:d
def foo x = x.a
//│ 1. Typing term (x,) => (x).a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x8''
//│ | 2. : (x8'',)
//│ | 2. Typing term (x).a
//│ | | 2. Typing term x
//│ | | 2. : x8''
//│ | | CONSTRAIN x8'' <! {a: a9''}
//│ | |   where 
//│ | | 2. C x8'' <! {a: a9''}    (0)
//│ | | | NEW x8'' UB (2)
//│ | 2. : a9''
//│ | Inferred poly constr: (x8'' -> a9'')  —— where 
//│ 		x8'' <: {a: a9''}
//│ | Analysis[+] (x8'' -> a9'')  ()
//│ | | Analysis[-] (x8'',)  ()
//│ | | | Analysis[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analysis[-] {a: a9''}  ()
//│ | | | | | Analysis[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analysis[+] a9''  ()
//│ | Unif-pre: HashMap()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | subst((x8'' -> a9''))
//│ | | subst((x8'',))
//│ | | | subst(x8'')
//│ | | | | Repr: x8''
//│ | | | | subst({a: a9''})
//│ | | | | | subst(a9'')
//│ | | | | | | Repr: a9''
//│ | | | | | = a9''
//│ | | | | = {a: a9''}
//│ | | | = x8''
//│ | | = (x8'',)
//│ | | subst(a9'')
//│ | | | Repr: a9''
//│ | | = a9''
//│ | = (x8'' -> a9'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x8'' -> a9'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x8'' -> a9'')› where 
//│ 		x8'' <: {a: a9''}
//│ Analysis[+] ‹∀ 1. (x8'' -> a9'')›  ()
//│ | Analysis[+] (x8'' -> a9'')  ()
//│ | | Analysis[-] (x8'',)  ()
//│ | | | Analysis[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analysis[-] {a: a9''}  (x8'')
//│ | | | | | Analysis[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analysis[+] a9''  ()
//│ | | | !! a9'' Some(true) List()
//│ Unif-pre: HashMap()
//│ Pos: HashSet(a9'')
//│ Neg: HashSet(x8'', a9'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ subst(‹∀ 1. (x8'' -> a9'')›)
//│ | subst((x8'' -> a9''))
//│ | | subst((x8'',))
//│ | | | subst(x8'')
//│ | | | | Repr: x8''
//│ | | | | subst({a: a9''})
//│ | | | | | subst(a9'')
//│ | | | | | | Repr: a9''
//│ | | | | | = a9''
//│ | | | | = {a: a9''}
//│ | | | = x8''
//│ | | = (x8'',)
//│ | | subst(a9'')
//│ | | | Repr: a9''
//│ | | = a9''
//│ | = (x8'' -> a9'')
//│ = ‹∀ 1. (x8'' -> a9'')›
//│ ⬤ Typed as: ‹∀ 1. (x8'' -> a9'')›
//│  where: 
//│ 		x8'' <: {a: a9''}
//│ foo: {a: 'a} -> 'a
//│    = [Function: foo]

:d
def foo x = id x
//│ 1. Typing term (x,) => id (x,)
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x14''
//│ | 2. : (x14'',)
//│ | 2. Typing term id (x,)
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | 2. Typing term x
//│ | | 2. : x14''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! (x14'' -> α15'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! (x14'' -> α15'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_16'' -> α5_16'')
//│ | | |   where  
//│ | | | 2. C (α5_16'' -> α5_16'') <! (x14'' -> α15'')    (2)
//│ | | | | 2. C (x14'',) <! (α5_16'',)    (2)
//│ | | | | | 2. C x14'' <! α5_16''    (3)
//│ | | | | | | NEW x14'' UB (2)
//│ | | | | 2. C α5_16'' <! α15''    (2)
//│ | | | | | NEW α5_16'' UB (2)
//│ | 2. : α15''
//│ | Inferred poly constr: (x14'' -> α15'')  —— where 
//│ 		x14'' <: α5_16''
//│ 		α5_16'' <: α15''
//│ | Analysis[+] (x14'' -> α15'')  ()
//│ | | Analysis[-] (x14'',)  ()
//│ | | | Analysis[-] x14''  ()
//│ | | | | !! x14'' Some(false) List(α5_16'')
//│ | | | | Analysis[-] α5_16''  ()
//│ | | | | | !! α5_16'' Some(false) List(α15'')
//│ | | | | | Analysis[-] α15''  ()
//│ | | | | | | !! α15'' Some(false) List()
//│ | | Analysis[+] α15''  ()
//│ | Unif-pre: HashMap()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | subst((x14'' -> α15''))
//│ | | subst((x14'',))
//│ | | | subst(x14'')
//│ | | | | Repr: x14''
//│ | | | | subst(α5_16'')
//│ | | | | | Repr: α5_16''
//│ | | | | | subst(α15'')
//│ | | | | | | Repr: α15''
//│ | | | | | = α15''
//│ | | | | = α5_16''
//│ | | | = x14''
//│ | | = (x14'',)
//│ | | subst(α15'')
//│ | | | Repr: α15''
//│ | | = α15''
//│ | = (x14'' -> α15'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x14'' -> α15'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x14'' -> α15'')› where 
//│ 		x14'' <: α5_16''
//│ 		α5_16'' <: α15''
//│ Analysis[+] ‹∀ 1. (x14'' -> α15'')›  ()
//│ | Analysis[+] (x14'' -> α15'')  ()
//│ | | Analysis[-] (x14'',)  ()
//│ | | | Analysis[-] x14''  ()
//│ | | | | !! x14'' Some(false) List(α5_16'')
//│ | | | | Analysis[-] α5_16''  (x14'')
//│ | | | | | !! α5_16'' Some(false) List(α15'')
//│ | | | | | Analysis[-] α15''  (x14'' ~> α5_16'')
//│ | | | | | | !! α15'' Some(false) List()
//│ | | Analysis[+] α15''  ()
//│ | | | !! α15'' Some(true) List()
//│ Unif-pre: HashMap()
//│ Pos: HashSet(α15'')
//│ Neg: HashSet(α5_16'', x14'', α15'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ subst(‹∀ 1. (x14'' -> α15'')›)
//│ | subst((x14'' -> α15''))
//│ | | subst((x14'',))
//│ | | | subst(x14'')
//│ | | | | Repr: x14''
//│ | | | | subst(α5_16'')
//│ | | | | | Repr: α5_16''
//│ | | | | | subst(α15'')
//│ | | | | | | Repr: α15''
//│ | | | | | = α15''
//│ | | | | = α15''
//│ | | | = α15''
//│ | | = (α15'',)
//│ | | subst(α15'')
//│ | | | Repr: α15''
//│ | | = α15''
//│ | = (α15'' -> α15'')
//│ = ‹∀ 1. (α15'' -> α15'')›
//│ ⬤ Typed as: ‹∀ 1. (α15'' -> α15'')›
//│  where: 
//│ foo: 'a -> 'a
//│    = [Function: foo1]

:d
def foo() = id : 'a -> 'a
//│ 1. Typing term () => id : 'a -> 'a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern 
//│ | 2. : ()
//│ | 2. Typing term id : 'a -> 'a
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | Typing type 'a -> 'a
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 2. type 'a -> 'a
//│ | | | | 2. type ('a,)
//│ | | | | | 2. type 'a
//│ | | | | | => 'a20''
//│ | | | | => ('a20'',)
//│ | | | | 2. type 'a
//│ | | | | => 'a20''
//│ | | | => ('a20'' -> 'a20'')
//│ | | => ('a20'' -> 'a20'') ——— 'a20''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! ('a20'' -> 'a20'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! ('a20'' -> 'a20'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_21'' -> α5_21'')
//│ | | |   where  
//│ | | | 2. C (α5_21'' -> α5_21'') <! ('a20'' -> 'a20'')    (2)
//│ | | | | 2. C ('a20'',) <! (α5_21'',)    (2)
//│ | | | | | 2. C 'a20'' <! α5_21''    (3)
//│ | | | | | | NEW 'a20'' UB (2)
//│ | | | | 2. C α5_21'' <! 'a20''    (2)
//│ | | | | | NEW α5_21'' UB (2)
//│ | 2. : ('a20'' -> 'a20'')
//│ | Inferred poly constr: (() -> ('a20'' -> 'a20''))  —— where 
//│ 		'a20'' <: α5_21''
//│ 		α5_21'' <: 'a20''
//│ | Analysis[+] (() -> ('a20'' -> 'a20''))  ()
//│ | | Analysis[-] ()  ()
//│ | | Analysis[+] ('a20'' -> 'a20'')  ()
//│ | | | Analysis[-] ('a20'',)  ()
//│ | | | | Analysis[-] 'a20''  ()
//│ | | | | | !! 'a20'' Some(false) List(α5_21'')
//│ | | | | | Analysis[-] α5_21''  ()
//│ | | | | | | !! α5_21'' Some(false) List('a20'')
//│ | | | | | | Analysis[-] 'a20''  ()
//│ | | | Analysis[+] 'a20''  ()
//│ | Unif-pre: HashMap()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | subst((() -> ('a20'' -> 'a20'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a20'' -> 'a20''))
//│ | | | subst(('a20'',))
//│ | | | | subst('a20'')
//│ | | | | | Repr: 'a20''
//│ | | | | | subst(α5_21'')
//│ | | | | | | Repr: α5_21''
//│ | | | | | | subst('a20'')
//│ | | | | | | | Repr: 'a20''
//│ | | | | | | = ⊤..⊥
//│ | | | | | = α5_21''
//│ | | | | = 'a20''
//│ | | | = ('a20'',)
//│ | | | subst('a20'')
//│ | | | | Repr: 'a20''
//│ | | | = 'a20''
//│ | | = ('a20'' -> 'a20'')
//│ | = (() -> ('a20'' -> 'a20''))
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (() -> ('a20'' -> 'a20''))›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (() -> ('a20'' -> 'a20''))› where 
//│ 		'a20'' <: α5_21''
//│ 		α5_21'' <: ⊤..⊥
//│ Analysis[+] ‹∀ 1. (() -> ('a20'' -> 'a20''))›  ()
//│ | Analysis[+] (() -> ('a20'' -> 'a20''))  ()
//│ | | Analysis[-] ()  ()
//│ | | Analysis[+] ('a20'' -> 'a20'')  ()
//│ | | | Analysis[-] ('a20'',)  ()
//│ | | | | Analysis[-] 'a20''  ()
//│ | | | | | !! 'a20'' Some(false) List(α5_21'')
//│ | | | | | Analysis[-] α5_21''  ('a20'')
//│ | | | | | | !! α5_21'' Some(false) List(⊤..⊥)
//│ | | | | | | Analysis[-] ⊤..⊥  ('a20'' ~> α5_21'')
//│ | | | | | | | Analysis[-] ⊤  ('a20'' ~> α5_21'')
//│ | | | | | | | Analysis[+] ⊥  ('a20'' ~> α5_21'')
//│ | | | Analysis[+] 'a20''  ()
//│ | | | | !! 'a20'' Some(true) List(α5_21'')
//│ Unif-pre: HashMap()
//│ Pos: HashSet('a20'')
//│ Neg: HashSet('a20'', α5_21'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ subst(‹∀ 1. (() -> ('a20'' -> 'a20''))›)
//│ | subst((() -> ('a20'' -> 'a20'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a20'' -> 'a20''))
//│ | | | subst(('a20'',))
//│ | | | | subst('a20'')
//│ | | | | | Repr: 'a20''
//│ | | | | | subst(α5_21'')
//│ | | | | | | Repr: α5_21''
//│ | | | | | | subst(⊤..⊥)
//│ | | | | | | | subst(⊤)
//│ | | | | | | | = ⊤
//│ | | | | | | | subst(⊥)
//│ | | | | | | | = ⊥
//│ | | | | | | = ⊤..⊥
//│ | | | | | = α5_21''
//│ | | | | = 'a20''
//│ | | | = ('a20'',)
//│ | | | subst('a20'')
//│ | | | | Repr: 'a20''
//│ | | | = 'a20''
//│ | | = ('a20'' -> 'a20'')
//│ | = (() -> ('a20'' -> 'a20''))
//│ = ‹∀ 1. (() -> ('a20'' -> 'a20''))›
//│ ⬤ Typed as: ‹∀ 1. (() -> ('a20'' -> 'a20''))›
//│  where: 
//│ 		'a20'' <: α5_21''
//│ 		α5_21'' <: ⊤..⊥
//│ foo: () -> 'a -> 'a
//│    = [Function: foo2]


:d
rec def foo x = foo x.a
//│ 1. Typing term (x,) => foo ((x).a,)
//│ | 1. Typing pattern x,
//│ | | 1. Typing pattern x
//│ | | 1. : x27'
//│ | 1. : (x27',)
//│ | 1. Typing term foo ((x).a,)
//│ | | 1. Typing term foo
//│ | | 1. : foo26'
//│ | | 1. Typing term (x).a
//│ | | | 1. Typing term x
//│ | | | 1. : x27'
//│ | | | CONSTRAIN x27' <! {a: a28'}
//│ | | |   where 
//│ | | | 1. C x27' <! {a: a28'}    (0)
//│ | | | | NEW x27' UB (1)
//│ | | 1. : a28'
//│ | | CONSTRAIN foo26' <! (a28' -> α29')
//│ | |   where 
//│ | | 1. C foo26' <! (a28' -> α29')    (0)
//│ | | | NEW foo26' UB (1)
//│ | 1. : α29'
//│ 1. : (x27' -> α29')
//│ CONSTRAIN (x27' -> α29') <! foo26'
//│   where 
//│ 		foo26' <: (a28' -> α29')
//│ 		x27' <: {a: a28'}
//│ 1. C (x27' -> α29') <! foo26'    (0)
//│ | NEW foo26' LB (1)
//│ | 1. C (x27' -> α29') <! (a28' -> α29')    (2)
//│ | | 1. C (a28',) <! (x27',)    (2)
//│ | | | 1. C a28' <! x27'    (3)
//│ | | | | NEW a28' UB (1)
//│ | | 1. C α29' <! α29'    (2)
//│ | | | Already a subtype by <:<
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: foo26'# where 
//│ 		foo26'# := (x27' -> α29')
//│ 		x27' <: {a: a28'}
//│ 		a28' <: x27'
//│ Analysis[+] foo26'#  ()
//│ | Analysis[+] (x27' -> α29')  ()
//│ | | Analysis[-] (x27',)  ()
//│ | | | Analysis[-] x27'  ()
//│ | | | | !! x27' Some(false) List({a: a28'})
//│ | | | | Analysis[-] {a: a28'}  (x27')
//│ | | | | | Analysis[-] a28'  ()
//│ | | | | | | !! a28' Some(false) List(x27')
//│ | | | | | | Analysis[-] x27'  (a28')
//│ | | Analysis[+] α29'  ()
//│ | | | !! α29' Some(true) List()
//│ Unif-pre: HashMap()
//│ Pos: HashSet(α29')
//│ Neg: HashSet(x27', a28')
//│ Rec: HashSet(x27')
//│ Unif: HashMap()
//│ subst(foo26'#)
//│ | Repr: foo26'#
//│ | subst((x27' -> α29'))
//│ | | subst((x27',))
//│ | | | subst(x27')
//│ | | | | Repr: x27'
//│ | | | | It's recursive!
//│ | | | | subst({a: a28'})
//│ | | | | | subst(a28')
//│ | | | | | | Repr: a28'
//│ | | | | | | subst(x27')
//│ | | | | | | | Repr: x27'
//│ | | | | | | = x27'
//│ | | | | | = x27'
//│ | | | | = {a: x27'}
//│ | | | = x27'
//│ | | = (x27',)
//│ | | subst(α29')
//│ | | | Repr: α29'
//│ | | = ⊥
//│ | = (x27' -> ⊥)
//│ = foo26'#
//│ ⬤ Typed as: ‹∀ 0. foo26'#›
//│  where: 
//│ 		foo26'# := (x27' -> ⊥)
//│ 		x27' <: {a: x27'}
//│ foo: 'x -> nothing
//│   where
//│     'x <: {a: 'x}
//│    = [Function: foo3]




