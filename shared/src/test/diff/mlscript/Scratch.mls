

:d
def o = (fun x -> x x)
//│ 1. Typing term '(' (x,) => x (x,) ')'
//│ | 1. Typing term (x,) => x (x,)
//│ | | TYPING POLY LAM
//│ | | 2. Typing pattern x,
//│ | | | 2. Typing pattern x
//│ | | | 2. : x8''
//│ | | 2. : (x8'',)
//│ | | 2. Typing term x (x,)
//│ | | | 2. Typing term x
//│ | | | 2. : x8''
//│ | | | 2. Typing term x
//│ | | | 2. : x8''
//│ | | | CONSTRAIN x8'' <! (x8'' -> α9'')
//│ | | |   where 
//│ | | | 2. C x8'' <! (x8'' -> α9'')    (0)
//│ | | | | NEW x8'' UB (2)
//│ | | 2. : α9''
//│ | | Inferred poly constr: (x8'' -> α9'')  —— where 
//│ 		x8'' <: (x8'' -> α9'')
//│ | | Analysis[+] (x8'' -> α9'')  ()
//│ | | | Analysis[-] (x8'',)  ()
//│ | | | | Analysis[-] x8''  ()
//│ | | | | | !! x8'' Some(false) List((x8'' -> α9''))
//│ | | | | | Analysis[-] (x8'' -> α9'')  ()
//│ | | | | | | Analysis[+] (x8'',)  ()
//│ | | | | | | | Analysis[+] x8''  ()
//│ | | | | | | Analysis[-] α9''  ()
//│ | | | | | | | !! α9'' Some(false) List()
//│ | | | Analysis[+] α9''  ()
//│ | | Unif-pre: HashMap()
//│ | | Pos: HashSet()
//│ | | Neg: HashSet()
//│ | | Rec: HashSet()
//│ | | Unif: HashMap()
//│ | | subst((x8'' -> α9''))
//│ | | | subst((x8'',))
//│ | | | | subst(x8'')
//│ | | | | | Repr: x8''
//│ | | | | | subst((x8'' -> α9''))
//│ | | | | | | subst((x8'',))
//│ | | | | | | | subst(x8'')
//│ | | | | | | | | Repr: x8''
//│ | | | | | | | = ⊤..⊥
//│ | | | | | | = (⊤..⊥,)
//│ | | | | | | subst(α9'')
//│ | | | | | | | Repr: α9''
//│ | | | | | | = α9''
//│ | | | | | = (⊤..⊥ -> α9'')
//│ | | | | = x8''
//│ | | | = (x8'',)
//│ | | | subst(α9'')
//│ | | | | Repr: α9''
//│ | | | = α9''
//│ | | = (x8'' -> α9'')
//│ | | UNSTASHING... (out)
//│ | 1. : ‹∀ 1. (x8'' -> α9'')›
//│ 1. : ‹∀ 1. (x8'' -> α9'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x8'' -> α9'')› where 
//│ 		x8'' <: (⊤..⊥ -> α9'')
//│ Analysis[+] ‹∀ 1. (x8'' -> α9'')›  ()
//│ | Analysis[+] (x8'' -> α9'')  ()
//│ | | Analysis[-] (x8'',)  ()
//│ | | | Analysis[-] x8''  ()
//│ | | | | !! x8'' Some(false) List((⊤..⊥ -> α9''))
//│ | | | | Analysis[-] (⊤..⊥ -> α9'')  (x8'')
//│ | | | | | Analysis[+] (⊤..⊥,)  ()
//│ | | | | | | Analysis[+] ⊤..⊥  ()
//│ | | | | | | | Analysis[-] ⊤  ()
//│ | | | | | | | Analysis[+] ⊥  ()
//│ | | | | | Analysis[-] α9''  ()
//│ | | | | | | !! α9'' Some(false) List()
//│ | | Analysis[+] α9''  ()
//│ | | | !! α9'' Some(true) List()
//│ Unif-pre: HashMap()
//│ Pos: HashSet(α9'')
//│ Neg: HashSet(x8'', α9'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ subst(‹∀ 1. (x8'' -> α9'')›)
//│ | subst((x8'' -> α9''))
//│ | | subst((x8'',))
//│ | | | subst(x8'')
//│ | | | | Repr: x8''
//│ | | | | subst((⊤..⊥ -> α9''))
//│ | | | | | subst((⊤..⊥,))
//│ | | | | | | subst(⊤..⊥)
//│ | | | | | | | subst(⊤)
//│ | | | | | | | = ⊤
//│ | | | | | | | subst(⊥)
//│ | | | | | | | = ⊥
//│ | | | | | | = ⊤..⊥
//│ | | | | | = (⊤..⊥,)
//│ | | | | | subst(α9'')
//│ | | | | | | Repr: α9''
//│ | | | | | = α9''
//│ | | | | = (⊤..⊥ -> α9'')
//│ | | | = x8''
//│ | | = (x8'',)
//│ | | subst(α9'')
//│ | | | Repr: α9''
//│ | | = α9''
//│ | = (x8'' -> α9'')
//│ = ‹∀ 1. (x8'' -> α9'')›
//│ ⬤ Typed as: ‹∀ 1. (x8'' -> α9'')›
//│  where: 
//│ 		x8'' <: (⊤..⊥ -> α9'')
//│ o: (nothing -> 'a) -> 'a
//│  = [Function: o]


:d
o o
//│ 0. Typing term o (o,)
//│ | 0. Typing term o
//│ | 0. : ‹∀ 1. (x8'' -> α9'')›
//│ | 0. Typing term o
//│ | 0. : ‹∀ 1. (x8'' -> α9'')›
//│ | CONSTRAIN ‹∀ 1. (x8'' -> α9'')› <! (‹∀ 1. (x8'' -> α9'')› -> α14)
//│ |   where 
//│ 		x8'' <: (⊤..⊥ -> α9'')
//│ | 0. C ‹∀ 1. (x8'' -> α9'')› <! (‹∀ 1. (x8'' -> α9'')› -> α14)    (0)
//│ | | could be distribbed: Set(α9'')
//│ | | cannot be distribbed: Set(x8'', α9'')
//│ | | INST [1]   ‹∀ 1. (x8'' -> α9'')›
//│ | |   where  
//│ 		x8'' <: (⊤..⊥ -> α9'')
//│ | | TO [0] ~>  (x8_15 -> α9_16)
//│ | |   where  
//│ 		x8_15 <: (⊤..⊥ -> α9_16)
//│ | | 0. C (x8_15 -> α9_16) <! (‹∀ 1. (x8'' -> α9'')› -> α14)    (2)
//│ | | | 0. C (‹∀ 1. (x8'' -> α9'')›,) <! (x8_15,)    (2)
//│ | | | | 0. C ‹∀ 1. (x8'' -> α9'')› <! x8_15    (3)
//│ | | | | | NEW x8_15 LB (0)
//│ | | | | | 0. C ‹∀ 1. (x8'' -> α9'')› <! (⊤..⊥ -> α9_16)    (6)
//│ | | | | | | could be distribbed: Set(α9'')
//│ | | | | | | cannot be distribbed: Set(x8'', α9'')
//│ | | | | | | INST [1]   ‹∀ 1. (x8'' -> α9'')›
//│ | | | | | |   where  
//│ 		x8'' <: (⊤..⊥ -> α9'')
//│ | | | | | | TO [0] ~>  (x8_17 -> α9_18)
//│ | | | | | |   where  
//│ 		x8_17 <: (⊤..⊥ -> α9_18)
//│ | | | | | | 0. C (x8_17 -> α9_18) <! (⊤..⊥ -> α9_16)    (9)
//│ | | | | | | | 0. C (⊤..⊥,) <! (x8_17,)    (6)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | | 0. C α9_18 <! α9_16    (6)
//│ | | | | | | | | NEW α9_18 UB (0)
//│ | | | 0. C α9_16 <! α14    (2)
//│ | | | | NEW α9_16 UB (0)
//│ 0. : α14
//│ ⬤ Typed as: α14
//│  where: 
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


:d
def foo x = x.a
//│ 1. Typing term (x,) => (x).a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x20''
//│ | 2. : (x20'',)
//│ | 2. Typing term (x).a
//│ | | 2. Typing term x
//│ | | 2. : x20''
//│ | | CONSTRAIN x20'' <! {a: a21''}
//│ | |   where 
//│ | | 2. C x20'' <! {a: a21''}    (0)
//│ | | | NEW x20'' UB (2)
//│ | 2. : a21''
//│ | Inferred poly constr: (x20'' -> a21'')  —— where 
//│ 		x20'' <: {a: a21''}
//│ | Analysis[+] (x20'' -> a21'')  ()
//│ | | Analysis[-] (x20'',)  ()
//│ | | | Analysis[-] x20''  ()
//│ | | | | !! x20'' Some(false) List({a: a21''})
//│ | | | | Analysis[-] {a: a21''}  ()
//│ | | | | | Analysis[-] a21''  ()
//│ | | | | | | !! a21'' Some(false) List()
//│ | | Analysis[+] a21''  ()
//│ | Unif-pre: HashMap()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | subst((x20'' -> a21''))
//│ | | subst((x20'',))
//│ | | | subst(x20'')
//│ | | | | Repr: x20''
//│ | | | | subst({a: a21''})
//│ | | | | | subst(a21'')
//│ | | | | | | Repr: a21''
//│ | | | | | = a21''
//│ | | | | = {a: a21''}
//│ | | | = x20''
//│ | | = (x20'',)
//│ | | subst(a21'')
//│ | | | Repr: a21''
//│ | | = a21''
//│ | = (x20'' -> a21'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x20'' -> a21'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x20'' -> a21'')› where 
//│ 		x20'' <: {a: a21''}
//│ Analysis[+] ‹∀ 1. (x20'' -> a21'')›  ()
//│ | Analysis[+] (x20'' -> a21'')  ()
//│ | | Analysis[-] (x20'',)  ()
//│ | | | Analysis[-] x20''  ()
//│ | | | | !! x20'' Some(false) List({a: a21''})
//│ | | | | Analysis[-] {a: a21''}  (x20'')
//│ | | | | | Analysis[-] a21''  ()
//│ | | | | | | !! a21'' Some(false) List()
//│ | | Analysis[+] a21''  ()
//│ | | | !! a21'' Some(true) List()
//│ Unif-pre: HashMap()
//│ Pos: HashSet(a21'')
//│ Neg: HashSet(x20'', a21'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ subst(‹∀ 1. (x20'' -> a21'')›)
//│ | subst((x20'' -> a21''))
//│ | | subst((x20'',))
//│ | | | subst(x20'')
//│ | | | | Repr: x20''
//│ | | | | subst({a: a21''})
//│ | | | | | subst(a21'')
//│ | | | | | | Repr: a21''
//│ | | | | | = a21''
//│ | | | | = {a: a21''}
//│ | | | = x20''
//│ | | = (x20'',)
//│ | | subst(a21'')
//│ | | | Repr: a21''
//│ | | = a21''
//│ | = (x20'' -> a21'')
//│ = ‹∀ 1. (x20'' -> a21'')›
//│ ⬤ Typed as: ‹∀ 1. (x20'' -> a21'')›
//│  where: 
//│ 		x20'' <: {a: a21''}
//│ foo: {a: 'a} -> 'a
//│    = [Function: foo]

:d
def foo x = id x
//│ 1. Typing term (x,) => id (x,)
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x26''
//│ | 2. : (x26'',)
//│ | 2. Typing term id (x,)
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | 2. Typing term x
//│ | | 2. : x26''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! (x26'' -> α27'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! (x26'' -> α27'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_28'' -> α5_28'')
//│ | | |   where  
//│ | | | 2. C (α5_28'' -> α5_28'') <! (x26'' -> α27'')    (2)
//│ | | | | 2. C (x26'',) <! (α5_28'',)    (2)
//│ | | | | | 2. C x26'' <! α5_28''    (3)
//│ | | | | | | NEW x26'' UB (2)
//│ | | | | 2. C α5_28'' <! α27''    (2)
//│ | | | | | NEW α5_28'' UB (2)
//│ | 2. : α27''
//│ | Inferred poly constr: (x26'' -> α27'')  —— where 
//│ 		x26'' <: α5_28''
//│ 		α5_28'' <: α27''
//│ | Analysis[+] (x26'' -> α27'')  ()
//│ | | Analysis[-] (x26'',)  ()
//│ | | | Analysis[-] x26''  ()
//│ | | | | !! x26'' Some(false) List(α5_28'')
//│ | | | | Analysis[-] α5_28''  ()
//│ | | | | | !! α5_28'' Some(false) List(α27'')
//│ | | | | | Analysis[-] α27''  ()
//│ | | | | | | !! α27'' Some(false) List()
//│ | | Analysis[+] α27''  ()
//│ | Unif-pre: HashMap()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | subst((x26'' -> α27''))
//│ | | subst((x26'',))
//│ | | | subst(x26'')
//│ | | | | Repr: x26''
//│ | | | | subst(α5_28'')
//│ | | | | | Repr: α5_28''
//│ | | | | | subst(α27'')
//│ | | | | | | Repr: α27''
//│ | | | | | = α27''
//│ | | | | = α5_28''
//│ | | | = x26''
//│ | | = (x26'',)
//│ | | subst(α27'')
//│ | | | Repr: α27''
//│ | | = α27''
//│ | = (x26'' -> α27'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x26'' -> α27'')›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (x26'' -> α27'')› where 
//│ 		x26'' <: α5_28''
//│ 		α5_28'' <: α27''
//│ Analysis[+] ‹∀ 1. (x26'' -> α27'')›  ()
//│ | Analysis[+] (x26'' -> α27'')  ()
//│ | | Analysis[-] (x26'',)  ()
//│ | | | Analysis[-] x26''  ()
//│ | | | | !! x26'' Some(false) List(α5_28'')
//│ | | | | Analysis[-] α5_28''  (x26'')
//│ | | | | | !! α5_28'' Some(false) List(α27'')
//│ | | | | | Analysis[-] α27''  (x26'' ~> α5_28'')
//│ | | | | | | !! α27'' Some(false) List()
//│ | | Analysis[+] α27''  ()
//│ | | | !! α27'' Some(true) List()
//│ Unif-pre: HashMap()
//│ Pos: HashSet(α27'')
//│ Neg: HashSet(x26'', α27'', α5_28'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ subst(‹∀ 1. (x26'' -> α27'')›)
//│ | subst((x26'' -> α27''))
//│ | | subst((x26'',))
//│ | | | subst(x26'')
//│ | | | | Repr: x26''
//│ | | | | subst(α5_28'')
//│ | | | | | Repr: α5_28''
//│ | | | | | subst(α27'')
//│ | | | | | | Repr: α27''
//│ | | | | | = α27''
//│ | | | | = α27''
//│ | | | = α27''
//│ | | = (α27'',)
//│ | | subst(α27'')
//│ | | | Repr: α27''
//│ | | = α27''
//│ | = (α27'' -> α27'')
//│ = ‹∀ 1. (α27'' -> α27'')›
//│ ⬤ Typed as: ‹∀ 1. (α27'' -> α27'')›
//│  where: 
//│ foo: 'a -> 'a
//│    = [Function: foo1]

:d
def foo() = id : 'a -> 'a
//│ 1. Typing term () => id : 'a -> 'a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern 
//│ | 2. : ()
//│ | 2. Typing term id : 'a -> 'a
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | Typing type 'a -> 'a
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 2. type 'a -> 'a
//│ | | | | 2. type ('a,)
//│ | | | | | 2. type 'a
//│ | | | | | => 'a32''
//│ | | | | => ('a32'',)
//│ | | | | 2. type 'a
//│ | | | | => 'a32''
//│ | | | => ('a32'' -> 'a32'')
//│ | | => ('a32'' -> 'a32'') ——— 'a32''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! ('a32'' -> 'a32'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! ('a32'' -> 'a32'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_33'' -> α5_33'')
//│ | | |   where  
//│ | | | 2. C (α5_33'' -> α5_33'') <! ('a32'' -> 'a32'')    (2)
//│ | | | | 2. C ('a32'',) <! (α5_33'',)    (2)
//│ | | | | | 2. C 'a32'' <! α5_33''    (3)
//│ | | | | | | NEW 'a32'' UB (2)
//│ | | | | 2. C α5_33'' <! 'a32''    (2)
//│ | | | | | NEW α5_33'' UB (2)
//│ | 2. : ('a32'' -> 'a32'')
//│ | Inferred poly constr: (() -> ('a32'' -> 'a32''))  —— where 
//│ 		'a32'' <: α5_33''
//│ 		α5_33'' <: 'a32''
//│ | Analysis[+] (() -> ('a32'' -> 'a32''))  ()
//│ | | Analysis[-] ()  ()
//│ | | Analysis[+] ('a32'' -> 'a32'')  ()
//│ | | | Analysis[-] ('a32'',)  ()
//│ | | | | Analysis[-] 'a32''  ()
//│ | | | | | !! 'a32'' Some(false) List(α5_33'')
//│ | | | | | Analysis[-] α5_33''  ()
//│ | | | | | | !! α5_33'' Some(false) List('a32'')
//│ | | | | | | Analysis[-] 'a32''  ()
//│ | | | Analysis[+] 'a32''  ()
//│ | Unif-pre: HashMap()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | subst((() -> ('a32'' -> 'a32'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a32'' -> 'a32''))
//│ | | | subst(('a32'',))
//│ | | | | subst('a32'')
//│ | | | | | Repr: 'a32''
//│ | | | | | subst(α5_33'')
//│ | | | | | | Repr: α5_33''
//│ | | | | | | subst('a32'')
//│ | | | | | | | Repr: 'a32''
//│ | | | | | | = ⊤..⊥
//│ | | | | | = α5_33''
//│ | | | | = 'a32''
//│ | | | = ('a32'',)
//│ | | | subst('a32'')
//│ | | | | Repr: 'a32''
//│ | | | = 'a32''
//│ | | = ('a32'' -> 'a32'')
//│ | = (() -> ('a32'' -> 'a32''))
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (() -> ('a32'' -> 'a32''))›
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: ‹∀ 1. (() -> ('a32'' -> 'a32''))› where 
//│ 		'a32'' <: α5_33''
//│ 		α5_33'' <: ⊤..⊥
//│ Analysis[+] ‹∀ 1. (() -> ('a32'' -> 'a32''))›  ()
//│ | Analysis[+] (() -> ('a32'' -> 'a32''))  ()
//│ | | Analysis[-] ()  ()
//│ | | Analysis[+] ('a32'' -> 'a32'')  ()
//│ | | | Analysis[-] ('a32'',)  ()
//│ | | | | Analysis[-] 'a32''  ()
//│ | | | | | !! 'a32'' Some(false) List(α5_33'')
//│ | | | | | Analysis[-] α5_33''  ('a32'')
//│ | | | | | | !! α5_33'' Some(false) List(⊤..⊥)
//│ | | | | | | Analysis[-] ⊤..⊥  ('a32'' ~> α5_33'')
//│ | | | | | | | Analysis[-] ⊤  ('a32'' ~> α5_33'')
//│ | | | | | | | Analysis[+] ⊥  ('a32'' ~> α5_33'')
//│ | | | Analysis[+] 'a32''  ()
//│ | | | | !! 'a32'' Some(true) List(α5_33'')
//│ Unif-pre: HashMap()
//│ Pos: HashSet('a32'')
//│ Neg: HashSet('a32'', α5_33'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ subst(‹∀ 1. (() -> ('a32'' -> 'a32''))›)
//│ | subst((() -> ('a32'' -> 'a32'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a32'' -> 'a32''))
//│ | | | subst(('a32'',))
//│ | | | | subst('a32'')
//│ | | | | | Repr: 'a32''
//│ | | | | | subst(α5_33'')
//│ | | | | | | Repr: α5_33''
//│ | | | | | | subst(⊤..⊥)
//│ | | | | | | | subst(⊤)
//│ | | | | | | | = ⊤
//│ | | | | | | | subst(⊥)
//│ | | | | | | | = ⊥
//│ | | | | | | = ⊤..⊥
//│ | | | | | = α5_33''
//│ | | | | = 'a32''
//│ | | | = ('a32'',)
//│ | | | subst('a32'')
//│ | | | | Repr: 'a32''
//│ | | | = 'a32''
//│ | | = ('a32'' -> 'a32'')
//│ | = (() -> ('a32'' -> 'a32''))
//│ = ‹∀ 1. (() -> ('a32'' -> 'a32''))›
//│ ⬤ Typed as: ‹∀ 1. (() -> ('a32'' -> 'a32''))›
//│  where: 
//│ 		'a32'' <: α5_33''
//│ 		α5_33'' <: ⊤..⊥
//│ foo: () -> 'a -> 'a
//│    = [Function: foo2]


:d
rec def foo x = foo x.a
//│ 1. Typing term (x,) => foo ((x).a,)
//│ | 1. Typing pattern x,
//│ | | 1. Typing pattern x
//│ | | 1. : x39'
//│ | 1. : (x39',)
//│ | 1. Typing term foo ((x).a,)
//│ | | 1. Typing term foo
//│ | | 1. : foo38'
//│ | | 1. Typing term (x).a
//│ | | | 1. Typing term x
//│ | | | 1. : x39'
//│ | | | CONSTRAIN x39' <! {a: a40'}
//│ | | |   where 
//│ | | | 1. C x39' <! {a: a40'}    (0)
//│ | | | | NEW x39' UB (1)
//│ | | 1. : a40'
//│ | | CONSTRAIN foo38' <! (a40' -> α41')
//│ | |   where 
//│ | | 1. C foo38' <! (a40' -> α41')    (0)
//│ | | | NEW foo38' UB (1)
//│ | 1. : α41'
//│ 1. : (x39' -> α41')
//│ CONSTRAIN (x39' -> α41') <! foo38'
//│   where 
//│ 		foo38' <: (a40' -> α41')
//│ 		x39' <: {a: a40'}
//│ 1. C (x39' -> α41') <! foo38'    (0)
//│ | NEW foo38' LB (1)
//│ | 1. C (x39' -> α41') <! (a40' -> α41')    (2)
//│ | | 1. C (a40',) <! (x39',)    (2)
//│ | | | 1. C a40' <! x39'    (3)
//│ | | | | NEW a40' UB (1)
//│ | | 1. C α41' <! α41'    (2)
//│ | | | Already a subtype by <:<
//│ UNSTASHING... (out)
//│ Inferred let-bound term type: foo38'# where 
//│ 		foo38'# := (x39' -> α41')
//│ 		x39' <: {a: a40'}
//│ 		a40' <: x39'
//│ Analysis[+] foo38'#  ()
//│ | Analysis[+] (x39' -> α41')  (foo38'#)
//│ | | Analysis[-] (x39',)  ()
//│ | | | Analysis[-] x39'  ()
//│ | | | | !! x39' Some(false) List({a: a40'})
//│ | | | | Analysis[-] {a: a40'}  (x39')
//│ | | | | | Analysis[-] a40'  ()
//│ | | | | | | !! a40' Some(false) List(x39')
//│ | | | | | | Analysis[-] x39'  (a40')
//│ | | Analysis[+] α41'  ()
//│ | | | !! α41' Some(true) List()
//│ Unif-pre: HashMap()
//│ Pos: HashSet(foo38'#, α41')
//│ Neg: HashSet(x39', a40')
//│ Rec: HashSet(x39')
//│ Unif: HashMap()
//│ subst(foo38'#)
//│ | Repr: foo38'#
//│ | subst((x39' -> α41'))
//│ | | subst((x39',))
//│ | | | subst(x39')
//│ | | | | Repr: x39'
//│ | | | | It's recursive!
//│ | | | | subst({a: a40'})
//│ | | | | | subst(a40')
//│ | | | | | | Repr: a40'
//│ | | | | | | subst(x39')
//│ | | | | | | | Repr: x39'
//│ | | | | | | = x39'
//│ | | | | | = x39'
//│ | | | | = {a: x39'}
//│ | | | = x39'
//│ | | = (x39',)
//│ | | subst(α41')
//│ | | | Repr: α41'
//│ | | = ⊥
//│ | = (x39' -> ⊥)
//│ = foo38'#
//│ ⬤ Typed as: ‹∀ 0. foo38'#›
//│  where: 
//│ 		foo38'# := (x39' -> ⊥)
//│ 		x39' <: {a: x39'}
//│ foo: 'x -> nothing
//│   where
//│     'x <: {a: 'x}
//│    = [Function: foo3]




