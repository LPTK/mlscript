

:d
def foo x = x.a
//│ 1. Typing term (x,) => (x).a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x8''
//│ | 2. : (x8'',)
//│ | 2. Typing term (x).a
//│ | | 2. Typing term x
//│ | | 2. : x8''
//│ | | CONSTRAIN x8'' <! {a: a9''}
//│ | |   where 
//│ | | 2. C x8'' <! {a: a9''}    (0)
//│ | | | NEW x8'' UB (2)
//│ | 2. : a9''
//│ | Inferred poly constr: (x8'' -> a9'')  —— where 
//│ 		x8'' <: {a: a9''}
//│ | Analyze[+] (x8'' -> a9'')  ()
//│ | | Analyze[-] (x8'',)  ()
//│ | | | Analyze[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analyze[-] {a: a9''}  ()
//│ | | | | | Analyze[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analyze[+] a9''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: HashMap()
//│ | subst((x8'' -> a9''))
//│ | | subst((x8'',))
//│ | | | subst(x8'')
//│ | | | | subst({a: a9''})
//│ | | | | | subst(a9'')
//│ | | | | | = a9''
//│ | | | | = {a: a9''}
//│ | | | = x8_10''
//│ | | = (x8_10'',)
//│ | | subst(a9'')
//│ | | = a9''
//│ | = (x8_10'' -> a9'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x8_10'' -> a9'')›
//│ UNSTASHING... (out)
//│ Analyze[+] ‹∀ 1. (x8_10'' -> a9'')›  ()
//│ | Analyze[+] (x8_10'' -> a9'')  ()
//│ | | Analyze[-] (x8_10'',)  ()
//│ | | | Analyze[-] x8_10''  ()
//│ | | | | !! x8_10'' Some(false) List({a: a9''})
//│ | | | | Analyze[-] {a: a9''}  (x8_10'')
//│ | | | | | Analyze[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analyze[+] a9''  ()
//│ | | | !! a9'' Some(true) List()
//│ Pos: HashSet(a9'')
//│ Neg: HashSet(a9'', x8_10'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: HashMap()
//│ subst(‹∀ 1. (x8_10'' -> a9'')›)
//│ | subst(‹∀ 2. (x8_11''' -> a9_12''')›)
//│ | | subst((x8_11''' -> a9_12'''))
//│ | | | subst((x8_11''',))
//│ | | | | subst(x8_11''')
//│ | | | | | subst({a: a9_12'''})
//│ | | | | | | subst(a9_12''')
//│ | | | | | | = a9_12'''
//│ | | | | | = {a: a9_12'''}
//│ | | | | = x8_13'''
//│ | | | = (x8_13''',)
//│ | | | subst(a9_12''')
//│ | | | = a9_12'''
//│ | | = (x8_13''' -> a9_12''')
//│ | = ‹∀ 2. (x8_13''' -> a9_12''')›
//│ = ‹∀ 2. (x8_13''' -> a9_12''')›
//│ ⬤ Typed as: ‹∀ 2. (x8_13''' -> a9_12''')›
//│  where: 
//│ 		x8_13''' <: {a: a9_12'''}
//│ foo: {a: 'a} -> 'a
//│    = [Function: foo]

:d
def foo x = id x
//│ 1. Typing term (x,) => id (x,)
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x18''
//│ | 2. : (x18'',)
//│ | 2. Typing term id (x,)
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | 2. Typing term x
//│ | | 2. : x18''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! (x18'' -> α19'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! (x18'' -> α19'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_20'' -> α5_20'')
//│ | | |   where  
//│ | | | 2. C (α5_20'' -> α5_20'') <! (x18'' -> α19'')    (2)
//│ | | | | 2. C (x18'',) <! (α5_20'',)    (2)
//│ | | | | | 2. C x18'' <! α5_20''    (3)
//│ | | | | | | NEW x18'' UB (2)
//│ | | | | 2. C α5_20'' <! α19''    (2)
//│ | | | | | NEW α5_20'' UB (2)
//│ | 2. : α19''
//│ | Inferred poly constr: (x18'' -> α19'')  —— where 
//│ 		x18'' <: α5_20''
//│ 		α5_20'' <: α19''
//│ | Analyze[+] (x18'' -> α19'')  ()
//│ | | Analyze[-] (x18'',)  ()
//│ | | | Analyze[-] x18''  ()
//│ | | | | !! x18'' Some(false) List(α5_20'')
//│ | | | | Analyze[-] α5_20''  ()
//│ | | | | | !! α5_20'' Some(false) List(α19'')
//│ | | | | | Analyze[-] α19''  ()
//│ | | | | | | !! α19'' Some(false) List()
//│ | | Analyze[+] α19''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: HashMap()
//│ | subst((x18'' -> α19''))
//│ | | subst((x18'',))
//│ | | | subst(x18'')
//│ | | | | subst(α5_20'')
//│ | | | | | subst(α19'')
//│ | | | | | = α19''
//│ | | | | = α5_22''
//│ | | | = x18_21''
//│ | | = (x18_21'',)
//│ | | subst(α19'')
//│ | | = α19''
//│ | = (x18_21'' -> α19'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x18_21'' -> α19'')›
//│ UNSTASHING... (out)
//│ Analyze[+] ‹∀ 1. (x18_21'' -> α19'')›  ()
//│ | Analyze[+] (x18_21'' -> α19'')  ()
//│ | | Analyze[-] (x18_21'',)  ()
//│ | | | Analyze[-] x18_21''  ()
//│ | | | | !! x18_21'' Some(false) List(α5_22'')
//│ | | | | Analyze[-] α5_22''  (x18_21'')
//│ | | | | | !! α5_22'' Some(false) List(α19'')
//│ | | | | | Analyze[-] α19''  (x18_21'' ~> α5_22'')
//│ | | | | | | !! α19'' Some(false) List()
//│ | | Analyze[+] α19''  ()
//│ | | | !! α19'' Some(true) List()
//│ Pos: HashSet(α19'')
//│ Neg: HashSet(α19'', x18_21'', α5_22'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: HashMap()
//│ subst(‹∀ 1. (x18_21'' -> α19'')›)
//│ | subst(‹∀ 2. (x18_23''' -> α19_25''')›)
//│ | | subst((x18_23''' -> α19_25'''))
//│ | | | subst((x18_23''',))
//│ | | | | subst(x18_23''')
//│ | | | | | subst(α5_24''')
//│ | | | | | | subst(α19_25''')
//│ | | | | | | = α19_25'''
//│ | | | | | = α5_27'''
//│ | | | | = x18_26'''
//│ | | | = (x18_26''',)
//│ | | | subst(α19_25''')
//│ | | | = α19_25'''
//│ | | = (x18_26''' -> α19_25''')
//│ | = ‹∀ 2. (x18_26''' -> α19_25''')›
//│ = ‹∀ 2. (x18_26''' -> α19_25''')›
//│ ⬤ Typed as: ‹∀ 2. (x18_26''' -> α19_25''')›
//│  where: 
//│ 		x18_26''' <: α5_27'''
//│ 		α5_27''' <: α19_25'''
//│ foo: 'a -> 'a
//│    = [Function: foo1]

:d
def foo() = id : 'a -> 'a
//│ 1. Typing term () => id : 'a -> 'a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern 
//│ | 2. : ()
//│ | 2. Typing term id : 'a -> 'a
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | Typing type 'a -> 'a
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 2. type 'a -> 'a
//│ | | | | 2. type ('a,)
//│ | | | | | 2. type 'a
//│ | | | | | => 'a33''
//│ | | | | => ('a33'',)
//│ | | | | 2. type 'a
//│ | | | | => 'a33''
//│ | | | => ('a33'' -> 'a33'')
//│ | | => ('a33'' -> 'a33'') ——— 'a33''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! ('a33'' -> 'a33'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! ('a33'' -> 'a33'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_34'' -> α5_34'')
//│ | | |   where  
//│ | | | 2. C (α5_34'' -> α5_34'') <! ('a33'' -> 'a33'')    (2)
//│ | | | | 2. C ('a33'',) <! (α5_34'',)    (2)
//│ | | | | | 2. C 'a33'' <! α5_34''    (3)
//│ | | | | | | NEW 'a33'' UB (2)
//│ | | | | 2. C α5_34'' <! 'a33''    (2)
//│ | | | | | NEW α5_34'' UB (2)
//│ | 2. : ('a33'' -> 'a33'')
//│ | Inferred poly constr: (() -> ('a33'' -> 'a33''))  —— where 
//│ 		'a33'' <: α5_34''
//│ 		α5_34'' <: 'a33''
//│ | Analyze[+] (() -> ('a33'' -> 'a33''))  ()
//│ | | Analyze[-] ()  ()
//│ | | Analyze[+] ('a33'' -> 'a33'')  ()
//│ | | | Analyze[-] ('a33'',)  ()
//│ | | | | Analyze[-] 'a33''  ()
//│ | | | | | !! 'a33'' Some(false) List(α5_34'')
//│ | | | | | Analyze[-] α5_34''  ()
//│ | | | | | | !! α5_34'' Some(false) List('a33'')
//│ | | | | | | Analyze[-] 'a33''  ()
//│ | | | Analyze[+] 'a33''  ()
//│ | Pos: HashSet()
//│ | Neg: HashSet()
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: HashMap()
//│ | subst((() -> ('a33'' -> 'a33'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a33'' -> 'a33''))
//│ | | | subst(('a33'',))
//│ | | | | subst('a33'')
//│ | | | | | subst(α5_34'')
//│ | | | | | | subst('a33'')
//│ | | | | | | = 'a33_35''
//│ | | | | | = α5_36''
//│ | | | | = 'a33_35''
//│ | | | = ('a33_35'',)
//│ | | | subst('a33'')
//│ | | | = 'a33_35''
//│ | | = ('a33_35'' -> 'a33_35'')
//│ | = (() -> ('a33_35'' -> 'a33_35''))
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (() -> ('a33_35'' -> 'a33_35''))›
//│ UNSTASHING... (out)
//│ Analyze[+] ‹∀ 1. (() -> ('a33_35'' -> 'a33_35''))›  ()
//│ | Analyze[+] (() -> ('a33_35'' -> 'a33_35''))  ()
//│ | | Analyze[-] ()  ()
//│ | | Analyze[+] ('a33_35'' -> 'a33_35'')  ()
//│ | | | Analyze[-] ('a33_35'',)  ()
//│ | | | | Analyze[-] 'a33_35''  ()
//│ | | | | | !! 'a33_35'' Some(false) List(α5_36'')
//│ | | | | | Analyze[-] α5_36''  ('a33_35'')
//│ | | | | | | !! α5_36'' Some(false) List('a33_35'')
//│ | | | | | | Analyze[-] 'a33_35''  ('a33_35'' ~> α5_36'')
//│ | | | Analyze[+] 'a33_35''  ()
//│ | | | | !! 'a33_35'' Some(true) List(α5_36'')
//│ Pos: HashSet('a33_35'')
//│ Neg: HashSet('a33_35'', α5_36'')
//│ Rec: HashSet()
//│ Unif: HashMap(α5_36'' -> 'a33_35'')
//│ Subst: HashMap(α5_36'' -> 'a33_35'')
//│ subst(‹∀ 1. (() -> ('a33_35'' -> 'a33_35''))›)
//│ | subst(‹∀ 2. (() -> ('a33_37''' -> 'a33_37'''))›)
//│ | | subst((() -> ('a33_37''' -> 'a33_37''')))
//│ | | | subst(())
//│ | | | = ()
//│ | | | subst(('a33_37''' -> 'a33_37'''))
//│ | | | | subst(('a33_37''',))
//│ | | | | | subst('a33_37''')
//│ | | | | | | subst(α5_38''')
//│ | | | | | | | subst('a33_37''')
//│ | | | | | | | = 'a33_39'''
//│ | | | | | | = α5_40'''
//│ | | | | | = 'a33_39'''
//│ | | | | = ('a33_39''',)
//│ | | | | subst('a33_37''')
//│ | | | | = 'a33_39'''
//│ | | | = ('a33_39''' -> 'a33_39''')
//│ | | = (() -> ('a33_39''' -> 'a33_39'''))
//│ | = ‹∀ 2. (() -> ('a33_39''' -> 'a33_39'''))›
//│ = ‹∀ 2. (() -> ('a33_39''' -> 'a33_39'''))›
//│ ⬤ Typed as: ‹∀ 2. (() -> ('a33_39''' -> 'a33_39'''))›
//│  where: 
//│ 		'a33_39''' <: α5_40'''
//│ 		α5_40''' <: 'a33_39'''
//│ foo: () -> 'a -> 'a
//│    = [Function: foo2]


:d
rec def foo x = foo x.a
//│ 1. Typing term (x,) => foo ((x).a,)
//│ | 1. Typing pattern x,
//│ | | 1. Typing pattern x
//│ | | 1. : x46'
//│ | 1. : (x46',)
//│ | 1. Typing term foo ((x).a,)
//│ | | 1. Typing term foo
//│ | | 1. : foo45'
//│ | | 1. Typing term (x).a
//│ | | | 1. Typing term x
//│ | | | 1. : x46'
//│ | | | CONSTRAIN x46' <! {a: a47'}
//│ | | |   where 
//│ | | | 1. C x46' <! {a: a47'}    (0)
//│ | | | | NEW x46' UB (1)
//│ | | 1. : a47'
//│ | | CONSTRAIN foo45' <! (a47' -> α48')
//│ | |   where 
//│ | | 1. C foo45' <! (a47' -> α48')    (0)
//│ | | | NEW foo45' UB (1)
//│ | 1. : α48'
//│ 1. : (x46' -> α48')
//│ CONSTRAIN (x46' -> α48') <! foo45'
//│   where 
//│ 		foo45' <: (a47' -> α48')
//│ 		x46' <: {a: a47'}
//│ 1. C (x46' -> α48') <! foo45'    (0)
//│ | NEW foo45' LB (1)
//│ | 1. C (x46' -> α48') <! (a47' -> α48')    (2)
//│ | | 1. C (a47',) <! (x46',)    (2)
//│ | | | 1. C a47' <! x46'    (3)
//│ | | | | NEW a47' UB (1)
//│ | | 1. C α48' <! α48'    (2)
//│ | | | Already a subtype by <:<
//│ UNSTASHING... (out)
//│ Analyze[+] foo45'#  ()
//│ | Analyze[+] (x46' -> α48')  ()
//│ | | Analyze[-] (x46',)  ()
//│ | | | Analyze[-] x46'  ()
//│ | | | | !! x46' Some(false) List({a: a47'})
//│ | | | | Analyze[-] {a: a47'}  (x46')
//│ | | | | | Analyze[-] a47'  ()
//│ | | | | | | !! a47' Some(false) List(x46')
//│ | | | | | | Analyze[-] x46'  (a47')
//│ | | Analyze[+] α48'  ()
//│ | | | !! α48' Some(true) List()
//│ Pos: HashSet(α48')
//│ Neg: HashSet(x46', a47')
//│ Rec: HashSet(x46')
//│ Unif: HashMap()
//│ Subst: HashMap()
//│ subst(foo45'#)
//│ | subst((x46' -> α48'))
//│ | | subst((x46',))
//│ | | | subst(x46')
//│ | | | | subst({a: a47'})
//│ | | | | | subst(a47')
//│ | | | | | | subst(x46')
//│ | | | | | | = x46_50'
//│ | | | | | = x46_50'
//│ | | | | = {a: x46_50'}
//│ | | | = x46_50'
//│ | | = (x46_50',)
//│ | | subst(α48')
//│ | | | subst(⊥)
//│ | | | = ⊥
//│ | | = ⊥
//│ | = (x46_50' -> ⊥)
//│ = foo45_49'#
//│ ⬤ Typed as: ‹∀ 0. foo45_49'#›
//│  where: 
//│ 		foo45_49'# := (x46_50' -> ⊥)
//│ 		x46_50' <: {a: x46_50'}
//│ foo: 'x -> nothing
//│   where
//│     'x <: {a: 'x}
//│    = [Function: foo3]




