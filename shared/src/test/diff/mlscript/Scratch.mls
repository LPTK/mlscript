

:d
def foo x = x.a
//│ 1. Typing term (x,) => (x).a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x8''
//│ | 2. : (x8'',)
//│ | 2. Typing term (x).a
//│ | | 2. Typing term x
//│ | | 2. : x8''
//│ | | CONSTRAIN x8'' <! {a: a9''}
//│ | |   where 
//│ | | 2. C x8'' <! {a: a9''}    (0)
//│ | | | NEW x8'' UB (2)
//│ | 2. : a9''
//│ | Inferred poly constr: (x8'' -> a9'')  —— where 
//│ 		x8'' <: {a: a9''}
//│ | Analyze[+] (x8'' -> a9'')  ()
//│ | | Analyze[-] (x8'',)  ()
//│ | | | Analyze[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analyze[-] {a: a9''}  (x8'')
//│ | | | | | Analyze[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analyze[+] a9''  ()
//│ | | | !! a9'' Some(true) List()
//│ | Pos: HashSet(a9'')
//│ | Neg: HashSet(x8'', a9'')
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: HashMap()
//│ | subst((x8'' -> a9''))
//│ | | subst((x8'',))
//│ | | | subst(x8'')
//│ | | | | subst({a: a9''})
//│ | | | | | subst(a9'')
//│ | | | | | = a9''
//│ | | | | = {a: a9''}
//│ | | | = {a: a9''}
//│ | | = ({a: a9''},)
//│ | | subst(a9'')
//│ | | = a9''
//│ | = ({a: a9''} -> a9'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. ({a: a9''} -> a9'')›
//│ UNSTASHING... (out)
//│ Analyze[+] ‹∀ 1. ({a: a9''} -> a9'')›  ()
//│ | Analyze[+] ({a: a9''} -> a9'')  ()
//│ | | Analyze[-] ({a: a9''},)  ()
//│ | | | Analyze[-] {a: a9''}  ()
//│ | | | | Analyze[-] a9''  ()
//│ | | | | | !! a9'' Some(false) List()
//│ | | Analyze[+] a9''  ()
//│ | | | !! a9'' Some(true) List()
//│ Pos: HashSet(a9'')
//│ Neg: HashSet(a9'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: HashMap()
//│ subst(‹∀ 1. ({a: a9''} -> a9'')›)
//│ | subst(({a: a9''} -> a9''))
//│ | | subst(({a: a9''},))
//│ | | | subst({a: a9''})
//│ | | | | subst(a9'')
//│ | | | | = a9''
//│ | | | = {a: a9''}
//│ | | = ({a: a9''},)
//│ | | subst(a9'')
//│ | | = a9''
//│ | = ({a: a9''} -> a9'')
//│ = ‹∀ 1. ({a: a9''} -> a9'')›
//│ ⬤ Typed as: ‹∀ 1. ({a: a9''} -> a9'')›
//│  where: 
//│ foo: {a: 'a} -> 'a
//│    = [Function: foo]

:d
def foo x = id x
//│ 1. Typing term (x,) => id (x,)
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x13''
//│ | 2. : (x13'',)
//│ | 2. Typing term id (x,)
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | 2. Typing term x
//│ | | 2. : x13''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! (x13'' -> α14'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! (x13'' -> α14'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_15'' -> α5_15'')
//│ | | |   where  
//│ | | | 2. C (α5_15'' -> α5_15'') <! (x13'' -> α14'')    (2)
//│ | | | | 2. C (x13'',) <! (α5_15'',)    (2)
//│ | | | | | 2. C x13'' <! α5_15''    (3)
//│ | | | | | | NEW x13'' UB (2)
//│ | | | | 2. C α5_15'' <! α14''    (2)
//│ | | | | | NEW α5_15'' UB (2)
//│ | 2. : α14''
//│ | Inferred poly constr: (x13'' -> α14'')  —— where 
//│ 		x13'' <: α5_15''
//│ 		α5_15'' <: α14''
//│ | Analyze[+] (x13'' -> α14'')  ()
//│ | | Analyze[-] (x13'',)  ()
//│ | | | Analyze[-] x13''  ()
//│ | | | | !! x13'' Some(false) List(α5_15'')
//│ | | | | Analyze[-] α5_15''  (x13'')
//│ | | | | | !! α5_15'' Some(false) List(α14'')
//│ | | | | | Analyze[-] α14''  (x13'' ~> α5_15'')
//│ | | | | | | !! α14'' Some(false) List()
//│ | | Analyze[+] α14''  ()
//│ | | | !! α14'' Some(true) List()
//│ | Pos: HashSet(α14'')
//│ | Neg: HashSet(x13'', α14'', α5_15'')
//│ | Rec: HashSet()
//│ | Unif: HashMap()
//│ | Subst: HashMap()
//│ | subst((x13'' -> α14''))
//│ | | subst((x13'',))
//│ | | | subst(x13'')
//│ | | | | subst(α5_15'')
//│ | | | | | subst(α14'')
//│ | | | | | = α14''
//│ | | | | = α14''
//│ | | | = α14''
//│ | | = (α14'',)
//│ | | subst(α14'')
//│ | | = α14''
//│ | = (α14'' -> α14'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (α14'' -> α14'')›
//│ UNSTASHING... (out)
//│ Analyze[+] ‹∀ 1. (α14'' -> α14'')›  ()
//│ | Analyze[+] (α14'' -> α14'')  ()
//│ | | Analyze[-] (α14'',)  ()
//│ | | | Analyze[-] α14''  ()
//│ | | | | !! α14'' Some(false) List()
//│ | | Analyze[+] α14''  ()
//│ | | | !! α14'' Some(true) List()
//│ Pos: HashSet(α14'')
//│ Neg: HashSet(α14'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: HashMap()
//│ subst(‹∀ 1. (α14'' -> α14'')›)
//│ | subst((α14'' -> α14''))
//│ | | subst((α14'',))
//│ | | | subst(α14'')
//│ | | | = α14''
//│ | | = (α14'',)
//│ | | subst(α14'')
//│ | | = α14''
//│ | = (α14'' -> α14'')
//│ = ‹∀ 1. (α14'' -> α14'')›
//│ ⬤ Typed as: ‹∀ 1. (α14'' -> α14'')›
//│  where: 
//│ foo: 'a -> 'a
//│    = [Function: foo1]

:d
def foo() = id : 'a -> 'a
//│ 1. Typing term () => id : 'a -> 'a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern 
//│ | 2. : ()
//│ | 2. Typing term id : 'a -> 'a
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | Typing type 'a -> 'a
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 2. type 'a -> 'a
//│ | | | | 2. type ('a,)
//│ | | | | | 2. type 'a
//│ | | | | | => 'a19''
//│ | | | | => ('a19'',)
//│ | | | | 2. type 'a
//│ | | | | => 'a19''
//│ | | | => ('a19'' -> 'a19'')
//│ | | => ('a19'' -> 'a19'') ——— 'a19''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! ('a19'' -> 'a19'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! ('a19'' -> 'a19'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_20'' -> α5_20'')
//│ | | |   where  
//│ | | | 2. C (α5_20'' -> α5_20'') <! ('a19'' -> 'a19'')    (2)
//│ | | | | 2. C ('a19'',) <! (α5_20'',)    (2)
//│ | | | | | 2. C 'a19'' <! α5_20''    (3)
//│ | | | | | | NEW 'a19'' UB (2)
//│ | | | | 2. C α5_20'' <! 'a19''    (2)
//│ | | | | | NEW α5_20'' UB (2)
//│ | 2. : ('a19'' -> 'a19'')
//│ | Inferred poly constr: (() -> ('a19'' -> 'a19''))  —— where 
//│ 		'a19'' <: α5_20''
//│ 		α5_20'' <: 'a19''
//│ | Analyze[+] (() -> ('a19'' -> 'a19''))  ()
//│ | | Analyze[-] ()  ()
//│ | | Analyze[+] ('a19'' -> 'a19'')  ()
//│ | | | Analyze[-] ('a19'',)  ()
//│ | | | | Analyze[-] 'a19''  ()
//│ | | | | | !! 'a19'' Some(false) List(α5_20'')
//│ | | | | | Analyze[-] α5_20''  ('a19'')
//│ | | | | | | !! α5_20'' Some(false) List('a19'')
//│ | | | | | | Analyze[-] 'a19''  ('a19'' ~> α5_20'')
//│ | | | Analyze[+] 'a19''  ()
//│ | | | | !! 'a19'' Some(true) List(α5_20'')
//│ | Pos: HashSet('a19'')
//│ | Neg: HashSet('a19'', α5_20'')
//│ | Rec: HashSet()
//│ | Unif: HashMap(α5_20'' -> 'a19'')
//│ | Subst: HashMap(α5_20'' -> 'a19'')
//│ | subst((() -> ('a19'' -> 'a19'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a19'' -> 'a19''))
//│ | | | subst(('a19'',))
//│ | | | | subst('a19'')
//│ | | | | | subst(α5_20'')
//│ | | | | | | subst('a19'')
//│ | | | | | | = 'a19_21''
//│ | | | | | = 'a19_21''
//│ | | | | = 'a19_21''
//│ | | | = ('a19_21'',)
//│ | | | subst('a19'')
//│ | | | = 'a19_21''
//│ | | = ('a19_21'' -> 'a19_21'')
//│ | = (() -> ('a19_21'' -> 'a19_21''))
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (() -> ('a19_21'' -> 'a19_21''))›
//│ UNSTASHING... (out)
//│ Analyze[+] ‹∀ 1. (() -> ('a19_21'' -> 'a19_21''))›  ()
//│ | Analyze[+] (() -> ('a19_21'' -> 'a19_21''))  ()
//│ | | Analyze[-] ()  ()
//│ | | Analyze[+] ('a19_21'' -> 'a19_21'')  ()
//│ | | | Analyze[-] ('a19_21'',)  ()
//│ | | | | Analyze[-] 'a19_21''  ()
//│ | | | | | !! 'a19_21'' Some(false) List('a19_21'')
//│ | | | | | Analyze[-] 'a19_21''  ('a19_21'')
//│ | | | Analyze[+] 'a19_21''  ()
//│ | | | | !! 'a19_21'' Some(true) List('a19_21'')
//│ Pos: HashSet('a19_21'')
//│ Neg: HashSet('a19_21'')
//│ Rec: HashSet()
//│ Unif: HashMap()
//│ Subst: HashMap()
//│ subst(‹∀ 1. (() -> ('a19_21'' -> 'a19_21''))›)
//│ | subst((() -> ('a19_21'' -> 'a19_21'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a19_21'' -> 'a19_21''))
//│ | | | subst(('a19_21'',))
//│ | | | | subst('a19_21'')
//│ | | | | | subst('a19_21'')
//│ | | | | | = 'a19_22''
//│ | | | | = 'a19_22''
//│ | | | = ('a19_22'',)
//│ | | | subst('a19_21'')
//│ | | | = 'a19_22''
//│ | | = ('a19_22'' -> 'a19_22'')
//│ | = (() -> ('a19_22'' -> 'a19_22''))
//│ = ‹∀ 1. (() -> ('a19_22'' -> 'a19_22''))›
//│ ⬤ Typed as: ‹∀ 1. (() -> ('a19_22'' -> 'a19_22''))›
//│  where: 
//│ 		'a19_22'' <: 'a19_22''
//│ foo: () -> 'a -> 'a
//│    = [Function: foo2]


:d
rec def foo x = foo x.a
//│ 1. Typing term (x,) => foo ((x).a,)
//│ | 1. Typing pattern x,
//│ | | 1. Typing pattern x
//│ | | 1. : x27'
//│ | 1. : (x27',)
//│ | 1. Typing term foo ((x).a,)
//│ | | 1. Typing term foo
//│ | | 1. : foo26'
//│ | | 1. Typing term (x).a
//│ | | | 1. Typing term x
//│ | | | 1. : x27'
//│ | | | CONSTRAIN x27' <! {a: a28'}
//│ | | |   where 
//│ | | | 1. C x27' <! {a: a28'}    (0)
//│ | | | | NEW x27' UB (1)
//│ | | 1. : a28'
//│ | | CONSTRAIN foo26' <! (a28' -> α29')
//│ | |   where 
//│ | | 1. C foo26' <! (a28' -> α29')    (0)
//│ | | | NEW foo26' UB (1)
//│ | 1. : α29'
//│ 1. : (x27' -> α29')
//│ CONSTRAIN (x27' -> α29') <! foo26'
//│   where 
//│ 		foo26' <: (a28' -> α29')
//│ 		x27' <: {a: a28'}
//│ 1. C (x27' -> α29') <! foo26'    (0)
//│ | NEW foo26' LB (1)
//│ | 1. C (x27' -> α29') <! (a28' -> α29')    (2)
//│ | | 1. C (a28',) <! (x27',)    (2)
//│ | | | 1. C a28' <! x27'    (3)
//│ | | | | NEW a28' UB (1)
//│ | | 1. C α29' <! α29'    (2)
//│ | | | Already a subtype by <:<
//│ UNSTASHING... (out)
//│ Analyze[+] foo26'#  ()
//│ | Analyze[+] (x27' -> α29')  ()
//│ | | Analyze[-] (x27',)  ()
//│ | | | Analyze[-] x27'  ()
//│ | | | | !! x27' Some(false) List({a: a28'})
//│ | | | | Analyze[-] {a: a28'}  (x27')
//│ | | | | | Analyze[-] a28'  ()
//│ | | | | | | !! a28' Some(false) List(x27')
//│ | | | | | | Analyze[-] x27'  (a28')
//│ | | Analyze[+] α29'  ()
//│ | | | !! α29' Some(true) List()
//│ Pos: HashSet(α29')
//│ Neg: HashSet(x27', a28')
//│ Rec: HashSet(x27')
//│ Unif: HashMap()
//│ Subst: HashMap()
//│ subst(foo26'#)
//│ | subst((x27' -> α29'))
//│ | | subst((x27',))
//│ | | | subst(x27')
//│ | | | | subst({a: a28'})
//│ | | | | | subst(a28')
//│ | | | | | | subst(x27')
//│ | | | | | | = x27_31'
//│ | | | | | = x27_31'
//│ | | | | = {a: x27_31'}
//│ | | | = x27_31'
//│ | | = (x27_31',)
//│ | | subst(α29')
//│ | | | subst(⊥)
//│ | | | = ⊥
//│ | | = ⊥
//│ | = (x27_31' -> ⊥)
//│ = foo26_30'#
//│ ⬤ Typed as: ‹∀ 0. foo26_30'#›
//│  where: 
//│ 		foo26_30'# := (x27_31' -> ⊥)
//│ 		x27_31' <: {a: x27_31'}
//│ foo: 'x -> nothing
//│   where
//│     'x <: {a: 'x}
//│    = [Function: foo3]




