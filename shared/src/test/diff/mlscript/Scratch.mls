

:d
def foo x = x.a
//│ 1. Typing term (x,) => (x).a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x8''
//│ | 2. : (x8'',)
//│ | 2. Typing term (x).a
//│ | | 2. Typing term x
//│ | | 2. : x8''
//│ | | CONSTRAIN x8'' <! {a: a9''}
//│ | |   where 
//│ | | 2. C x8'' <! {a: a9''}    (0)
//│ | | | NEW x8'' UB (2)
//│ | 2. : a9''
//│ | Inferred poly constr: (x8'' -> a9'')  —— where 
//│ 		x8'' <: {a: a9''}
//│ | Analyze[+] (x8'' -> a9'')  ()
//│ | | Analyze[-] (x8'',)  ()
//│ | | | Analyze[-] x8''  ()
//│ | | | | !! x8'' Some(false) List({a: a9''})
//│ | | | | Analyze[-] {a: a9''}  (x8'')
//│ | | | | | Analyze[-] a9''  ()
//│ | | | | | | !! a9'' Some(false) List()
//│ | | Analyze[+] a9''  ()
//│ | | | !! a9'' Some(true) List()
//│ | Pos: HashSet(a9'')
//│ | Neg: HashSet(x8'', a9'')
//│ | Rec: HashSet()
//│ | Subst: HashMap()
//│ | subst((x8'' -> a9''))
//│ | | subst((x8'',))
//│ | | | subst(x8'')
//│ | | | | subst({a: a9''})
//│ | | | | | subst(a9'')
//│ | | | | | = a9''
//│ | | | | = {a: a9''}
//│ | | | = x8_10''
//│ | | = (x8_10'',)
//│ | | subst(a9'')
//│ | | = a9''
//│ | = (x8_10'' -> a9'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x8_10'' -> a9'')›
//│ UNSTASHING... (out)
//│ ⬤ Typed as: ‹∀ 1. (x8_10'' -> a9'')›
//│  where: 
//│ 		x8_10'' <: {a: a9''}
//│ foo: {a: 'a} -> 'a
//│    = [Function: foo]

:d
def foo x = id x
//│ 1. Typing term (x,) => id (x,)
//│ | TYPING POLY LAM
//│ | 2. Typing pattern x,
//│ | | 2. Typing pattern x
//│ | | 2. : x15''
//│ | 2. : (x15'',)
//│ | 2. Typing term id (x,)
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | 2. Typing term x
//│ | | 2. : x15''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! (x15'' -> α16'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! (x15'' -> α16'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_17'' -> α5_17'')
//│ | | |   where  
//│ | | | 2. C (α5_17'' -> α5_17'') <! (x15'' -> α16'')    (2)
//│ | | | | 2. C (x15'',) <! (α5_17'',)    (2)
//│ | | | | | 2. C x15'' <! α5_17''    (3)
//│ | | | | | | NEW x15'' UB (2)
//│ | | | | 2. C α5_17'' <! α16''    (2)
//│ | | | | | NEW α5_17'' UB (2)
//│ | 2. : α16''
//│ | Inferred poly constr: (x15'' -> α16'')  —— where 
//│ 		x15'' <: α5_17''
//│ 		α5_17'' <: α16''
//│ | Analyze[+] (x15'' -> α16'')  ()
//│ | | Analyze[-] (x15'',)  ()
//│ | | | Analyze[-] x15''  ()
//│ | | | | !! x15'' Some(false) List(α5_17'')
//│ | | | | Analyze[-] α5_17''  (x15'')
//│ | | | | | !! α5_17'' Some(false) List(α16'')
//│ | | | | | Analyze[-] α16''  (x15'' ~> α5_17'')
//│ | | | | | | !! α16'' Some(false) List()
//│ | | Analyze[+] α16''  ()
//│ | | | !! α16'' Some(true) List()
//│ | Pos: HashSet(α16'')
//│ | Neg: HashSet(α16'', α5_17'', x15'')
//│ | Rec: HashSet()
//│ | Subst: HashMap()
//│ | subst((x15'' -> α16''))
//│ | | subst((x15'',))
//│ | | | subst(x15'')
//│ | | | | subst(α5_17'')
//│ | | | | | subst(α16'')
//│ | | | | | = α16''
//│ | | | | = α5_19''
//│ | | | = x15_18''
//│ | | = (x15_18'',)
//│ | | subst(α16'')
//│ | | = α16''
//│ | = (x15_18'' -> α16'')
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (x15_18'' -> α16'')›
//│ UNSTASHING... (out)
//│ ⬤ Typed as: ‹∀ 1. (x15_18'' -> α16'')›
//│  where: 
//│ 		x15_18'' <: α5_19''
//│ 		α5_19'' <: α16''
//│ foo: 'a -> 'a
//│    = [Function: foo1]

:d
def foo() = id : 'a -> 'a
//│ 1. Typing term () => id : 'a -> 'a
//│ | TYPING POLY LAM
//│ | 2. Typing pattern 
//│ | 2. : ()
//│ | 2. Typing term id : 'a -> 'a
//│ | | 2. Typing term id
//│ | | 2. : ‹∀ 0. (α5' -> α5')›
//│ | | Typing type 'a -> 'a
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 2. type 'a -> 'a
//│ | | | | 2. type ('a,)
//│ | | | | | 2. type 'a
//│ | | | | | => 'a25''
//│ | | | | => ('a25'',)
//│ | | | | 2. type 'a
//│ | | | | => 'a25''
//│ | | | => ('a25'' -> 'a25'')
//│ | | => ('a25'' -> 'a25'') ——— 'a25''
//│ | | CONSTRAIN ‹∀ 0. (α5' -> α5')› <! ('a25'' -> 'a25'')
//│ | |   where 
//│ | | 2. C ‹∀ 0. (α5' -> α5')› <! ('a25'' -> 'a25'')    (0)
//│ | | | could be distribbed: Set(α5')
//│ | | | cannot be distribbed: Set(α5')
//│ | | | INST [0]   ‹∀ 0. (α5' -> α5')›
//│ | | |   where  
//│ | | | TO [2] ~>  (α5_26'' -> α5_26'')
//│ | | |   where  
//│ | | | 2. C (α5_26'' -> α5_26'') <! ('a25'' -> 'a25'')    (2)
//│ | | | | 2. C ('a25'',) <! (α5_26'',)    (2)
//│ | | | | | 2. C 'a25'' <! α5_26''    (3)
//│ | | | | | | NEW 'a25'' UB (2)
//│ | | | | 2. C α5_26'' <! 'a25''    (2)
//│ | | | | | NEW α5_26'' UB (2)
//│ | 2. : ('a25'' -> 'a25'')
//│ | Inferred poly constr: (() -> ('a25'' -> 'a25''))  —— where 
//│ 		'a25'' <: α5_26''
//│ 		α5_26'' <: 'a25''
//│ | Analyze[+] (() -> ('a25'' -> 'a25''))  ()
//│ | | Analyze[-] ()  ()
//│ | | Analyze[+] ('a25'' -> 'a25'')  ()
//│ | | | Analyze[-] ('a25'',)  ()
//│ | | | | Analyze[-] 'a25''  ()
//│ | | | | | !! 'a25'' Some(false) List(α5_26'')
//│ | | | | | Analyze[-] α5_26''  ('a25'')
//│ | | | | | | !! α5_26'' Some(false) List('a25'')
//│ | | | | | | Analyze[-] 'a25''  ('a25'' ~> α5_26'')
//│ | | | Analyze[+] 'a25''  ()
//│ | | | | !! 'a25'' Some(true) List(α5_26'')
//│ | Pos: HashSet('a25'')
//│ | Neg: HashSet('a25'', α5_26'')
//│ | Rec: HashSet()
//│ | Subst: HashMap(α5_26'' -> 'a25'')
//│ | subst((() -> ('a25'' -> 'a25'')))
//│ | | subst(())
//│ | | = ()
//│ | | subst(('a25'' -> 'a25''))
//│ | | | subst(('a25'',))
//│ | | | | subst('a25'')
//│ | | | | | subst(α5_26'')
//│ | | | | | | subst('a25'')
//│ | | | | | | = 'a25_27''
//│ | | | | | = 'a25_27''
//│ | | | | = 'a25_27''
//│ | | | = ('a25_27'',)
//│ | | | subst('a25'')
//│ | | | = 'a25_27''
//│ | | = ('a25_27'' -> 'a25_27'')
//│ | = (() -> ('a25_27'' -> 'a25_27''))
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (() -> ('a25_27'' -> 'a25_27''))›
//│ UNSTASHING... (out)
//│ ⬤ Typed as: ‹∀ 1. (() -> ('a25_27'' -> 'a25_27''))›
//│  where: 
//│ 		'a25_27'' <: 'a25_27''
//│ foo: () -> 'a -> 'a
//│    = [Function: foo2]


