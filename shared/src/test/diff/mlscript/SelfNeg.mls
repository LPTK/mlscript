

def foo: ('a -> (~'a -> 'b) -> 'b) -> 'b
//│ foo: (nothing -> (anything -> 'b) -> 'b) -> 'b
//│    = <missing implementation>

def foo: ('a -> (~'a -> 'a) -> 'a) -> 'a -> 'a
//│ foo: ('a -> (~'a -> 'a) -> 'a) -> 'a -> 'a
//│    = <missing implementation>

:ns
foo
//│ res: forall 'a. ('a -> (~'a -> 'a) -> 'a) -> 'a -> 'a
//│    = <no result>
//│      foo is not implemented

:ns
r = foo (fun a -> fun f -> f a)
//│ r: forall 'b 'a 'c. 'b
//│   where
//│     'b :> 'a -> 'a
//│     'a <: in anything out nothing & 'c
//│     'c <: ~in anything out nothing
//│  = <no result>
//│    foo is not implemented

r
//│ res: 'a -> 'a
//│    = <no result>
//│      r and foo are not implemented

:e
r: anything -> nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.33: 	r: anything -> nothing
//│ ║        	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.33: 	r: anything -> nothing
//│ ║        	   ^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.33: 	r: anything -> nothing
//│ ╙──      	               ^^^^^^^
//│ res: anything -> nothing
//│    = <no result>
//│      r and foo are not implemented



def foo: ('a -> (~'a -> anything) -> anything) -> MutArray['a]
//│ foo: ('a -> (~'a -> anything) -> anything) -> MutArray['a]
//│    = <missing implementation>

:ns
r = foo (fun a -> fun f -> f a)
//│ r: forall 'b 'a. MutArray['a]
//│   where
//│     'a <: 'b
//│     'b <: ~'a
//│  = <no result>
//│    foo is not implemented

:e
r[0] <- "test"
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.63: 	r[0] <- "test"
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── string literal of type `"test"` does not match type `~"test"`
//│ ║  l.63: 	r[0] <- "test"
//│ ║        	        ^^^^^^
//│ ╟── but it flows into assigned array element with expected type `~"test"`
//│ ║  l.63: 	r[0] <- "test"
//│ ╙──      	^^^^
//│ = <no result>
//│   r and foo are not implemented

:e
r[0] + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.77: 	r[0] + 1
//│ ║        	^^^^^^
//│ ╟── possibly-undefined array access of type `undefined` is not an instance of type `int`
//│ ║  l.77: 	r[0] + 1
//│ ╙──      	^^^^
//│ res: error | int
//│    = <no result>
//│      r and foo are not implemented




:ns
def bar: (('a & ~'a) -> 'b) -> 'b
//│ bar: forall 'b. (nothing -> 'b) -> 'b
//│    = <missing implementation>

def bar: (('a & int & ~'a) -> 'b) -> 'b
//│ bar: ((int & 'a & ~'a) -> 'b) -> 'b
//│    = <missing implementation>

r = bar (fun x -> (x, x + 1, not x, x x))
//│ r: (int & 'a & ~'a, int, bool, nothing,)
//│  = <no result>
//│    bar is not implemented

:ns
r
//│ res: forall 'b 'c 'd 'a. 'd
//│   where
//│     'd :> ('b, int, bool, 'c,)
//│     'b :> 'a & int & ~'a
//│        <: 'b -> 'c & bool & int
//│     'a <: (bool | ~(int & ~'a)) & ('b -> 'c | ~(int & ~'a))
//│    = <no result>
//│      r and bar are not implemented

r._1 : nothing
//│ res: nothing
//│    = <no result>
//│      r and bar are not implemented

def impossible x = case x of {}
//│ impossible: nothing -> nothing
//│           = [Function: impossible]

bar impossible
//│ res: nothing
//│    = <no result>
//│      bar is not implemented


def k: 'a -> 'a
//│ k: 'a -> 'a
//│  = <missing implementation>

:e
k = impossible
//│ nothing -> nothing
//│   <:  k:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.136: 	k = impossible
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `'a` does not match type `nothing`
//│ ║  l.131: 	def k: 'a -> 'a
//│ ║         	       ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.121: 	def impossible x = case x of {}
//│ ╙──       	                        ^
//│  = [Function: impossible]


