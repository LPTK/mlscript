:NewDefs

let x = 1 : Int
//│ let x: Int
//│ x
//│   = 1

(1 : 1 | 2) as Int
//│ Int
//│ res
//│     = 1

let x = 1 as Int
//│ let x: Int
//│ x
//│   = 1

(1 as Int) + 1
//│ Int
//│ res
//│     = 2

1 + (2 as Int)
//│ Int
//│ res
//│     = 3

class Foo
class Bar() extends Foo
//│ class Foo {
//│   constructor()
//│ }
//│ class Bar() extends Foo

let f = Bar()
//│ let f: Bar
//│ f
//│   = Bar {}

f as Foo
//│ Foo
//│ res
//│     = Bar {}

:e
"hello" as Int
//│ ╔══[ERROR] Type mismatch in type upcast:
//│ ║  l.46: 	"hello" as Int
//│ ║        	^^^^^^^
//│ ╟── string literal of type `"hello"` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.46: 	"hello" as Int
//│ ╙──      	           ^^^
//│ Int
//│ res
//│     = 'hello'

:e
(new Foo) as Bar
//│ ╔══[ERROR] Type mismatch in type upcast:
//│ ║  l.59: 	(new Foo) as Bar
//│ ║        	^^^^^^^^^
//│ ╟── application of type `Foo` is not an instance of type `Bar`
//│ ║  l.59: 	(new Foo) as Bar
//│ ║        	 ^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.59: 	(new Foo) as Bar
//│ ╙──      	             ^^^
//│ Bar
//│ res
//│     = Foo {}
