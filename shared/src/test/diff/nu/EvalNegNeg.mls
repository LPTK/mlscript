:NewDefs


class Add<E>(lhs: E, rhs: E)
class Lit(n: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit) -> Int
//│ }


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??A & 'A) -> Int}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg[??A & 'A] | 'a) -> 'b}
//│   this: {eval: (??A0 & 'A0) -> 'b}
//│   fun eval: (Neg['A & (Neg['A0] | Object & ~#Neg | ~??A1)] | Object & 'a & ~#Neg) -> 'b
//│ }


module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang {
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> Int
//│ }
//│ where
//│   'A <: Neg['A & (Neg['A] | Object & 'a & ~#Neg | ~??A)] | Neg['A] & ~#Neg | Object & 'a & ~#Neg | ~??A0 & (Neg[Neg['A] | 'a & (Object & ~#Neg | ~#Neg & ~??A) | ~??A] | Object & ~#Neg) | ~??A1
//│   'a <: Add[Neg['A] | 'a & (Object & ~#Neg | ~#Neg & ~??E) | ~??E] | Lit | Neg[Neg['A] | 'a & (Object & ~#Neg | ~#Neg & ~??A0) | ~??A0]


fun mk(n) = if n is
  0 then Lit(3)
  1 then Neg(mk(n - 1))
  _ then Add(mk(n - 1), mk(n - 1))
//│ fun mk: forall 'E. (0 | 1 | Int & ~0 & ~1) -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval(mk(0))
//│ Int
//│ res
//│     = 3

TestLang.eval(mk(11))
//│ Int
//│ res
//│     = -3072



module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang {
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> Int
//│ }
//│ where
//│   'A <: Neg['A & (Neg['A] | Object & 'a & ~#Neg | ~??A)] | Neg['A] & ~#Neg | Object & 'a & ~#Neg | ~??A0 & (Neg[Neg['A] | 'a & (Object & ~#Neg | ~#Neg & ~??A) | ~??A] | Object & ~#Neg) | ~??A1
//│   'a <: Add[Neg['A] | 'a & (Object & ~#Neg | ~#Neg & ~??E) | ~??E] | Lit | Neg[Neg['A] | 'a & (Object & ~#Neg | ~#Neg & ~??A0) | ~??A0]


fun mk(n) = if n is
  0 then Lit(3)
  1 then Neg(mk(n - 1))
  _ then Add(mk(n - 1), mk(n - 1))
//│ fun mk: forall 'E. (0 | 1 | Int & ~0 & ~1) -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval(mk(0))
//│ Int
//│ res
//│     = 3

TestLang.eval(mk(11))
//│ Int
//│ res
//│     = -3072

