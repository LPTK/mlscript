:NewDefs


class Add<E>(lhs: E, rhs: E)
class Lit(n: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'a -> Int}
//│   fun eval: (Add['E] & {#lhs: 'a, #rhs: 'a} | Add['E] & ~#Add | Add['E] & ~{Add#E <: ??E & 'E} | Lit & {#n: Int} | Lit & {#n: Int} & ~{Add#E <: ??E & 'E} | Lit & ~#Lit | Lit & ~{Add#E <: ??E & 'E} & ~#Lit) -> Int
//│ }


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'c -> Int}
//│   fun eval: (Neg['A] & {#expr: 'c} | Neg['A] & ~#Neg | Neg['A] & ~{Neg#A <: ??A & 'A} | 'a & (Object & ~#Neg | Object & ~{Neg#A <: ??A & 'A} & ~#Neg)) -> (Int | 'b)
//│ }


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg[??A & 'A] & 'a | 'b) -> 'c}
//│   this: {eval: 'd -> 'c}
//│   fun eval: ('a & (Neg['A] & {
//│     #expr: Neg[anything] & {#expr: 'd} | Neg[anything] & ~{Neg#A = nothing} | Object & ~#Neg
//│   } | Neg['A] & ~#Neg | Neg['A] & ~{Neg#A <: ??A0 & 'A} | Object & 'b & ~#Neg)) -> 'c
//│ }


module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang {
//│   fun eval: 'a -> Int
//│ }
//│ where
//│   'a <: Neg['A & 'A0] & {#expr: 'a} & ~#Neg | Neg['A & 'A0] & {
//│     #expr: 'a & (Neg[anything] & {#expr: 'a} | Neg[anything] & ~{Neg#A = nothing} | Object & ~#Neg)
//│   } | Neg['A & 'A0] & ~{Neg#A <: ??A & ??A0 & 'A & 'A0} & ~#Neg | Neg['A & 'A0] & ~{Neg#A <: ??A1 & 'A} | Neg['A] & ~{Neg#A <: ??A0 & 'A} | (Add['E] & {#lhs: 'a, #rhs: 'a} | Add['E] & ~#Add | Add['E] & ~{Add#E <: ??E & 'E} | Lit & {#n: Int} | Lit & {#n: Int} & ~{Add#E <: ??E & 'E} | Lit & ~#Lit | Lit & ~{Add#E <: ??E & 'E} & ~#Lit) & (Object & ~#Neg | Object & ~{Neg#A <: ??A & ??A0 & 'A & 'A0} & ~#Neg)


fun mk(n) = if n is
  0 then Lit(3)
  1 then Neg(mk(n - 1))
  _ then Add(mk(n - 1), mk(n - 1))
//│ fun mk: forall 'E. (0 | 1 | Int & ~0 & ~1) -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval(mk(0))
//│ ╔══[ERROR] Subtyping constraint of the form `?eval <: ?a -> ?b` exceeded recursion depth limit (250)
//│ ║  l.70: 	TestLang.eval(mk(0))
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ error
//│ res
//│     = 3

TestLang.eval(mk(11))
//│ ╔══[ERROR] Subtyping constraint of the form `?eval <: ?a -> ?b` exceeded recursion depth limit (250)
//│ ║  l.79: 	TestLang.eval(mk(11))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ error
//│ res
//│     = -3072



module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang {
//│   fun eval: 'a -> Int
//│ }
//│ where
//│   'a <: Neg['A & 'A0] & {#expr: 'a} & ~#Neg | Neg['A & 'A0] & {
//│     #expr: 'a & (Neg[anything] & {#expr: 'a} | Neg[anything] & ~{Neg#A = nothing} | Object & ~#Neg)
//│   } | Neg['A & 'A0] & ~{Neg#A <: ??A & ??A0 & 'A & 'A0} & ~#Neg | Neg['A & 'A0] & ~{Neg#A <: ??A1 & 'A} | Neg['A] & ~{Neg#A <: ??A0 & 'A} | (Add['E] & {#lhs: 'a, #rhs: 'a} | Add['E] & ~#Add | Add['E] & ~{Add#E <: ??E & 'E} | Lit & {#n: Int} | Lit & {#n: Int} & ~{Add#E <: ??E & 'E} | Lit & ~#Lit | Lit & ~{Add#E <: ??E & 'E} & ~#Lit) & (Object & ~#Neg | Object & ~{Neg#A <: ??A & ??A0 & 'A & 'A0} & ~#Neg)


fun mk(n) = if n is
  0 then Lit(3)
  1 then Neg(mk(n - 1))
  _ then Add(mk(n - 1), mk(n - 1))
//│ fun mk: forall 'E. (0 | 1 | Int & ~0 & ~1) -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval(mk(0))
//│ ╔══[ERROR] Subtyping constraint of the form `?eval <: ?a -> ?b` exceeded recursion depth limit (250)
//│ ║  l.108: 	TestLang.eval(mk(0))
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ error
//│ res
//│     = 3

TestLang.eval(mk(11))
//│ ╔══[ERROR] Subtyping constraint of the form `?eval <: ?a -> ?b` exceeded recursion depth limit (250)
//│ ║  l.117: 	TestLang.eval(mk(11))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ error
//│ res
//│     = -3072

