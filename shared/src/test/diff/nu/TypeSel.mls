:NewDefs

:AllowParseErrors // TODO rm
:AllowTypeErrors // TODO rm


// * To support:
// *  - type parameter members
// *  - accessing type members in variables (for now, no need for path dependence)
// *  - Interpret absence of type parameters as some fresh type variables: `Foo` means `Foo['a]`

// * For the future:
// *  - Type refinement syntax, as in `Foo { A = Int }`
// *  - Support wildcard type argument syntax: `Foo[?]` (for what we currently write `Foo`)
// *  - `as` syntax for upcasting

class Foo[A](val a: A)
//│ class Foo[A](a: A)

:e
fun foo(f: Foo[Int]): f.A = f.a
//│ ╔══[ERROR] Type `Foo[Int]` does not contain member `A`
//│ ║  l.21: 	fun foo(f: Foo[Int]): f.A = f.a
//│ ╙──      	                       ^^
//│ ╔══[ERROR] Type mismatch in type selection:
//│ ║  l.21: 	fun foo(f: Foo[Int]): f.A = f.a
//│ ║        	                       ^^
//│ ╙── expression of type `Foo[Int]` does not have field 'A'
//│ fun foo: (f: Foo[Int]) -> (Int | error)

class Foo[type A] {
  fun f: A -> Int
  fun f(x) = 1
}
//│ class Foo[A] {
//│   constructor()
//│   fun f: A -> Int
//│ }


fun foo(f: Foo[Int], g: Foo[f.A], x: f.A) = g.f(f.f(x))
//│ fun foo: forall 'A. (f: Foo[Int], g: Foo['A], x: Int) -> Int
//│   where
//│     'A :> Int

class Bar(val f: Foo[Int])
//│ class Bar(f: Foo[Int])

fun foo(b: Bar): b.f.A = 1
//│ fun foo: (b: Bar) -> Int

fun bar(b: Bar) = b.f.f(1)
//│ fun bar: (b: Bar) -> Int

fun foo(b: Bar) =
  let f = id(b).f
  let g = x => f.f(x + 1)
  g(1) : f.A
//│ fun foo: (b: Bar) -> Int

foo(Bar(new Foo()))
//│ Int

// FIXME
fun foo(f: Foo, x: f.A) = f.f(x)
//│ ╔══[ERROR] Type error in application
//│ ║  l.65: 	fun foo(f: Foo, x: f.A) = f.f(x)
//│ ║        	                          ^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.65: 	fun foo(f: Foo, x: f.A) = f.f(x)
//│ ╙──      	                              ^
//│ fun foo: (f: Foo[nothing], x: anything) -> (Int | error)

fun foo(p, q, f: (p,q) -> Int) = f(p,q)
//│ fun foo: forall 'a 'b. ('a, 'b, f: ('a, 'b) -> Int) -> Int

foo(1, 0, (x, y) => x + y)
//│ Int

class Foo[type A](val a: A)
//│ class Foo[A](a: A)

fun foo(f: Foo[Int]): Int = f.a : f.A
//│ fun foo: (f: Foo[Int]) -> Int

fun foo[T](f: Foo[T]): T = f.a : f.A
//│ fun foo: forall 'T. (f: Foo['T]) -> 'T

// raw type example
// TODO support
fun foo(f: Foo): Int = f.a : f.A
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.91: 	fun foo(f: Foo): Int = f.a : f.A
//│ ║        	                       ^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.91: 	fun foo(f: Foo): Int = f.a : f.A
//│ ║        	                       ^^^
//│ ╟── into type `A`
//│ ║  l.80: 	class Foo[type A](val a: A)
//│ ╙──      	               ^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.91: 	fun foo(f: Foo): Int = f.a : f.A
//│ ║        	                       ^^^
//│ ╟── type `A` is not an instance of type `Int`
//│ ║  l.80: 	class Foo[type A](val a: A)
//│ ║        	               ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.91: 	fun foo(f: Foo): Int = f.a : f.A
//│ ╙──      	                 ^^^
//│ fun foo: (f: Foo[anything]) -> Int

// FIXME
fun foo(f: Foo) = f.a : f.A
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.113: 	fun foo(f: Foo) = f.a : f.A
//│ ║         	                  ^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.113: 	fun foo(f: Foo) = f.a : f.A
//│ ║         	                  ^^^
//│ ╟── into type `A`
//│ ║  l.80: 	class Foo[type A](val a: A)
//│ ╙──      	               ^
//│ fun foo: (f: Foo[anything]) -> nothing

fun foo(f: Foo['a]): Int = f.a : f.A
//│ fun foo: forall 'a. (f: Foo['a]) -> Int
//│   where
//│     'a <: Int

// TODO reject for now
fun foo(f: Foo[?]): Int = f.a : f.A
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.131: 	fun foo(f: Foo[?]): Int = f.a : f.A
//│ ╙──       	               ^
//│ ╔══[ERROR] Wrong number of type arguments – expected 1, found 0
//│ ║  l.131: 	fun foo(f: Foo[?]): Int = f.a : f.A
//│ ╙──       	           ^^^^^^
//│ fun foo: forall 'a. (f: Foo['a]) -> Int
//│   where
//│     'a <: Int

// * TODO infer (f: 'f) -> 'b where 'f <: { a: 'a;; A: 'a..'b }, 'a <: 'b
fun foo(f) = f.a : f.A
//│ fun foo: forall 'A. {A <: 'A, a: 'A} -> 'A

fun foo(f): Int = f.a : f.A
//│ fun foo: {A <: Int, a: Int} -> Int

foo(Foo(1))
//│ Int

:e
foo(Foo(true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.153: 	foo(Foo(true))
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `Int`
//│ ║  l.153: 	foo(Foo(true))
//│ ║         	        ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.146: 	fun foo(f): Int = f.a : f.A
//│ ║         	            ^^^
//│ ╟── from type selection:
//│ ║  l.146: 	fun foo(f): Int = f.a : f.A
//│ ╙──       	                         ^^
//│ Int | error

class Foo[type A]: Bar | Baz
module Bar extends Foo[Int]
module Baz extends Foo[Str]
//│ class Foo[A]: Bar | Baz {
//│   constructor()
//│ }
//│ module Bar extends Foo
//│ module Baz extends Foo

123 : Bar.A
//│ Int

:e
"bad": Bar.A
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.181: 	"bad": Bar.A
//│ ║         	^^^^^
//│ ╟── string literal of type `"bad"` is not an instance of type `Int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.169: 	module Bar extends Foo[Int]
//│ ║         	                       ^^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.168: 	class Foo[type A]: Bar | Baz
//│ ╙──       	               ^
//│ Int

fun foo(f, x) = x : f.A
//│ fun foo: forall 'A. ({A <: 'A}, 'A) -> 'A

foo(Bar, 123)
//│ Int

fun test(f) = if f is
  Bar then 123 : f.A
//│ fun test: Bar -> Int

// FIXME
fun test(f) = if f is
  Bar then 123 : f.A
  Baz then "hello" : f.A
//│ fun test: (Bar | Baz) -> (Int | Str)

// FIXME
[test(Bar), test(Baz)]
//│ [Int | Str, Int | Str]

fun test(f: Foo['a]) = if f is Bar then 123 : f.A else error
//│ fun test: forall 'a. (f: Foo['a]) -> Int

fun test(f: Foo[Int]) = if f is Bar then 123 : f.A else error
//│ fun test: (f: Foo[Int]) -> Int

// FIXME
fun test(f: Foo) = if f is Bar then 123 : f.A else error
//│ fun test: (f: Foo[in anything out nothing]) -> Int

// FIXME
fun test(f: Foo[?]) = if f is Bar then 123 : f.A else error
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.225: 	fun test(f: Foo[?]) = if f is Bar then 123 : f.A else error
//│ ╙──       	                ^
//│ ╔══[ERROR] Wrong number of type arguments – expected 1, found 0
//│ ║  l.225: 	fun test(f: Foo[?]) = if f is Bar then 123 : f.A else error
//│ ╙──       	            ^^^^^^
//│ fun test: forall 'a. (f: Foo['a]) -> Int

// FIXME
fun test(f: Foo) = if f is
  Bar then 123 : f.A
  Baz then "hello" : f.A
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.235: 	fun test(f: Foo) = if f is
//│ ║         	                      ^^^^
//│ ║  l.236: 	  Bar then 123 : f.A
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	  Baz then "hello" : f.A
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Foo[?]` does not match type `Bar | Baz`
//│ ║  l.235: 	fun test(f: Foo) = if f is
//│ ║         	            ^^^
//│ ╟── but it flows into reference with expected type `Bar | Baz`
//│ ║  l.235: 	fun test(f: Foo) = if f is
//│ ╙──       	                      ^
//│ fun test: (f: Foo[in anything out nothing]) -> (Int | Str)

// FIXME
[test(Bar), test(Baz)]
//│ [Int | Str, Int | Str]

// FIXME
fun test[T](f: Foo[T]): T = if f is
  Bar then 123 : f.A
  Baz then "hello" : f.A
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.258: 	fun test[T](f: Foo[T]): T = if f is
//│ ║         	                               ^^^^
//│ ║  l.259: 	  Bar then 123 : f.A
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.260: 	  Baz then "hello" : f.A
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Int` does not match type `T`
//│ ║  l.169: 	module Bar extends Foo[Int]
//│ ║         	                       ^^^
//│ ╟── Note: constraint arises from method type parameter:
//│ ║  l.258: 	fun test[T](f: Foo[T]): T = if f is
//│ ╙──       	         ^
//│ fun test: forall 'T. (f: Foo['T]) -> 'T

:e
class Foo[type A]
class Bar[type A] extends Foo[A]
//│ ╔══[ERROR] Inherited parameter named `A` is not virtual and cannot be overridden
//│ ║  l.278: 	class Bar[type A] extends Foo[A]
//│ ║         	               ^
//│ ╟── Originally declared here:
//│ ║  l.277: 	class Foo[type A]
//│ ╙──       	               ^
//│ class Foo[A] {
//│   constructor()
//│ }
//│ class Bar[A] extends Foo {
//│   constructor()
//│ }

class Foo[type A]
//│ class Foo[A] {
//│   constructor()
//│ }

:e
class Bar[type A] extends Foo[A -> A]
//│ ╔══[ERROR] Inherited parameter named `A` is not virtual and cannot be overridden
//│ ║  l.298: 	class Bar[type A] extends Foo[A -> A]
//│ ║         	               ^
//│ ╟── Originally declared here:
//│ ║  l.292: 	class Foo[type A]
//│ ╙──       	               ^
//│ class Bar[A] extends Foo {
//│   constructor()
//│ }

:e
class Bar[type A] extends Foo[Int]
//│ ╔══[ERROR] Inherited parameter named `A` is not virtual and cannot be overridden
//│ ║  l.310: 	class Bar[type A] extends Foo[Int]
//│ ║         	               ^
//│ ╟── Originally declared here:
//│ ║  l.292: 	class Foo[type A]
//│ ╙──       	               ^
//│ class Bar[A] extends Foo {
//│   constructor()
//│ }




class Foo[A]
//│ class Foo[A] {
//│   constructor()
//│ }

// FIXME
// Would be nice:
fun foo(x: Foo['a], y) = y : x.A  // interpreted as `y : x.Foo#A`
//│ ╔══[ERROR] Type `Foo['a]` does not contain member `A`
//│ ║  l.331: 	fun foo(x: Foo['a], y) = y : x.A  // interpreted as `y : x.Foo#A`
//│ ╙──       	                              ^^
//│ ╔══[ERROR] Type mismatch in type selection:
//│ ║  l.331: 	fun foo(x: Foo['a], y) = y : x.A  // interpreted as `y : x.Foo#A`
//│ ║         	                              ^^
//│ ╙── expression of type `Foo['a]` does not have field 'A'
//│ fun foo: forall 'a 'A. (x: Foo['a], 'A) -> (error | 'A)

fun foo(x, y) = y : x.A
//│ fun foo: forall 'A. ({A <: 'A}, 'A) -> 'A

// FIXME
fun bar(f: Foo['a], y) = foo(f, y)
//│ ╔══[ERROR] Type `Foo['a]` does not contain member `A`
//│ ║  l.341: 	fun foo(x, y) = y : x.A
//│ ╙──       	                     ^^
//│ fun bar: forall 'b 'a. (f: Foo['a], 'b) -> (error | 'b)

class Bar(val A: Int)
//│ class Bar(A: Int)

class C[type A]: C1 | C2
class C1(val s: Bool) extends C[Bool]
class C2(val i: Int) extends C[Int]
//│ class C[A]: C1 | C2 {
//│   constructor()
//│ }
//│ class C1(s: Bool) extends C
//│ class C2(i: Int) extends C

let c1 = C1(true)
let c2 = C2(1)
//│ let c1: C1
//│ let c2: C2

c1.s : c1.A
//│ Bool

c2.i: c2.A
//│ Int

1 as Int
//│ Int
