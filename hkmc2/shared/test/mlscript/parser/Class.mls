:global
:parseOnly


:pe
class
//│ ╔══[PARSE ERROR] Expected expression after type declaration start; found end of input instead
//│ ║  l.6: 	class
//│ ╙──     	     ^
//│ Parsed:
//│ 	Error()

class Foo
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),None,None)

:pe
class Foo extends
//│ ╔══[PARSE ERROR] Expected expression after extension clause; found end of input instead
//│ ║  l.18: 	class Foo extends
//│ ╙──      	                 ^
//│ Parsed:
//│ 	Error()

class Foo extends Bar
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),Some(Ident(Bar)),None)

:pe
class Foo extends Bar with
//│ ╔══[PARSE ERROR] Expected indented block after type declaration body; found end of input instead
//│ ║  l.30: 	class Foo extends Bar with
//│ ╙──      	                          ^
//│ Parsed:
//│ 	Error()

:fixme
class Foo extends Bar with val x
//│ ╔══[PARSE ERROR] Expected indented block after type declaration body; found 'val' keyword instead
//│ ║  l.38: 	class Foo extends Bar with val x
//│ ╙──      	                           ^^^
//│ ╔══[PARSE ERROR] Expected end of input; found 'val' keyword instead
//│ ║  l.38: 	class Foo extends Bar with val x
//│ ╙──      	                           ^^^
//│ Parsed:
//│ 	Error()

class Foo extends Bar with
  val x: Int
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),Some(Ident(Bar)),Some(Block(List(TermDef(None,Some(Ident(x)),Some(Ident(Int)),None)))))

class Foo with
  val x: Int
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),None,Some(Block(List(TermDef(None,Some(Ident(x)),Some(Ident(Int)),None)))))


:pe
with
//│ ╔══[PARSE ERROR] Expected 'let' keyword, 'if' keyword, 'fun' keyword, 'val' keyword, 'type' keyword, 'class' keyword, 'trait' keyword, 'module' keyword, 'abstract' keyword, 'mut' keyword, 'virtual' keyword, 'override' keyword, 'declare' keyword, 'public' keyword, 'private' keyword, or expression after start of statement; found 'with' keyword instead
//│ ║  l.60: 	with
//│ ╙──      	^^^^
//│ Parsed:
//│ 	Error()


class
  Foo
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),None,None)

class
  Foo
  Bar
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),None,None)
//│ 	TypeDecl(Ident(Bar),None,None)

class
  Foo extends Bar
  Bar with
    x
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),Some(Ident(Bar)),None)
//│ 	TypeDecl(Ident(Bar),None,Some(Block(List(Ident(x)))))


:pe
class
Foo
//│ ╔══[PARSE ERROR] Expected expression after type declaration start; found newline instead
//│ ║  l.91: 	Foo
//│ ╙──      	   ^
//│ Parsed:
//│ 	Error()
//│ 	Ident(Foo)

:fixme
class
  Foo
extends Bar
//│ ╔══[PARSE ERROR] Expected end of input; found newline instead
//│ ║  l.101: 	  Foo
//│ ║         	     ^
//│ ║  l.102: 	extends Bar
//│ ╙──       	
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),None,None)

class
  Foo
  extends Bar
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),Some(Ident(Bar)),None)

class
  Foo
  extends Bar
  Bar
  extends Baz
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),Some(Ident(Bar)),None)
//│ 	TypeDecl(Ident(Bar),Some(Ident(Baz)),None)

class Foo
extends Bar
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),Some(Ident(Bar)),None)

class Foo
extends
  Bar
//│ Parsed:
//│ 	TypeDecl(Ident(Foo),Some(Ident(Bar)),None)


