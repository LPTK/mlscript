// Else.mls
// ========
// Examine how the `else` keyword is parsed.

:global
:pt
:parseOnly

fun f(x, y, z) = if x then y
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of InfixApp:
//│     lhs = Ident of "x"
//│     kw = keyword 'then'
//│     rhs = Ident of "y"

fun f(x, y, z) = if x then y else z
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of Block of Ls of 
//│     InfixApp:
//│       lhs = Ident of "x"
//│       kw = keyword 'then'
//│       rhs = Ident of "y"
//│     Modified:
//│       modifier = keyword 'else'
//│       body = Ident of "z"

:pe
fun f(x, y, z) = if x
                 then y
                 else z
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword here
//│ ║  l.47: 	                 then y
//│ ╙──      	                 ^^^^
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of Ident of "x"

:pe
fun f(x, y, z) = if x then y
  else z
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.66: 	  else z
//│ ╙──      	  ^^^^
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of InfixApp:
//│     lhs = Ident of "x"
//│     kw = keyword 'then'
//│     rhs = Ident of "y"

fun f(x, y, z) = if
  x then y
  else z
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of Block of Ls of 
//│     InfixApp:
//│       lhs = Ident of "x"
//│       kw = keyword 'then'
//│       rhs = Ident of "y"
//│     Modified:
//│       modifier = keyword 'else'
//│       body = Ident of "z"

fun f(x, y, z) =
  if x then
    y
  else
    z
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of Block of Ls of 
//│     InfixApp:
//│       lhs = Ident of "x"
//│       kw = keyword 'then'
//│       rhs = Block of Ls of 
//│         Ident of "y"
//│     Modified:
//│       modifier = keyword 'else'
//│       body = Ident of "z"

fun f(x, y, z) =
  if x then y
  else z
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of Block of Ls of 
//│     InfixApp:
//│       lhs = Ident of "x"
//│       kw = keyword 'then'
//│       rhs = Ident of "y"
//│     Modified:
//│       modifier = keyword 'else'
//│       body = Ident of "z"

:pe
fun f(x, y, z) =
  if x
  then y
  else z
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword here
//│ ║  l.157: 	  then y
//│ ╙──       	  ^^^^
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of Ident of "x"

:pe
fun f(x, y, z) =
  if x
    then y
    else z
//│ ╔══[PARSE ERROR] Unexpected 'then' keyword here
//│ ║  l.177: 	    then y
//│ ╙──       	    ^^^^
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│       Ident of "y"
//│       Ident of "z"
//│   rhs = S of If of Ident of "x"

:fixme
fun f() =
  if
    x then y else z
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.197: 	    x then y else z
//│ ╙──       	             ^^^^
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   symName = N
//│   alphaName = S of App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Nil
//│   rhs = S of If of Block of Ls of 
//│     InfixApp:
//│       lhs = Ident of "x"
//│       kw = keyword 'then'
//│       rhs = Ident of "y"
