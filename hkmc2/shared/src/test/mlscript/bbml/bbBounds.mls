:global
:bbml


(x => x + 1): [A extends Int] -> A -> Int
//│ Type: (Int) ->{⊥} Int


(x => x): [A restricts Int] -> A -> A
//│ Type: forall α1_2: (α1_2) ->{⊥} α1_2
//│ Where:
//│   Int <: α1_2


(x => x - 1): [A extends Int restricts Int] -> A -> A
//│ Type: forall α2_2: (α2_2) ->{⊥} α2_2
//│ Where:
//│   Int <: α2_2
//│   α2_2 <: Int

fun iid: [A extends Int] -> A -> A
fun iid(x) = x
//│ Type: ⊤

iid
//│ Type: forall α4_2: (α4_2) ->{⊥} α4_2
//│ Where:
//│   α4_2 <: Int

:e
iid("42")
//│ ╔══[ERROR] Type error in string literal with expected type α5_1
//│ ║  l.31: 	iid("42")
//│ ║        	    ^^^^
//│ ╟── because: cannot constrain  Str  <:  α5_1
//│ ╟── because: cannot constrain  Str  <:  α5_1
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: Str


iid(42)
//│ Type: Int

class Foo[A]
//│ Type: ⊤

fun foo: [A extends Foo[in Nothing out Any] restricts Foo[in Num]] -> A -> A
foo
//│ Type: forall α7_2: (α7_2) ->{⊥} α7_2
//│ Where:
//│   Foo[in Num] <: α7_2
//│   α7_2 <: Foo[?]

fun bar: Foo[in Num out Int]
//│ Type: ⊤

foo(bar)
//│ Type: Foo[in Num out Int] ∨ Foo[in Num]

:e
fun badfoo: [A extends Str restricts Int] -> A -> A
//│ ╔══[ERROR] Type error in block
//│ ║  l.61: 	fun badfoo: [A extends Str restricts Int] -> A -> A
//│ ║        	                                             ^^^^^^
//│ ╙── because: cannot constrain  Int  <:  Str
//│ Type: ⊤
