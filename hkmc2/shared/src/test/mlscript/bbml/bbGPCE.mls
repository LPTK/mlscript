:global
:bbml

:fixme
fun power: [C] -> CodeBase[out Num, out C, out Any] -> Int -> CodeBase[out Num, out C, out Any]
fun power(x) = case
  0 then `1.0
  n then x `*. power(x)(n - 1)
power
//│ /!!!\ Uncaught error: scala.MatchError: Cons(Branch(Ref(scrut@34),LitPat(BoolLit(true)),Else(Quoted(Lit(DecLit(1.0))))),Else(Quoted(App(Ref(*.),Tup(List(Fld(‹›,Unquoted(Ref(x@28)),None), Fld(‹›,Unquoted(App(App(Ref(power),Tup(List(Fld(‹›,Ref(x@28),None)))),Tup(List(Fld(‹›,App(Ref(-),Tup(List(Fld(‹›,Ref(n@29),None), Fld(‹›,Lit(IntLit(1)),None)))),None))))),None))))))) (of class hkmc2.semantics.Split$Cons)


fun id: [A] -> A -> A
fun id(x) = x
//│ Type: ⊤

run(x `=> id(x) `* x)
//│ Type: Int -> Int

:fixme
fun assertNotZero: [C] -> CodeBase[out Num, out C, out Any] -> CodeBase[out Num, out C, out Any]
fun assertNotZero(x) =
  `if (x `== `0.0) then `error else x
let checkedDiv = x `=> y `=> x `/. (assertNotZero(y))
run(checkedDiv)
//│ ╔══[ERROR] Cannot quote If(Let(scrut@58,Unquoted(Quoted(App(Ref(==),Tup(List(Fld(‹›,Unquoted(Ref(x@57)),None), Fld(‹›,Unquoted(Quoted(Lit(DecLit(0.0)))),None)))))),Cons(Branch(Ref(scrut@58),LitPat(BoolLit(true)),Else(Unquoted(Quoted(Ref(error))))),Else(Unquoted(Ref(x@57))))))
//│ ╙──
//│ Type: Num -> (Num -> Num)


:todo // :fixme
fun show: [T] -> CodeBase[out T, out Any, out Any] -> Str = s => "debug"
show
//│ Type: forall α46_2: (CodeBase[?, ?, ?]) ->{⊥} Str


fun inc(dbg) =
  x `=> let c = x `+ `1 in let t = dbg(c) in c
inc
//│ Type: (CodeBase[out Int, ?, ?] ->{α62_1} ⊤) ->{α62_1} CodeBase[out Int -> Int, ⊥, ?]

inc(c => log(show(c)))
//│ Type: CodeBase[out Int -> Int, ⊥, ?]

:fixme
fun body: [T, C] -> (CodeBase[out Int, out T, out Any], CodeBase[out Int, out C, out Any]) -> Int -> CodeBase[out Int, out T | C, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then body(y, x `+ y)(n - 1)
fun gib_naive(n) =
  (x, y) `=> body(x, y)(n)
let gn5 = run(gib_naive(5))
//│ /!!!\ Uncaught error: scala.MatchError: Cons(Branch(Ref(scrut@98),LitPat(BoolLit(true)),Else(Ref(x@89))),Let(scrut@96,App(Ref(==),Tup(List(Fld(‹›,Ref(n@91),None), Fld(‹›,Lit(IntLit(1)),None)))),Cons(Branch(Ref(scrut@96),LitPat(BoolLit(true)),Else(Ref(y@90))),Else(App(App(Ref(body),Tup(List(Fld(‹›,Ref(y@90),None), Fld(‹›,Quoted(App(Ref(+),Tup(List(Fld(‹›,Unquoted(Ref(x@89)),None), Fld(‹›,Unquoted(Ref(y@90)),None))))),None)))),Tup(List(Fld(‹›,App(Ref(-),Tup(List(Fld(‹›,Ref(n@91),None), Fld(‹›,Lit(IntLit(1)),None)))),None)))))))) (of class hkmc2.semantics.Split$Cons)

fun bind(rhs, k) = `let x = rhs `in k(x)
bind
//│ Type: (CodeBase[out α86_1, out α87_1, ?], CodeBase[in α91_1 out α91_1 ∨ α86_1, ?, ⊥] ->{α94_1} CodeBase[out α97_1, out α98_1, ?]) ->{α94_1} CodeBase[out α97_1, out α87_1 ∨ α98_1, ?]

:e
:fixme
fun body: [G] -> (CodeBase[out Int, out G, out Any], CodeBase[out Int, out G, out Any]) -> Int -> CodeBase[out Int, out G, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out C, out Any]
//│ /!!!\ Uncaught error: scala.MatchError: Cons(Branch(Ref(scrut@133),LitPat(BoolLit(true)),Else(Ref(x@121))),Let(scrut@131,App(Ref(==),Tup(List(Fld(‹›,Ref(n@123),None), Fld(‹›,Lit(IntLit(1)),None)))),Cons(Branch(Ref(scrut@131),LitPat(BoolLit(true)),Else(Ref(y@122))),Else(App(Ref(bind),Tup(List(Fld(‹›,Quoted(App(Ref(+),Tup(List(Fld(‹›,Unquoted(Ref(x@121)),None), Fld(‹›,Unquoted(Ref(y@122)),None))))),None), Fld(‹›,Lam(List(Param(‹›,z@126,None)),App(App(Ref(body),Tup(List(Fld(‹›,Ref(y@122),None), Fld(‹›,Ref(z@126),None)))),Tup(List(Fld(‹›,App(Ref(-),Tup(List(Fld(‹›,Ref(n@123),None), Fld(‹›,Lit(IntLit(1)),None)))),None))))),Some(Forall(List(C@130),FunTy(Tup(List(Fld(‹›,TyApp(Ref(class:CodeBase),List(WildcardTy(None,Some(Ref(class:Int))), WildcardTy(None,Some(Ref(C@130))), WildcardTy(None,Some(Ref(class:Any))))),None))),TyApp(Ref(class:CodeBase),List(WildcardTy(None,Some(Ref(C@130))), WildcardTy(None,Some(Ref(class:Any))))),None))))))))))) (of class hkmc2.semantics.Split$Cons)

fun bind: [G] -> (CodeBase[out Int, out G, out Any], [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out Int, out C | G, out Any]) -> CodeBase[out Int, out G, out Any]
fun bind(rhs, k) = `let x = rhs `in k(x)
bind
//│ Type: forall α111_2: (CodeBase[out Int, out α111_2, ?], forall α112_3: (CodeBase[out Int, out α112_3, ?]) ->{⊥} CodeBase[out Int, out α112_3 ∨ α111_2, ?]) ->{⊥} CodeBase[out Int, out α111_2, ?]


:fixme
fun body: [G] -> (CodeBase[out Int, out G, out Any], CodeBase[out Int, out G, out Any]) -> Int -> CodeBase[out Int, out G, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out Int, out C, out Any]
body
//│ /!!!\ Uncaught error: scala.MatchError: Cons(Branch(Ref(scrut@163),LitPat(BoolLit(true)),Else(Ref(x@151))),Let(scrut@161,App(Ref(==),Tup(List(Fld(‹›,Ref(n@153),None), Fld(‹›,Lit(IntLit(1)),None)))),Cons(Branch(Ref(scrut@161),LitPat(BoolLit(true)),Else(Ref(y@152))),Else(App(Ref(bind),Tup(List(Fld(‹›,Quoted(App(Ref(+),Tup(List(Fld(‹›,Unquoted(Ref(x@151)),None), Fld(‹›,Unquoted(Ref(y@152)),None))))),None), Fld(‹›,Lam(List(Param(‹›,z@156,None)),App(App(Ref(body),Tup(List(Fld(‹›,Ref(y@152),None), Fld(‹›,Ref(z@156),None)))),Tup(List(Fld(‹›,App(Ref(-),Tup(List(Fld(‹›,Ref(n@153),None), Fld(‹›,Lit(IntLit(1)),None)))),None))))),Some(Forall(List(C@160),FunTy(Tup(List(Fld(‹›,TyApp(Ref(class:CodeBase),List(WildcardTy(None,Some(Ref(class:Int))), WildcardTy(None,Some(Ref(C@160))), WildcardTy(None,Some(Ref(class:Any))))),None))),TyApp(Ref(class:CodeBase),List(WildcardTy(None,Some(Ref(class:Int))), WildcardTy(None,Some(Ref(C@160))), WildcardTy(None,Some(Ref(class:Any))))),None))))))))))) (of class hkmc2.semantics.Split$Cons)

fun gib(n) = (x, y) `=> body(x, y)(n)
let g5 = run(gib(5))
g5
//│ Type: (Int, Int) -> Int
