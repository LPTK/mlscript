:global
:bbml

fun power: [C] -> CodeBase[out Num, out C, out Any] -> Int -> CodeBase[out Num, out C, out Any]
fun power(x) = case
  0 then `1.0
  n then x `*. power(x)(n - 1)
power
//│ Type: forall α1_2: (CodeBase[out Num, out α1_2, ?]) ->{⊥} (Int) ->{⊥} CodeBase[out Num, out α1_2, ?]


fun id: [A] -> A -> A
fun id(x) = x
//│ Type: ⊤

run(x `=> id(x) `* x)
//│ Type: Int -> Int

fun assertNotZero: [C] -> CodeBase[out Num, out C, out Any] -> CodeBase[out Num, out C, out Any]
fun assertNotZero(x) =
  `if (x `== `0.0) then `error else x
let checkedDiv = x `=> y `=> x `/. (assertNotZero(y))
run(checkedDiv)
//│ Type: Num -> (Num -> Num)


fun show: [T] -> CodeBase[out T, out Any, out Any] -> Str = s => "debug"
show
//│ Type: (CodeBase[?, ?, ?]) ->{⊥} Str


fun inc(dbg) =
  x `=> let c = x `+ `1 in let t = dbg(c) in c
inc
//│ Type: forall α79_2: (CodeBase[out Int, ?, ?] ->{α79_2} ⊤) ->{α79_2} CodeBase[out Int -> Int, ⊥, ?]

inc(c => log(show(c)))
//│ Type: CodeBase[out Int -> Int, ⊥, ?]

fun body: [T, C] -> (CodeBase[out Int, out T, out Any], CodeBase[out Int, out C, out Any]) -> Int -> CodeBase[out Int, out T | C, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then body(y, x `+ y)(n - 1)
fun gib_naive(n) =
  (x, y) `=> body(x, y)(n)
let gn5 = run(gib_naive(5))
//│ Type: ⊤

fun bind(rhs, k) = `let x = rhs `in k(x)
bind
//│ Type: forall α147_2, α148_2, α152_2, α155_2, α158_2, α159_2: (CodeBase[out α147_2, out α148_2, ?], CodeBase[in α152_2 out α152_2 ∨ α147_2, ?, ⊥] ->{α155_2} CodeBase[out α158_2, out α159_2, ?]) ->{α155_2} CodeBase[out α158_2, out α148_2 ∨ α159_2, ?]

:e
fun body: [G] -> (CodeBase[out Int, out G, out Any], CodeBase[out Int, out G, out Any]) -> Int -> CodeBase[out Int, out G, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out C, out Any]
//│ ╔══[ERROR] Type error in function literal with expected type (CodeBase[out Int, out <α>166_2, ?], CodeBase[out Int, out <α>166_2, ?]) ->{⊥} (Int) ->{⊥} CodeBase[out Int, out <α>166_2, ?]
//│ ║  l.56: 	fun body(x, y) = case
//│ ║        	         ^^^^^^^^^^^^
//│ ║  l.57: 	  0 then x
//│ ║        	^^^^^^^^^^
//│ ║  l.58: 	  1 then y
//│ ║        	^^^^^^^^^^
//│ ║  l.59: 	  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out C, out Any]
//│ ║        	^^^
//│ ╟── because: cannot constrain  α167_2 ->{α175_2} (CodeBase[out Int, out <α>166_2, ?] ∨ CodeBase[out α180_2, out α172_2 ∨ α183_2, ?])  <:  Int -> CodeBase[out Int, out <α>166_2, ?]
//│ ╟── because: cannot constrain  D( CodeBase[in D() out D( Int ), in D() out D( <α>166_2 ), in D() out D(  )] || CodeBase[in D() out D( α180_2 ), in D() out D( α172_2 || α183_2 ), in D() out D(  )] )  <:  CodeBase[out Int, out <α>166_2, ?]
//│ ╟── because: cannot constrain  D( α172_2 || α183_2 )  <:  <α>166_2
//│ ╟── because: cannot constrain  α183_2  <:  ¬(~<α>166_2)
//│ ╟── because: cannot constrain  α182_2  <:  ¬(~<α>166_2)
//│ ╟── because: cannot constrain  α182_2  <:  ¬(~<α>166_2)
//│ ╙── because: cannot constrain    <:  ¬(~<α>166_2)
//│ Type: ⊤

fun bind: [G] -> (CodeBase[out Int, out G, out Any], [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out Int, out C | G, out Any]) -> CodeBase[out Int, out G, out Any]
fun bind(rhs, k) = `let x = rhs `in k(x)
bind
//│ Type: forall α200_2: (CodeBase[out Int, out α200_2, ?], forall α201_3: (CodeBase[out Int, out α201_3, ?]) ->{⊥} CodeBase[out Int, out α201_3 ∨ α200_2, ?]) ->{⊥} CodeBase[out Int, out α200_2, ?]


fun body: [G] -> (CodeBase[out Int, out G, out Any], CodeBase[out Int, out G, out Any]) -> Int -> CodeBase[out Int, out G, out Any]
fun body(x, y) = case
  0 then x
  1 then y
  n then bind of x `+ y, (z => body(y, z)(n - 1)): [C] -> CodeBase[out Int, out C, out Any] -> CodeBase[out Int, out C, out Any]
body
//│ Type: forall α210_2: (CodeBase[out Int, out α210_2, ?], CodeBase[out Int, out α210_2, ?]) ->{⊥} (Int) ->{⊥} CodeBase[out Int, out α210_2, ?]

fun gib(n) = (x, y) `=> body(x, y)(n)
let g5 = run(gib(5))
g5
//│ Type: (Int, Int) -> Int
