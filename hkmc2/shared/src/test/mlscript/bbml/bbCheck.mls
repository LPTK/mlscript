:global
:bbml


fun add: (Int, Int) -> Int
fun add(x, y) = x + y
//│ Elab: { fun add: class:Int#15, class:Int#16 -> class:Int#17‹›; fun add(x@3, y@4): class:Int#18, class:Int#19 -> class:Int#20‹› = +#0(x@3#0, y@4#0)‹›; }‹›
//│ Type: ⊤

:e
fun foo: Int -> Int
fun foo: Int -> Int
//│ ╔══[ERROR] Duplicate definition of foo
//│ ╙── aready defined here
//│ Elab: { fun foo: class:Int#21 -> class:Int#22‹›; fun foo: class:Int#23 -> class:Int#24‹›; }‹›
//│ Type: ⊤

:e
fun id(x) = x
fun id(y) = y
//│ ╔══[ERROR] Duplicate definition of id
//│ ║  l.20: 	fun id(y) = y
//│ ║        	      ^^^
//│ ╙── aready defined here
//│ Elab: { fun id(x@2) = x@2#0; fun id(y@4) = y@4#0; }‹›
//│ Type: ⊤

:e
fun bar: Str -> Str
fun bar(x) = let t = x + 1 in "aaa"
//│ Elab: { fun bar: class:Str#0 -> class:Str#1‹›; fun bar(x@3): class:Str#2 -> class:Str#3‹› = { let t@4 = +#1(x@3#0, 1‹›)‹›; "aaa"‹› }‹›; }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: ⊤

:e
fun baz: Int -> Int
fun baz(x) = "bbb"
//│ Elab: { fun baz: class:Int#25 -> class:Int#26‹›; fun baz(x@3): class:Int#27 -> class:Int#28‹› = "bbb"‹›; }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: ⊤

add(1, 2)
//│ Elab: { add#0(1‹›, 2‹›)‹› }‹›
//│ Type: Int

add(1, 2): Int
//│ Elab: { App(Ref(add),Tup(List(Fld(‹›,Lit(IntLit(1)),None), Fld(‹›,Lit(IntLit(2)),None)))): Ref(class:Int)‹› }‹›
//│ Type: Int


:e
add(0, 0): Str
//│ Elab: { App(Ref(add),Tup(List(Fld(‹›,Lit(IntLit(0)),None), Fld(‹›,Lit(IntLit(0)),None)))): Ref(class:Str)‹› }‹›
//│ ╔══[ERROR] Cannot solve Int ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: Str

:e
fun errAdd(x: Int) = x + "1"
//│ Elab: { fun errAdd(x@2: class:Int#30) = +#2(x@2#0, "1"‹›)‹›; }‹›
//│ ╔══[ERROR] Cannot solve Str ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: ⊤

fun high: ([A] -> A -> A) -> Int
fun high(f) = f(42)
//│ Elab: { fun high: forall A@3: FunTy(Tup(List(Fld(‹›,Ref(A@3),None))),Ref(A@3),None)‹› -> class:Int#31‹›; fun high(f@4): forall A@7: FunTy(Tup(List(Fld(‹›,Ref(A@7),None))),Ref(A@7),None)‹› -> class:Int#32‹› = f@4#0(42‹›)‹›; }‹›
//│ Type: ⊤

high
//│ Elab: { high#0 }‹›
//│ Type: (forall α7_2: (α7_2) ->{⊥} α7_2) ->{⊥} Int


high((x => x): [A] -> A -> A)
//│ Elab: { high#1(λx@3. x@3#0‹›)‹› }‹›
//│ Type: Int

high(x => x)
//│ Elab: { high#2(λx@3. x@3#0‹›)‹› }‹›
//│ Type: Int

:e
high(x => x + 1)
//│ Elab: { high#3(λx@3. +#3(x@3#0, 1‹›)‹›‹›)‹› }‹›
//│ ╔══[ERROR] Cannot solve ⊤ ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ ╔══[ERROR] Cannot solve Int ∧ ⊤ ∧ ¬⊥
//│ ╙──
//│ Type: Int

(let a = 0 in x => x): [A] -> A -> A
//│ Elab: { Blk(List(LetBinding(Var(a@2),Lit(IntLit(0)))),Lam(List(Param(‹›,x@3,None)),Ref(x@3))): Forall(List(A@4),FunTy(Tup(List(Fld(‹›,Ref(A@4),None))),Ref(A@4),None))‹› }‹›
//│ Type: forall α9_2: (α9_2) ->{⊥} α9_2

(if false then x => x else y => y): [A] -> A -> A
//│ Elab: { If(Let(false,scrut@2,Lit(BoolLit(false)),Cons(Branch(Ref(scrut@2),LitPat(BoolLit(true)),Else(Lam(List(Param(‹›,x@3,None)),Ref(x@3)))),Else(Lam(List(Param(‹›,y@4,None)),Ref(y@4)))))): Forall(List(A@5),FunTy(Tup(List(Fld(‹›,Ref(A@5),None))),Ref(A@5),None))‹› }‹›
//│ /!!!\ Uncaught error: scala.MatchError: Cons(Branch(Ref(scrut@2),LitPat(BoolLit(true)),Else(Lam(List(Param(‹›,x@3,None)),Ref(x@3)))),Else(Lam(List(Param(‹›,y@4,None)),Ref(y@4)))) (of class hkmc2.semantics.Split$Cons)
//│ 	at: hkmc2.bbml.BBTyper.typeSplit(bbML.scala:355)
//│ 	at: hkmc2.bbml.BBTyper.typeSplit(bbML.scala:350)
//│ 	at: hkmc2.bbml.BBTyper.ascribe(bbML.scala:389)
//│ 	at: hkmc2.bbml.BBTyper.ascribe(bbML.scala:379)
//│ 	at: hkmc2.bbml.BBTyper.typeCheck$$anonfun$3(bbML.scala:531)
//│ 	at: hkmc2.bbml.TraceLogger.trace(TraceLogger.scala:14)
//│ 	at: hkmc2.bbml.BBTyper.typeCheck(bbML.scala:570)
//│ 	at: hkmc2.bbml.BBTyper.typeCheck$$anonfun$3(bbML.scala:464)
//│ 	at: hkmc2.bbml.TraceLogger.trace(TraceLogger.scala:14)
//│ 	at: hkmc2.bbml.BBTyper.typeCheck(bbML.scala:570)

fun baz: Int -> (([A] -> A -> A), Int) -> Int
fun baz(z) =
  (((f, x) => f(x)): (([A] -> A -> A), Int) -> Int)
//│ Elab: { fun baz: class:Int#33 -> forall A@3: FunTy(Tup(List(Fld(‹›,Ref(A@3),None))),Ref(A@3),None)‹›, class:Int#34 -> class:Int#35‹›‹›; fun baz(z@4): class:Int#38 -> forall A@10: FunTy(Tup(List(Fld(‹›,Ref(A@10),None))),Ref(A@10),None)‹›, class:Int#39 -> class:Int#40‹›‹› = Lam(List(Param(‹›,f@5,None), Param(‹›,x@6,None)),App(Ref(f@5),Tup(List(Fld(‹›,Ref(x@6),None))))): FunTy(Tup(List(Fld(‹›,Forall(List(A@8),FunTy(Tup(List(Fld(‹›,Ref(A@8),None))),Ref(A@8),None)),None), Fld(‹›,Ref(class:Int),None))),Ref(class:Int),None)‹›; }‹›
//│ Type: ⊤

:fixme // toLoc
:e
baz: Int -> (([A] -> A -> A), Int) -> Int
//│ Elab: { Ref(baz): FunTy(Tup(List(Fld(‹›,Ref(class:Int),None))),FunTy(Tup(List(Fld(‹›,Forall(List(A@2),FunTy(Tup(List(Fld(‹›,Ref(A@2),None))),Ref(A@2),None)),None), Fld(‹›,Ref(class:Int),None))),Ref(class:Int),None),None)‹› }‹›
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ Type: (Int) ->{⊥} (forall α17_2: (α17_2) ->{⊥} α17_2, Int) ->{⊥} Int


baz(42)
//│ Elab: { baz#1(42‹›)‹› }‹›
//│ Type: (forall α13_2: (α13_2) ->{⊥} α13_2, Int) ->{⊥} Int

:fixme // toLoc
:e
baz(42): (([A] -> A -> A), Int) -> Int
//│ Elab: { App(Ref(baz),Tup(List(Fld(‹›,Lit(IntLit(42)),None)))): FunTy(Tup(List(Fld(‹›,Forall(List(A@3),FunTy(Tup(List(Fld(‹›,Ref(A@3),None))),Ref(A@3),None)),None), Fld(‹›,Ref(class:Int),None))),Ref(class:Int),None)‹› }‹›
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ ╔══[ERROR] General type is not allowed here.
//│ ╙──
//│ Type: (forall α18_2: (α18_2) ->{⊥} α18_2, Int) ->{⊥} Int


fun id: [A] -> A -> A
fun id(x) = x
//│ Elab: { fun id: forall A@3: FunTy(Tup(List(Fld(‹›,Ref(A@3),None))),Ref(A@3),None)‹›; fun id(x@4): forall A@6: FunTy(Tup(List(Fld(‹›,Ref(A@6),None))),Ref(A@6),None)‹› = x@4#0; }‹›
//│ Type: ⊤

id: [A] -> A -> A
//│ Elab: { Ref(id): Forall(List(A@2),FunTy(Tup(List(Fld(‹›,Ref(A@2),None))),Ref(A@2),None))‹› }‹›
//│ Type: forall α21_2: (α21_2) ->{⊥} α21_2


(id: [A] -> A -> A): [A] -> A -> A
//│ Elab: { Asc(Ref(id),Forall(List(A@2),FunTy(Tup(List(Fld(‹›,Ref(A@2),None))),Ref(A@2),None))): Forall(List(A@3),FunTy(Tup(List(Fld(‹›,Ref(A@3),None))),Ref(A@3),None))‹› }‹›
//│ Type: forall α23_2: (α23_2) ->{⊥} α23_2

42: Int | Num
//│ Elab: { Lit(IntLit(42)): CompType(Ref(class:Int),Ref(class:Num),true)‹› }‹›
//│ Type: Int ∨ Num

42: [A] -> Int
//│ Elab: { Lit(IntLit(42)): Forall(List(A@2),Ref(class:Int))‹› }‹›
//│ Type: forall α27_2: Int


42: [A] -> Int | Num
//│ Elab: { Lit(IntLit(42)): Forall(List(A@2),CompType(Ref(class:Int),Ref(class:Num),true))‹› }‹›
//│ Type: forall α28_2: Int ∨ Num

fun foo: Int -> Int
foo
//│ Elab: { fun foo: class:Int#49 -> class:Int#50‹›; foo#0 }‹›
//│ Type: (Int) ->{⊥} Int

foo
//│ Elab: { foo#1 }‹›
//│ Type: (Int) ->{⊥} Int
